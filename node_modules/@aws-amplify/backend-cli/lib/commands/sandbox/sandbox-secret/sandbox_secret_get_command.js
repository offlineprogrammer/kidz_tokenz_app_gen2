import { printer } from '../../../printer.js';
/**
 * Command to get sandbox secret.
 */
export class SandboxSecretGetCommand {
    sandboxIdResolver;
    secretClient;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Get sandbox secret command.
     */
    constructor(sandboxIdResolver, secretClient) {
        this.sandboxIdResolver = sandboxIdResolver;
        this.secretClient = secretClient;
        this.command = 'get <secret-name>';
        this.describe = 'Get a sandbox secret';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        const sandboxBackendIdentifier = await this.sandboxIdResolver.resolve();
        const secret = await this.secretClient.getSecret(sandboxBackendIdentifier, {
            name: args['secret-name'],
        });
        printer.printRecords(secret);
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return yargs
            .positional('secret-name', {
            describe: 'Name of the secret to get',
            type: 'string',
            demandOption: true,
        })
            .help();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9zZWNyZXRfZ2V0X2NvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tbWFuZHMvc2FuZGJveC9zYW5kYm94LXNlY3JldC9zYW5kYm94X3NlY3JldF9nZXRfY29tbWFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFOUM7O0dBRUc7QUFDSCxNQUFNLE9BQU8sdUJBQXVCO0lBaUJmO0lBQ0E7SUFmbkI7O09BRUc7SUFDTSxPQUFPLENBQVM7SUFFekI7O09BRUc7SUFDTSxRQUFRLENBQVM7SUFFMUI7O09BRUc7SUFDSCxZQUNtQixpQkFBMkMsRUFDM0MsWUFBMEI7UUFEMUIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUEwQjtRQUMzQyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUUzQyxJQUFJLENBQUMsT0FBTyxHQUFHLG1CQUFtQixDQUFDO1FBQ25DLElBQUksQ0FBQyxRQUFRLEdBQUcsc0JBQXNCLENBQUM7SUFDekMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsT0FBTyxHQUFHLEtBQUssRUFBRSxJQUE2QixFQUFpQixFQUFFO1FBQy9ELE1BQU0sd0JBQXdCLEdBQUcsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDeEUsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsRUFBRTtZQUN6RSxJQUFJLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQztTQUMxQixDQUFDLENBQUM7UUFDSCxPQUFPLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQy9CLENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0gsT0FBTyxHQUFHLENBQUMsS0FBVyxFQUFpQyxFQUFFO1FBQ3ZELE9BQU8sS0FBSzthQUNULFVBQVUsQ0FBQyxhQUFhLEVBQUU7WUFDekIsUUFBUSxFQUFFLDJCQUEyQjtZQUNyQyxJQUFJLEVBQUUsUUFBUTtZQUNkLFlBQVksRUFBRSxJQUFJO1NBQ25CLENBQUM7YUFDRCxJQUFJLEVBQUUsQ0FBQztJQUNaLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXJndiwgQ29tbWFuZE1vZHVsZSB9IGZyb20gJ3lhcmdzJztcbmltcG9ydCB7IFNlY3JldENsaWVudCB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kLXNlY3JldCc7XG5pbXBvcnQgeyBTYW5kYm94QmFja2VuZElkUmVzb2x2ZXIgfSBmcm9tICcuLi9zYW5kYm94X2lkX3Jlc29sdmVyLmpzJztcbmltcG9ydCB7IEFyZ3VtZW50c0tlYmFiQ2FzZSB9IGZyb20gJy4uLy4uLy4uL2tlYmFiX2Nhc2UuanMnO1xuaW1wb3J0IHsgcHJpbnRlciB9IGZyb20gJy4uLy4uLy4uL3ByaW50ZXIuanMnO1xuXG4vKipcbiAqIENvbW1hbmQgdG8gZ2V0IHNhbmRib3ggc2VjcmV0LlxuICovXG5leHBvcnQgY2xhc3MgU2FuZGJveFNlY3JldEdldENvbW1hbmRcbiAgaW1wbGVtZW50cyBDb21tYW5kTW9kdWxlPG9iamVjdCwgU2VjcmV0R2V0Q29tbWFuZE9wdGlvbnM+XG57XG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgY29tbWFuZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgZGVzY3JpYmU6IHN0cmluZztcblxuICAvKipcbiAgICogR2V0IHNhbmRib3ggc2VjcmV0IGNvbW1hbmQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNhbmRib3hJZFJlc29sdmVyOiBTYW5kYm94QmFja2VuZElkUmVzb2x2ZXIsXG4gICAgcHJpdmF0ZSByZWFkb25seSBzZWNyZXRDbGllbnQ6IFNlY3JldENsaWVudFxuICApIHtcbiAgICB0aGlzLmNvbW1hbmQgPSAnZ2V0IDxzZWNyZXQtbmFtZT4nO1xuICAgIHRoaXMuZGVzY3JpYmUgPSAnR2V0IGEgc2FuZGJveCBzZWNyZXQnO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBoYW5kbGVyID0gYXN5bmMgKGFyZ3M6IFNlY3JldEdldENvbW1hbmRPcHRpb25zKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgY29uc3Qgc2FuZGJveEJhY2tlbmRJZGVudGlmaWVyID0gYXdhaXQgdGhpcy5zYW5kYm94SWRSZXNvbHZlci5yZXNvbHZlKCk7XG4gICAgY29uc3Qgc2VjcmV0ID0gYXdhaXQgdGhpcy5zZWNyZXRDbGllbnQuZ2V0U2VjcmV0KHNhbmRib3hCYWNrZW5kSWRlbnRpZmllciwge1xuICAgICAgbmFtZTogYXJnc1snc2VjcmV0LW5hbWUnXSxcbiAgICB9KTtcbiAgICBwcmludGVyLnByaW50UmVjb3JkcyhzZWNyZXQpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgYnVpbGRlciA9ICh5YXJnczogQXJndik6IEFyZ3Y8U2VjcmV0R2V0Q29tbWFuZE9wdGlvbnM+ID0+IHtcbiAgICByZXR1cm4geWFyZ3NcbiAgICAgIC5wb3NpdGlvbmFsKCdzZWNyZXQtbmFtZScsIHtcbiAgICAgICAgZGVzY3JpYmU6ICdOYW1lIG9mIHRoZSBzZWNyZXQgdG8gZ2V0JyxcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIGRlbWFuZE9wdGlvbjogdHJ1ZSxcbiAgICAgIH0pXG4gICAgICAuaGVscCgpO1xuICB9O1xufVxuXG50eXBlIFNlY3JldEdldENvbW1hbmRPcHRpb25zID1cbiAgQXJndW1lbnRzS2ViYWJDYXNlPFNlY3JldEdldENvbW1hbmRPcHRpb25zQ2FtZWxDYXNlPjtcblxudHlwZSBTZWNyZXRHZXRDb21tYW5kT3B0aW9uc0NhbWVsQ2FzZSA9IHtcbiAgc2VjcmV0TmFtZTogc3RyaW5nO1xufTtcbiJdfQ==