import { AmplifyError } from '@aws-amplify/platform-core';
import { COLOR } from '@aws-amplify/cli-core';
import { printer } from '../../printer.js';
/**
 * Coordinates creation of sandbox event handlers
 */
export class SandboxEventHandlerFactory {
    getBackendIdentifier;
    getUsageDataEmitter;
    /**
     * Creates a SandboxEventHandlerFactory
     */
    constructor(getBackendIdentifier, getUsageDataEmitter) {
        this.getBackendIdentifier = getBackendIdentifier;
        this.getUsageDataEmitter = getUsageDataEmitter;
    }
    getSandboxEventHandlers = ({ sandboxName, clientConfigLifecycleHandler, }) => {
        return {
            successfulDeployment: [
                async (...args) => {
                    const backendIdentifier = await this.getBackendIdentifier(sandboxName);
                    const usageDataEmitter = await this.getUsageDataEmitter();
                    try {
                        await clientConfigLifecycleHandler.generateClientConfigFile(backendIdentifier);
                        if (args && args[0]) {
                            const deployResult = args[0];
                            if (deployResult && deployResult.deploymentTimes) {
                                await usageDataEmitter.emitSuccess(deployResult.deploymentTimes, { command: 'Sandbox' });
                            }
                        }
                    }
                    catch (error) {
                        // Don't crash sandbox if config cannot be generated, but print the error message
                        printer.print('Amplify configuration could not be generated.', COLOR.RED);
                        if (error instanceof Error) {
                            printer.print(error.message, COLOR.RED);
                        }
                        else {
                            try {
                                printer.print(JSON.stringify(error, null, 2), COLOR.RED);
                            }
                            catch {
                                // fallback in case there's an error stringify the error
                                // like with circular references.
                                printer.print('Unknown error', COLOR.RED);
                            }
                        }
                    }
                },
            ],
            successfulDeletion: [
                async () => {
                    await clientConfigLifecycleHandler.deleteClientConfigFile();
                },
            ],
            failedDeployment: [
                async (...args) => {
                    const usageDataEmitter = await this.getUsageDataEmitter();
                    if (args.length == 0 || !args[0]) {
                        return;
                    }
                    const deployError = args[0];
                    if (deployError && deployError instanceof AmplifyError) {
                        await usageDataEmitter.emitFailure(deployError, {
                            command: 'Sandbox',
                        });
                    }
                    else {
                        await usageDataEmitter.emitFailure(AmplifyError.fromError(deployError), {
                            command: 'Sandbox',
                        });
                    }
                },
            ],
        };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9ldmVudF9oYW5kbGVyX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvc2FuZGJveC9zYW5kYm94X2V2ZW50X2hhbmRsZXJfZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsWUFBWSxFQUFvQixNQUFNLDRCQUE0QixDQUFDO0FBRTVFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFM0M7O0dBRUc7QUFDSCxNQUFNLE9BQU8sMEJBQTBCO0lBS2xCO0lBR0E7SUFQbkI7O09BRUc7SUFDSCxZQUNtQixvQkFFYyxFQUNkLG1CQUFvRDtRQUhwRCx5QkFBb0IsR0FBcEIsb0JBQW9CLENBRU47UUFDZCx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQWlDO0lBQ3BFLENBQUM7SUFFSix1QkFBdUIsR0FBK0IsQ0FBQyxFQUNyRCxXQUFXLEVBQ1gsNEJBQTRCLEdBQzdCLEVBQUUsRUFBRTtRQUNILE9BQU87WUFDTCxvQkFBb0IsRUFBRTtnQkFDcEIsS0FBSyxFQUFFLEdBQUcsSUFBZSxFQUFFLEVBQUU7b0JBQzNCLE1BQU0saUJBQWlCLEdBQUcsTUFBTSxJQUFJLENBQUMsb0JBQW9CLENBQ3ZELFdBQVcsQ0FDWixDQUFDO29CQUNGLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztvQkFDMUQsSUFBSTt3QkFDRixNQUFNLDRCQUE0QixDQUFDLHdCQUF3QixDQUN6RCxpQkFBaUIsQ0FDbEIsQ0FBQzt3QkFDRixJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7NEJBQ25CLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQWlCLENBQUM7NEJBQzdDLElBQUksWUFBWSxJQUFJLFlBQVksQ0FBQyxlQUFlLEVBQUU7Z0NBQ2hELE1BQU0sZ0JBQWdCLENBQUMsV0FBVyxDQUNoQyxZQUFZLENBQUMsZUFBZSxFQUM1QixFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsQ0FDdkIsQ0FBQzs2QkFDSDt5QkFDRjtxQkFDRjtvQkFBQyxPQUFPLEtBQUssRUFBRTt3QkFDZCxpRkFBaUY7d0JBQ2pGLE9BQU8sQ0FBQyxLQUFLLENBQ1gsK0NBQStDLEVBQy9DLEtBQUssQ0FBQyxHQUFHLENBQ1YsQ0FBQzt3QkFDRixJQUFJLEtBQUssWUFBWSxLQUFLLEVBQUU7NEJBQzFCLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7eUJBQ3pDOzZCQUFNOzRCQUNMLElBQUk7Z0NBQ0YsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDOzZCQUMxRDs0QkFBQyxNQUFNO2dDQUNOLHdEQUF3RDtnQ0FDeEQsaUNBQWlDO2dDQUNqQyxPQUFPLENBQUMsS0FBSyxDQUFDLGVBQWUsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7NkJBQzNDO3lCQUNGO3FCQUNGO2dCQUNILENBQUM7YUFDRjtZQUNELGtCQUFrQixFQUFFO2dCQUNsQixLQUFLLElBQUksRUFBRTtvQkFDVCxNQUFNLDRCQUE0QixDQUFDLHNCQUFzQixFQUFFLENBQUM7Z0JBQzlELENBQUM7YUFDRjtZQUNELGdCQUFnQixFQUFFO2dCQUNoQixLQUFLLEVBQUUsR0FBRyxJQUFlLEVBQUUsRUFBRTtvQkFDM0IsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO29CQUMxRCxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO3dCQUNoQyxPQUFPO3FCQUNSO29CQUNELE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDNUIsSUFBSSxXQUFXLElBQUksV0FBVyxZQUFZLFlBQVksRUFBRTt3QkFDdEQsTUFBTSxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFOzRCQUM5QyxPQUFPLEVBQUUsU0FBUzt5QkFDbkIsQ0FBQyxDQUFDO3FCQUNKO3lCQUFNO3dCQUNMLE1BQU0sZ0JBQWdCLENBQUMsV0FBVyxDQUNoQyxZQUFZLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxFQUNuQzs0QkFDRSxPQUFPLEVBQUUsU0FBUzt5QkFDbkIsQ0FDRixDQUFDO3FCQUNIO2dCQUNILENBQUM7YUFDRjtTQUNGLENBQUM7SUFDSixDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNhbmRib3hFdmVudEhhbmRsZXJDcmVhdG9yIH0gZnJvbSAnLi9zYW5kYm94X2NvbW1hbmQuanMnO1xuaW1wb3J0IHsgQmFja2VuZElkZW50aWZpZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCB7IEFtcGxpZnlFcnJvciwgVXNhZ2VEYXRhRW1pdHRlciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbGF0Zm9ybS1jb3JlJztcbmltcG9ydCB7IERlcGxveVJlc3VsdCB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kLWRlcGxveWVyJztcbmltcG9ydCB7IENPTE9SIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NsaS1jb3JlJztcbmltcG9ydCB7IHByaW50ZXIgfSBmcm9tICcuLi8uLi9wcmludGVyLmpzJztcblxuLyoqXG4gKiBDb29yZGluYXRlcyBjcmVhdGlvbiBvZiBzYW5kYm94IGV2ZW50IGhhbmRsZXJzXG4gKi9cbmV4cG9ydCBjbGFzcyBTYW5kYm94RXZlbnRIYW5kbGVyRmFjdG9yeSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgU2FuZGJveEV2ZW50SGFuZGxlckZhY3RvcnlcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZ2V0QmFja2VuZElkZW50aWZpZXI6IChcbiAgICAgIHNhbmRib3hOYW1lPzogc3RyaW5nXG4gICAgKSA9PiBQcm9taXNlPEJhY2tlbmRJZGVudGlmaWVyPixcbiAgICBwcml2YXRlIHJlYWRvbmx5IGdldFVzYWdlRGF0YUVtaXR0ZXI6ICgpID0+IFByb21pc2U8VXNhZ2VEYXRhRW1pdHRlcj5cbiAgKSB7fVxuXG4gIGdldFNhbmRib3hFdmVudEhhbmRsZXJzOiBTYW5kYm94RXZlbnRIYW5kbGVyQ3JlYXRvciA9ICh7XG4gICAgc2FuZGJveE5hbWUsXG4gICAgY2xpZW50Q29uZmlnTGlmZWN5Y2xlSGFuZGxlcixcbiAgfSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzZnVsRGVwbG95bWVudDogW1xuICAgICAgICBhc3luYyAoLi4uYXJnczogdW5rbm93bltdKSA9PiB7XG4gICAgICAgICAgY29uc3QgYmFja2VuZElkZW50aWZpZXIgPSBhd2FpdCB0aGlzLmdldEJhY2tlbmRJZGVudGlmaWVyKFxuICAgICAgICAgICAgc2FuZGJveE5hbWVcbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnN0IHVzYWdlRGF0YUVtaXR0ZXIgPSBhd2FpdCB0aGlzLmdldFVzYWdlRGF0YUVtaXR0ZXIoKTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgY2xpZW50Q29uZmlnTGlmZWN5Y2xlSGFuZGxlci5nZW5lcmF0ZUNsaWVudENvbmZpZ0ZpbGUoXG4gICAgICAgICAgICAgIGJhY2tlbmRJZGVudGlmaWVyXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKGFyZ3MgJiYgYXJnc1swXSkge1xuICAgICAgICAgICAgICBjb25zdCBkZXBsb3lSZXN1bHQgPSBhcmdzWzBdIGFzIERlcGxveVJlc3VsdDtcbiAgICAgICAgICAgICAgaWYgKGRlcGxveVJlc3VsdCAmJiBkZXBsb3lSZXN1bHQuZGVwbG95bWVudFRpbWVzKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdXNhZ2VEYXRhRW1pdHRlci5lbWl0U3VjY2VzcyhcbiAgICAgICAgICAgICAgICAgIGRlcGxveVJlc3VsdC5kZXBsb3ltZW50VGltZXMsXG4gICAgICAgICAgICAgICAgICB7IGNvbW1hbmQ6ICdTYW5kYm94JyB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAvLyBEb24ndCBjcmFzaCBzYW5kYm94IGlmIGNvbmZpZyBjYW5ub3QgYmUgZ2VuZXJhdGVkLCBidXQgcHJpbnQgdGhlIGVycm9yIG1lc3NhZ2VcbiAgICAgICAgICAgIHByaW50ZXIucHJpbnQoXG4gICAgICAgICAgICAgICdBbXBsaWZ5IGNvbmZpZ3VyYXRpb24gY291bGQgbm90IGJlIGdlbmVyYXRlZC4nLFxuICAgICAgICAgICAgICBDT0xPUi5SRURcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICBwcmludGVyLnByaW50KGVycm9yLm1lc3NhZ2UsIENPTE9SLlJFRCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHByaW50ZXIucHJpbnQoSlNPTi5zdHJpbmdpZnkoZXJyb3IsIG51bGwsIDIpLCBDT0xPUi5SRUQpO1xuICAgICAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgICAgICAvLyBmYWxsYmFjayBpbiBjYXNlIHRoZXJlJ3MgYW4gZXJyb3Igc3RyaW5naWZ5IHRoZSBlcnJvclxuICAgICAgICAgICAgICAgIC8vIGxpa2Ugd2l0aCBjaXJjdWxhciByZWZlcmVuY2VzLlxuICAgICAgICAgICAgICAgIHByaW50ZXIucHJpbnQoJ1Vua25vd24gZXJyb3InLCBDT0xPUi5SRUQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIHN1Y2Nlc3NmdWxEZWxldGlvbjogW1xuICAgICAgICBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgYXdhaXQgY2xpZW50Q29uZmlnTGlmZWN5Y2xlSGFuZGxlci5kZWxldGVDbGllbnRDb25maWdGaWxlKCk7XG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgZmFpbGVkRGVwbG95bWVudDogW1xuICAgICAgICBhc3luYyAoLi4uYXJnczogdW5rbm93bltdKSA9PiB7XG4gICAgICAgICAgY29uc3QgdXNhZ2VEYXRhRW1pdHRlciA9IGF3YWl0IHRoaXMuZ2V0VXNhZ2VEYXRhRW1pdHRlcigpO1xuICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PSAwIHx8ICFhcmdzWzBdKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGRlcGxveUVycm9yID0gYXJnc1swXTtcbiAgICAgICAgICBpZiAoZGVwbG95RXJyb3IgJiYgZGVwbG95RXJyb3IgaW5zdGFuY2VvZiBBbXBsaWZ5RXJyb3IpIHtcbiAgICAgICAgICAgIGF3YWl0IHVzYWdlRGF0YUVtaXR0ZXIuZW1pdEZhaWx1cmUoZGVwbG95RXJyb3IsIHtcbiAgICAgICAgICAgICAgY29tbWFuZDogJ1NhbmRib3gnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGF3YWl0IHVzYWdlRGF0YUVtaXR0ZXIuZW1pdEZhaWx1cmUoXG4gICAgICAgICAgICAgIEFtcGxpZnlFcnJvci5mcm9tRXJyb3IoZGVwbG95RXJyb3IpLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29tbWFuZDogJ1NhbmRib3gnLFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfTtcbiAgfTtcbn1cbiJdfQ==