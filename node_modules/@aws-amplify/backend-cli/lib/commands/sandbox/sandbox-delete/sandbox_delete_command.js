import { AmplifyPrompter } from '@aws-amplify/cli-core';
/**
 * Command that deletes the sandbox environment.
 */
export class SandboxDeleteCommand {
    sandboxFactory;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Deletes sandbox environment.
     */
    constructor(sandboxFactory) {
        this.sandboxFactory = sandboxFactory;
        this.command = 'delete';
        this.describe = 'Deletes sandbox environment';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        let isConfirmed = args.yes;
        if (!isConfirmed) {
            isConfirmed = await AmplifyPrompter.yesOrNo({
                message: "Are you sure you want to delete all the resources in your sandbox environment (This can't be undone)?",
            });
        }
        if (isConfirmed) {
            await (await this.sandboxFactory.getInstance()).delete({ name: args.name });
        }
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return yargs
            .option('yes', {
            describe: 'Do not ask for confirmation before deleting the sandbox environment',
            type: 'boolean',
            array: false,
            alias: 'y',
        })
            .option('name', {
            describe: 'An optional name to distinguish between different sandbox environments. Default is the name in your package.json',
            type: 'string',
            array: false,
        })
            .check((argv) => {
            if (argv.name) {
                const projectNameRegex = /^[a-zA-Z0-9-]{1,15}$/;
                if (!argv.name.match(projectNameRegex)) {
                    throw new Error(`--name should match [a-zA-Z0-9-] and less than 15 characters.`);
                }
            }
            return true;
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9kZWxldGVfY29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21tYW5kcy9zYW5kYm94L3NhbmRib3gtZGVsZXRlL3NhbmRib3hfZGVsZXRlX2NvbW1hbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRXhEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLG9CQUFvQjtJQWdCRjtJQWI3Qjs7T0FFRztJQUNNLE9BQU8sQ0FBUztJQUV6Qjs7T0FFRztJQUNNLFFBQVEsQ0FBUztJQUUxQjs7T0FFRztJQUNILFlBQTZCLGNBQXVDO1FBQXZDLG1CQUFjLEdBQWQsY0FBYyxDQUF5QjtRQUNsRSxJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQztRQUN4QixJQUFJLENBQUMsUUFBUSxHQUFHLDZCQUE2QixDQUFDO0lBQ2hELENBQUM7SUFFRDs7T0FFRztJQUNILE9BQU8sR0FBRyxLQUFLLEVBQ2IsSUFBcUQsRUFDdEMsRUFBRTtRQUNqQixJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQzNCLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDaEIsV0FBVyxHQUFHLE1BQU0sZUFBZSxDQUFDLE9BQU8sQ0FBQztnQkFDMUMsT0FBTyxFQUNMLHVHQUF1RzthQUMxRyxDQUFDLENBQUM7U0FDSjtRQUVELElBQUksV0FBVyxFQUFFO1lBQ2YsTUFBTSxDQUNKLE1BQU0sSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLEVBQUUsQ0FDeEMsQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7U0FDL0I7SUFDSCxDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNILE9BQU8sR0FBRyxDQUFDLEtBQVcsRUFBcUMsRUFBRTtRQUMzRCxPQUFPLEtBQUs7YUFDVCxNQUFNLENBQUMsS0FBSyxFQUFFO1lBQ2IsUUFBUSxFQUNOLHFFQUFxRTtZQUN2RSxJQUFJLEVBQUUsU0FBUztZQUNmLEtBQUssRUFBRSxLQUFLO1lBQ1osS0FBSyxFQUFFLEdBQUc7U0FDWCxDQUFDO2FBQ0QsTUFBTSxDQUFDLE1BQU0sRUFBRTtZQUNkLFFBQVEsRUFDTixrSEFBa0g7WUFDcEgsSUFBSSxFQUFFLFFBQVE7WUFDZCxLQUFLLEVBQUUsS0FBSztTQUNiLENBQUM7YUFDRCxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNkLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDYixNQUFNLGdCQUFnQixHQUFHLHNCQUFzQixDQUFDO2dCQUNoRCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtvQkFDdEMsTUFBTSxJQUFJLEtBQUssQ0FDYiwrREFBK0QsQ0FDaEUsQ0FBQztpQkFDSDthQUNGO1lBQ0QsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXJndW1lbnRzQ2FtZWxDYXNlLCBBcmd2LCBDb21tYW5kTW9kdWxlIH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHsgU2FuZGJveFNpbmdsZXRvbkZhY3RvcnkgfSBmcm9tICdAYXdzLWFtcGxpZnkvc2FuZGJveCc7XG5pbXBvcnQgeyBBbXBsaWZ5UHJvbXB0ZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvY2xpLWNvcmUnO1xuXG4vKipcbiAqIENvbW1hbmQgdGhhdCBkZWxldGVzIHRoZSBzYW5kYm94IGVudmlyb25tZW50LlxuICovXG5leHBvcnQgY2xhc3MgU2FuZGJveERlbGV0ZUNvbW1hbmRcbiAgaW1wbGVtZW50cyBDb21tYW5kTW9kdWxlPG9iamVjdCwgU2FuZGJveERlbGV0ZUNvbW1hbmRPcHRpb25zPlxue1xuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGNvbW1hbmQ6IHN0cmluZztcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGRlc2NyaWJlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgc2FuZGJveCBlbnZpcm9ubWVudC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgc2FuZGJveEZhY3Rvcnk6IFNhbmRib3hTaW5nbGV0b25GYWN0b3J5KSB7XG4gICAgdGhpcy5jb21tYW5kID0gJ2RlbGV0ZSc7XG4gICAgdGhpcy5kZXNjcmliZSA9ICdEZWxldGVzIHNhbmRib3ggZW52aXJvbm1lbnQnO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBoYW5kbGVyID0gYXN5bmMgKFxuICAgIGFyZ3M6IEFyZ3VtZW50c0NhbWVsQ2FzZTxTYW5kYm94RGVsZXRlQ29tbWFuZE9wdGlvbnM+XG4gICk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGxldCBpc0NvbmZpcm1lZCA9IGFyZ3MueWVzO1xuICAgIGlmICghaXNDb25maXJtZWQpIHtcbiAgICAgIGlzQ29uZmlybWVkID0gYXdhaXQgQW1wbGlmeVByb21wdGVyLnllc09yTm8oe1xuICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgIFwiQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSBhbGwgdGhlIHJlc291cmNlcyBpbiB5b3VyIHNhbmRib3ggZW52aXJvbm1lbnQgKFRoaXMgY2FuJ3QgYmUgdW5kb25lKT9cIixcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChpc0NvbmZpcm1lZCkge1xuICAgICAgYXdhaXQgKFxuICAgICAgICBhd2FpdCB0aGlzLnNhbmRib3hGYWN0b3J5LmdldEluc3RhbmNlKClcbiAgICAgICkuZGVsZXRlKHsgbmFtZTogYXJncy5uYW1lIH0pO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIGJ1aWxkZXIgPSAoeWFyZ3M6IEFyZ3YpOiBBcmd2PFNhbmRib3hEZWxldGVDb21tYW5kT3B0aW9ucz4gPT4ge1xuICAgIHJldHVybiB5YXJnc1xuICAgICAgLm9wdGlvbigneWVzJywge1xuICAgICAgICBkZXNjcmliZTpcbiAgICAgICAgICAnRG8gbm90IGFzayBmb3IgY29uZmlybWF0aW9uIGJlZm9yZSBkZWxldGluZyB0aGUgc2FuZGJveCBlbnZpcm9ubWVudCcsXG4gICAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgICAgYXJyYXk6IGZhbHNlLFxuICAgICAgICBhbGlhczogJ3knLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oJ25hbWUnLCB7XG4gICAgICAgIGRlc2NyaWJlOlxuICAgICAgICAgICdBbiBvcHRpb25hbCBuYW1lIHRvIGRpc3Rpbmd1aXNoIGJldHdlZW4gZGlmZmVyZW50IHNhbmRib3ggZW52aXJvbm1lbnRzLiBEZWZhdWx0IGlzIHRoZSBuYW1lIGluIHlvdXIgcGFja2FnZS5qc29uJyxcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIGFycmF5OiBmYWxzZSxcbiAgICAgIH0pXG4gICAgICAuY2hlY2soKGFyZ3YpID0+IHtcbiAgICAgICAgaWYgKGFyZ3YubmFtZSkge1xuICAgICAgICAgIGNvbnN0IHByb2plY3ROYW1lUmVnZXggPSAvXlthLXpBLVowLTktXXsxLDE1fSQvO1xuICAgICAgICAgIGlmICghYXJndi5uYW1lLm1hdGNoKHByb2plY3ROYW1lUmVnZXgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgIGAtLW5hbWUgc2hvdWxkIG1hdGNoIFthLXpBLVowLTktXSBhbmQgbGVzcyB0aGFuIDE1IGNoYXJhY3RlcnMuYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9KTtcbiAgfTtcbn1cblxuZXhwb3J0IHR5cGUgU2FuZGJveERlbGV0ZUNvbW1hbmRPcHRpb25zID0ge1xuICB5ZXM/OiBib29sZWFuO1xuICBuYW1lPzogc3RyaW5nO1xufTtcbiJdfQ==