import { fileURLToPath } from 'url';
import { SandboxCommand } from './sandbox_command.js';
import { SandboxSingletonFactory } from '@aws-amplify/sandbox';
import { SandboxDeleteCommand } from './sandbox-delete/sandbox_delete_command.js';
import { SandboxBackendIdResolver } from './sandbox_id_resolver.js';
import { ClientConfigGeneratorAdapter } from '../../client-config/client_config_generator_adapter.js';
import { fromNodeProviderChain } from '@aws-sdk/credential-providers';
import { LocalNamespaceResolver } from '../../backend-identifier/local_namespace_resolver.js';
import { createSandboxSecretCommand } from './sandbox-secret/sandbox_secret_command_factory.js';
import { PackageJsonReader, UsageDataEmitterFactory, } from '@aws-amplify/platform-core';
import { SandboxEventHandlerFactory } from './sandbox_event_handler_factory.js';
import { CommandMiddleware } from '../../command_middleware.js';
import { printer } from '../../printer.js';
/**
 * Creates wired sandbox command.
 */
export const createSandboxCommand = () => {
    const credentialProvider = fromNodeProviderChain();
    const sandboxBackendIdPartsResolver = new SandboxBackendIdResolver(new LocalNamespaceResolver(new PackageJsonReader()));
    /**
     * This callback allows sandbox to resolve the backend id using the name specified by the --name arg if present
     * Otherwise, the default sandboxBackendIdPartsResolver.resolve() value is used
     * @param sandboxName A customer specified name to use as part of the sandbox identifier (the --name arg to sandbox)
     */
    const sandboxBackendIdentifierResolver = async (sandboxName) => {
        const sandboxBackendIdParts = await sandboxBackendIdPartsResolver.resolve();
        if (!sandboxName) {
            return sandboxBackendIdParts;
        }
        return {
            ...sandboxBackendIdParts,
            name: sandboxName,
        };
    };
    const sandboxFactory = new SandboxSingletonFactory(sandboxBackendIdentifierResolver, printer);
    const clientConfigGeneratorAdapter = new ClientConfigGeneratorAdapter(credentialProvider);
    const libraryVersion = new PackageJsonReader().read(fileURLToPath(new URL('../../../package.json', import.meta.url))).version ?? '';
    const eventHandlerFactory = new SandboxEventHandlerFactory(sandboxBackendIdentifierResolver, async () => await new UsageDataEmitterFactory().getInstance(libraryVersion));
    const commandMiddleWare = new CommandMiddleware();
    return new SandboxCommand(sandboxFactory, [new SandboxDeleteCommand(sandboxFactory), createSandboxSecretCommand()], clientConfigGeneratorAdapter, commandMiddleWare, eventHandlerFactory.getSandboxEventHandlers);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9jb21tYW5kX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvc2FuZGJveC9zYW5kYm94X2NvbW1hbmRfZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxjQUFjLEVBQXlCLE1BQU0sc0JBQXNCLENBQUM7QUFDN0UsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDL0QsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDbEYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDcEUsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sd0RBQXdELENBQUM7QUFDdEcsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDdEUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sc0RBQXNELENBQUM7QUFDOUYsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sb0RBQW9ELENBQUM7QUFDaEcsT0FBTyxFQUNMLGlCQUFpQixFQUNqQix1QkFBdUIsR0FDeEIsTUFBTSw0QkFBNEIsQ0FBQztBQUNwQyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUNoRixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFM0M7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxHQUdsQyxFQUFFO0lBQ0YsTUFBTSxrQkFBa0IsR0FBRyxxQkFBcUIsRUFBRSxDQUFDO0lBQ25ELE1BQU0sNkJBQTZCLEdBQUcsSUFBSSx3QkFBd0IsQ0FDaEUsSUFBSSxzQkFBc0IsQ0FBQyxJQUFJLGlCQUFpQixFQUFFLENBQUMsQ0FDcEQsQ0FBQztJQUVGOzs7O09BSUc7SUFDSCxNQUFNLGdDQUFnQyxHQUFHLEtBQUssRUFBRSxXQUFvQixFQUFFLEVBQUU7UUFDdEUsTUFBTSxxQkFBcUIsR0FBRyxNQUFNLDZCQUE2QixDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQzVFLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDaEIsT0FBTyxxQkFBcUIsQ0FBQztTQUM5QjtRQUNELE9BQU87WUFDTCxHQUFHLHFCQUFxQjtZQUN4QixJQUFJLEVBQUUsV0FBVztTQUNsQixDQUFDO0lBQ0osQ0FBQyxDQUFDO0lBRUYsTUFBTSxjQUFjLEdBQUcsSUFBSSx1QkFBdUIsQ0FDaEQsZ0NBQWdDLEVBQ2hDLE9BQU8sQ0FDUixDQUFDO0lBQ0YsTUFBTSw0QkFBNEIsR0FBRyxJQUFJLDRCQUE0QixDQUNuRSxrQkFBa0IsQ0FDbkIsQ0FBQztJQUVGLE1BQU0sY0FBYyxHQUNsQixJQUFJLGlCQUFpQixFQUFFLENBQUMsSUFBSSxDQUMxQixhQUFhLENBQUMsSUFBSSxHQUFHLENBQUMsdUJBQXVCLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUNqRSxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUM7SUFFbEIsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLDBCQUEwQixDQUN4RCxnQ0FBZ0MsRUFDaEMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxNQUFNLElBQUksdUJBQXVCLEVBQUUsQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQzVFLENBQUM7SUFFRixNQUFNLGlCQUFpQixHQUFHLElBQUksaUJBQWlCLEVBQUUsQ0FBQztJQUNsRCxPQUFPLElBQUksY0FBYyxDQUN2QixjQUFjLEVBQ2QsQ0FBQyxJQUFJLG9CQUFvQixDQUFDLGNBQWMsQ0FBQyxFQUFFLDBCQUEwQixFQUFFLENBQUMsRUFDeEUsNEJBQTRCLEVBQzVCLGlCQUFpQixFQUNqQixtQkFBbUIsQ0FBQyx1QkFBdUIsQ0FDNUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1hbmRNb2R1bGUgfSBmcm9tICd5YXJncyc7XG5pbXBvcnQgeyBmaWxlVVJMVG9QYXRoIH0gZnJvbSAndXJsJztcbmltcG9ydCB7IFNhbmRib3hDb21tYW5kLCBTYW5kYm94Q29tbWFuZE9wdGlvbnMgfSBmcm9tICcuL3NhbmRib3hfY29tbWFuZC5qcyc7XG5pbXBvcnQgeyBTYW5kYm94U2luZ2xldG9uRmFjdG9yeSB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9zYW5kYm94JztcbmltcG9ydCB7IFNhbmRib3hEZWxldGVDb21tYW5kIH0gZnJvbSAnLi9zYW5kYm94LWRlbGV0ZS9zYW5kYm94X2RlbGV0ZV9jb21tYW5kLmpzJztcbmltcG9ydCB7IFNhbmRib3hCYWNrZW5kSWRSZXNvbHZlciB9IGZyb20gJy4vc2FuZGJveF9pZF9yZXNvbHZlci5qcyc7XG5pbXBvcnQgeyBDbGllbnRDb25maWdHZW5lcmF0b3JBZGFwdGVyIH0gZnJvbSAnLi4vLi4vY2xpZW50LWNvbmZpZy9jbGllbnRfY29uZmlnX2dlbmVyYXRvcl9hZGFwdGVyLmpzJztcbmltcG9ydCB7IGZyb21Ob2RlUHJvdmlkZXJDaGFpbiB9IGZyb20gJ0Bhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXJzJztcbmltcG9ydCB7IExvY2FsTmFtZXNwYWNlUmVzb2x2ZXIgfSBmcm9tICcuLi8uLi9iYWNrZW5kLWlkZW50aWZpZXIvbG9jYWxfbmFtZXNwYWNlX3Jlc29sdmVyLmpzJztcbmltcG9ydCB7IGNyZWF0ZVNhbmRib3hTZWNyZXRDb21tYW5kIH0gZnJvbSAnLi9zYW5kYm94LXNlY3JldC9zYW5kYm94X3NlY3JldF9jb21tYW5kX2ZhY3RvcnkuanMnO1xuaW1wb3J0IHtcbiAgUGFja2FnZUpzb25SZWFkZXIsXG4gIFVzYWdlRGF0YUVtaXR0ZXJGYWN0b3J5LFxufSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5pbXBvcnQgeyBTYW5kYm94RXZlbnRIYW5kbGVyRmFjdG9yeSB9IGZyb20gJy4vc2FuZGJveF9ldmVudF9oYW5kbGVyX2ZhY3RvcnkuanMnO1xuaW1wb3J0IHsgQ29tbWFuZE1pZGRsZXdhcmUgfSBmcm9tICcuLi8uLi9jb21tYW5kX21pZGRsZXdhcmUuanMnO1xuaW1wb3J0IHsgcHJpbnRlciB9IGZyb20gJy4uLy4uL3ByaW50ZXIuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgd2lyZWQgc2FuZGJveCBjb21tYW5kLlxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlU2FuZGJveENvbW1hbmQgPSAoKTogQ29tbWFuZE1vZHVsZTxcbiAgb2JqZWN0LFxuICBTYW5kYm94Q29tbWFuZE9wdGlvbnNcbj4gPT4ge1xuICBjb25zdCBjcmVkZW50aWFsUHJvdmlkZXIgPSBmcm9tTm9kZVByb3ZpZGVyQ2hhaW4oKTtcbiAgY29uc3Qgc2FuZGJveEJhY2tlbmRJZFBhcnRzUmVzb2x2ZXIgPSBuZXcgU2FuZGJveEJhY2tlbmRJZFJlc29sdmVyKFxuICAgIG5ldyBMb2NhbE5hbWVzcGFjZVJlc29sdmVyKG5ldyBQYWNrYWdlSnNvblJlYWRlcigpKVxuICApO1xuXG4gIC8qKlxuICAgKiBUaGlzIGNhbGxiYWNrIGFsbG93cyBzYW5kYm94IHRvIHJlc29sdmUgdGhlIGJhY2tlbmQgaWQgdXNpbmcgdGhlIG5hbWUgc3BlY2lmaWVkIGJ5IHRoZSAtLW5hbWUgYXJnIGlmIHByZXNlbnRcbiAgICogT3RoZXJ3aXNlLCB0aGUgZGVmYXVsdCBzYW5kYm94QmFja2VuZElkUGFydHNSZXNvbHZlci5yZXNvbHZlKCkgdmFsdWUgaXMgdXNlZFxuICAgKiBAcGFyYW0gc2FuZGJveE5hbWUgQSBjdXN0b21lciBzcGVjaWZpZWQgbmFtZSB0byB1c2UgYXMgcGFydCBvZiB0aGUgc2FuZGJveCBpZGVudGlmaWVyICh0aGUgLS1uYW1lIGFyZyB0byBzYW5kYm94KVxuICAgKi9cbiAgY29uc3Qgc2FuZGJveEJhY2tlbmRJZGVudGlmaWVyUmVzb2x2ZXIgPSBhc3luYyAoc2FuZGJveE5hbWU/OiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBzYW5kYm94QmFja2VuZElkUGFydHMgPSBhd2FpdCBzYW5kYm94QmFja2VuZElkUGFydHNSZXNvbHZlci5yZXNvbHZlKCk7XG4gICAgaWYgKCFzYW5kYm94TmFtZSkge1xuICAgICAgcmV0dXJuIHNhbmRib3hCYWNrZW5kSWRQYXJ0cztcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnNhbmRib3hCYWNrZW5kSWRQYXJ0cyxcbiAgICAgIG5hbWU6IHNhbmRib3hOYW1lLFxuICAgIH07XG4gIH07XG5cbiAgY29uc3Qgc2FuZGJveEZhY3RvcnkgPSBuZXcgU2FuZGJveFNpbmdsZXRvbkZhY3RvcnkoXG4gICAgc2FuZGJveEJhY2tlbmRJZGVudGlmaWVyUmVzb2x2ZXIsXG4gICAgcHJpbnRlclxuICApO1xuICBjb25zdCBjbGllbnRDb25maWdHZW5lcmF0b3JBZGFwdGVyID0gbmV3IENsaWVudENvbmZpZ0dlbmVyYXRvckFkYXB0ZXIoXG4gICAgY3JlZGVudGlhbFByb3ZpZGVyXG4gICk7XG5cbiAgY29uc3QgbGlicmFyeVZlcnNpb24gPVxuICAgIG5ldyBQYWNrYWdlSnNvblJlYWRlcigpLnJlYWQoXG4gICAgICBmaWxlVVJMVG9QYXRoKG5ldyBVUkwoJy4uLy4uLy4uL3BhY2thZ2UuanNvbicsIGltcG9ydC5tZXRhLnVybCkpXG4gICAgKS52ZXJzaW9uID8/ICcnO1xuXG4gIGNvbnN0IGV2ZW50SGFuZGxlckZhY3RvcnkgPSBuZXcgU2FuZGJveEV2ZW50SGFuZGxlckZhY3RvcnkoXG4gICAgc2FuZGJveEJhY2tlbmRJZGVudGlmaWVyUmVzb2x2ZXIsXG4gICAgYXN5bmMgKCkgPT4gYXdhaXQgbmV3IFVzYWdlRGF0YUVtaXR0ZXJGYWN0b3J5KCkuZ2V0SW5zdGFuY2UobGlicmFyeVZlcnNpb24pXG4gICk7XG5cbiAgY29uc3QgY29tbWFuZE1pZGRsZVdhcmUgPSBuZXcgQ29tbWFuZE1pZGRsZXdhcmUoKTtcbiAgcmV0dXJuIG5ldyBTYW5kYm94Q29tbWFuZChcbiAgICBzYW5kYm94RmFjdG9yeSxcbiAgICBbbmV3IFNhbmRib3hEZWxldGVDb21tYW5kKHNhbmRib3hGYWN0b3J5KSwgY3JlYXRlU2FuZGJveFNlY3JldENvbW1hbmQoKV0sXG4gICAgY2xpZW50Q29uZmlnR2VuZXJhdG9yQWRhcHRlcixcbiAgICBjb21tYW5kTWlkZGxlV2FyZSxcbiAgICBldmVudEhhbmRsZXJGYWN0b3J5LmdldFNhbmRib3hFdmVudEhhbmRsZXJzXG4gICk7XG59O1xuIl19