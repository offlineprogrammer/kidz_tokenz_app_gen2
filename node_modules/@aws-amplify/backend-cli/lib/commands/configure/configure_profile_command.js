import { AmplifyPrompter } from '@aws-amplify/cli-core';
import { DEFAULT_PROFILE } from '@smithy/shared-ini-file-loader';
import { EOL } from 'os';
import { Open } from '../open/open.js';
import { printer } from '../../printer.js';
const configureAccountUrl = 'https://docs.amplify.aws/gen2/start/account-setup/';
const profileSetupInstruction = `Follow the instructions at ${configureAccountUrl}${EOL}to configure Amplify IAM user and credentials.${EOL}`;
/**
 * Command to configure AWS Amplify profile.
 */
export class ConfigureProfileCommand {
    profileController;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Configure profile command.
     */
    constructor(profileController) {
        this.profileController = profileController;
        this.command = 'profile';
        this.describe = 'Configure an AWS Amplify profile';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        const profileName = args.name;
        const profileExists = await this.profileController.profileExists(profileName);
        if (profileExists) {
            printer.print(`Profile '${profileName}' already exists!${EOL}${profileSetupInstruction}`);
            return;
        }
        const hasIAMUser = await AmplifyPrompter.yesOrNo({
            message: 'Do you already have IAM User credentials?',
        });
        if (!hasIAMUser) {
            printer.print(profileSetupInstruction);
            await Open.open(configureAccountUrl, { wait: false });
            await AmplifyPrompter.input({
                message: `Hit [enter] when complete`,
            });
        }
        const accessKeyId = await AmplifyPrompter.secretValue('Enter Access Key ID:');
        const secretAccessKey = await AmplifyPrompter.secretValue('Enter Secret Access Key:');
        const region = await AmplifyPrompter.input({
            message: `Enter the AWS region to use with the '${profileName}' profile (eg us-east-1, us-west-2, etc):`,
        });
        await this.profileController.createOrAppendAWSFiles({
            profile: profileName,
            region,
            accessKeyId,
            secretAccessKey,
        });
        printer.print(`Created profile ${profileName} successfully!`);
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return yargs.option('name', {
            describe: 'An AWS profile name',
            type: 'string',
            array: false,
            default: DEFAULT_PROFILE,
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJlX3Byb2ZpbGVfY29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9jb25maWd1cmUvY29uZmlndXJlX3Byb2ZpbGVfY29tbWFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDekIsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBR3ZDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUUzQyxNQUFNLG1CQUFtQixHQUN2QixvREFBb0QsQ0FBQztBQUV2RCxNQUFNLHVCQUF1QixHQUFHLDhCQUE4QixtQkFBbUIsR0FBRyxHQUFHLGlEQUFpRCxHQUFHLEVBQUUsQ0FBQztBQUU5STs7R0FFRztBQUNILE1BQU0sT0FBTyx1QkFBdUI7SUFnQkw7SUFiN0I7O09BRUc7SUFDTSxPQUFPLENBQVM7SUFFekI7O09BRUc7SUFDTSxRQUFRLENBQVM7SUFFMUI7O09BRUc7SUFDSCxZQUE2QixpQkFBb0M7UUFBcEMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUMvRCxJQUFJLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQztRQUN6QixJQUFJLENBQUMsUUFBUSxHQUFHLGtDQUFrQyxDQUFDO0lBQ3JELENBQUM7SUFFRDs7T0FFRztJQUNILE9BQU8sR0FBRyxLQUFLLEVBQUUsSUFBb0MsRUFBaUIsRUFBRTtRQUN0RSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQzlCLE1BQU0sYUFBYSxHQUFHLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsQ0FDOUQsV0FBVyxDQUNaLENBQUM7UUFDRixJQUFJLGFBQWEsRUFBRTtZQUNqQixPQUFPLENBQUMsS0FBSyxDQUNYLFlBQVksV0FBVyxvQkFBb0IsR0FBRyxHQUFHLHVCQUF1QixFQUFFLENBQzNFLENBQUM7WUFDRixPQUFPO1NBQ1I7UUFDRCxNQUFNLFVBQVUsR0FBRyxNQUFNLGVBQWUsQ0FBQyxPQUFPLENBQUM7WUFDL0MsT0FBTyxFQUFFLDJDQUEyQztTQUNyRCxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1lBRXZDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1lBQ3RELE1BQU0sZUFBZSxDQUFDLEtBQUssQ0FBQztnQkFDMUIsT0FBTyxFQUFFLDJCQUEyQjthQUNyQyxDQUFDLENBQUM7U0FDSjtRQUVELE1BQU0sV0FBVyxHQUFHLE1BQU0sZUFBZSxDQUFDLFdBQVcsQ0FDbkQsc0JBQXNCLENBQ3ZCLENBQUM7UUFDRixNQUFNLGVBQWUsR0FBRyxNQUFNLGVBQWUsQ0FBQyxXQUFXLENBQ3ZELDBCQUEwQixDQUMzQixDQUFDO1FBRUYsTUFBTSxNQUFNLEdBQUcsTUFBTSxlQUFlLENBQUMsS0FBSyxDQUFDO1lBQ3pDLE9BQU8sRUFBRSx5Q0FBeUMsV0FBVywyQ0FBMkM7U0FDekcsQ0FBQyxDQUFDO1FBRUgsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMsc0JBQXNCLENBQUM7WUFDbEQsT0FBTyxFQUFFLFdBQVc7WUFDcEIsTUFBTTtZQUNOLFdBQVc7WUFDWCxlQUFlO1NBQ2hCLENBQUMsQ0FBQztRQUVILE9BQU8sQ0FBQyxLQUFLLENBQUMsbUJBQW1CLFdBQVcsZ0JBQWdCLENBQUMsQ0FBQztJQUNoRSxDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNILE9BQU8sR0FBRyxDQUFDLEtBQVcsRUFBd0MsRUFBRTtRQUM5RCxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO1lBQzFCLFFBQVEsRUFBRSxxQkFBcUI7WUFDL0IsSUFBSSxFQUFFLFFBQVE7WUFDZCxLQUFLLEVBQUUsS0FBSztZQUNaLE9BQU8sRUFBRSxlQUFlO1NBQ3pCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXJndiwgQ29tbWFuZE1vZHVsZSB9IGZyb20gJ3lhcmdzJztcbmltcG9ydCB7IEFtcGxpZnlQcm9tcHRlciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9jbGktY29yZSc7XG5pbXBvcnQgeyBERUZBVUxUX1BST0ZJTEUgfSBmcm9tICdAc21pdGh5L3NoYXJlZC1pbmktZmlsZS1sb2FkZXInO1xuaW1wb3J0IHsgRU9MIH0gZnJvbSAnb3MnO1xuaW1wb3J0IHsgT3BlbiB9IGZyb20gJy4uL29wZW4vb3Blbi5qcyc7XG5pbXBvcnQgeyBBcmd1bWVudHNLZWJhYkNhc2UgfSBmcm9tICcuLi8uLi9rZWJhYl9jYXNlLmpzJztcbmltcG9ydCB7IFByb2ZpbGVDb250cm9sbGVyIH0gZnJvbSAnLi9wcm9maWxlX2NvbnRyb2xsZXIuanMnO1xuaW1wb3J0IHsgcHJpbnRlciB9IGZyb20gJy4uLy4uL3ByaW50ZXIuanMnO1xuXG5jb25zdCBjb25maWd1cmVBY2NvdW50VXJsID1cbiAgJ2h0dHBzOi8vZG9jcy5hbXBsaWZ5LmF3cy9nZW4yL3N0YXJ0L2FjY291bnQtc2V0dXAvJztcblxuY29uc3QgcHJvZmlsZVNldHVwSW5zdHJ1Y3Rpb24gPSBgRm9sbG93IHRoZSBpbnN0cnVjdGlvbnMgYXQgJHtjb25maWd1cmVBY2NvdW50VXJsfSR7RU9MfXRvIGNvbmZpZ3VyZSBBbXBsaWZ5IElBTSB1c2VyIGFuZCBjcmVkZW50aWFscy4ke0VPTH1gO1xuXG4vKipcbiAqIENvbW1hbmQgdG8gY29uZmlndXJlIEFXUyBBbXBsaWZ5IHByb2ZpbGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBDb25maWd1cmVQcm9maWxlQ29tbWFuZFxuICBpbXBsZW1lbnRzIENvbW1hbmRNb2R1bGU8b2JqZWN0LCBDb25maWd1cmVQcm9maWxlQ29tbWFuZE9wdGlvbnM+XG57XG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgY29tbWFuZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgZGVzY3JpYmU6IHN0cmluZztcblxuICAvKipcbiAgICogQ29uZmlndXJlIHByb2ZpbGUgY29tbWFuZC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgcHJvZmlsZUNvbnRyb2xsZXI6IFByb2ZpbGVDb250cm9sbGVyKSB7XG4gICAgdGhpcy5jb21tYW5kID0gJ3Byb2ZpbGUnO1xuICAgIHRoaXMuZGVzY3JpYmUgPSAnQ29uZmlndXJlIGFuIEFXUyBBbXBsaWZ5IHByb2ZpbGUnO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBoYW5kbGVyID0gYXN5bmMgKGFyZ3M6IENvbmZpZ3VyZVByb2ZpbGVDb21tYW5kT3B0aW9ucyk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGNvbnN0IHByb2ZpbGVOYW1lID0gYXJncy5uYW1lO1xuICAgIGNvbnN0IHByb2ZpbGVFeGlzdHMgPSBhd2FpdCB0aGlzLnByb2ZpbGVDb250cm9sbGVyLnByb2ZpbGVFeGlzdHMoXG4gICAgICBwcm9maWxlTmFtZVxuICAgICk7XG4gICAgaWYgKHByb2ZpbGVFeGlzdHMpIHtcbiAgICAgIHByaW50ZXIucHJpbnQoXG4gICAgICAgIGBQcm9maWxlICcke3Byb2ZpbGVOYW1lfScgYWxyZWFkeSBleGlzdHMhJHtFT0x9JHtwcm9maWxlU2V0dXBJbnN0cnVjdGlvbn1gXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBoYXNJQU1Vc2VyID0gYXdhaXQgQW1wbGlmeVByb21wdGVyLnllc09yTm8oe1xuICAgICAgbWVzc2FnZTogJ0RvIHlvdSBhbHJlYWR5IGhhdmUgSUFNIFVzZXIgY3JlZGVudGlhbHM/JyxcbiAgICB9KTtcblxuICAgIGlmICghaGFzSUFNVXNlcikge1xuICAgICAgcHJpbnRlci5wcmludChwcm9maWxlU2V0dXBJbnN0cnVjdGlvbik7XG5cbiAgICAgIGF3YWl0IE9wZW4ub3Blbihjb25maWd1cmVBY2NvdW50VXJsLCB7IHdhaXQ6IGZhbHNlIH0pO1xuICAgICAgYXdhaXQgQW1wbGlmeVByb21wdGVyLmlucHV0KHtcbiAgICAgICAgbWVzc2FnZTogYEhpdCBbZW50ZXJdIHdoZW4gY29tcGxldGVgLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgYWNjZXNzS2V5SWQgPSBhd2FpdCBBbXBsaWZ5UHJvbXB0ZXIuc2VjcmV0VmFsdWUoXG4gICAgICAnRW50ZXIgQWNjZXNzIEtleSBJRDonXG4gICAgKTtcbiAgICBjb25zdCBzZWNyZXRBY2Nlc3NLZXkgPSBhd2FpdCBBbXBsaWZ5UHJvbXB0ZXIuc2VjcmV0VmFsdWUoXG4gICAgICAnRW50ZXIgU2VjcmV0IEFjY2VzcyBLZXk6J1xuICAgICk7XG5cbiAgICBjb25zdCByZWdpb24gPSBhd2FpdCBBbXBsaWZ5UHJvbXB0ZXIuaW5wdXQoe1xuICAgICAgbWVzc2FnZTogYEVudGVyIHRoZSBBV1MgcmVnaW9uIHRvIHVzZSB3aXRoIHRoZSAnJHtwcm9maWxlTmFtZX0nIHByb2ZpbGUgKGVnIHVzLWVhc3QtMSwgdXMtd2VzdC0yLCBldGMpOmAsXG4gICAgfSk7XG5cbiAgICBhd2FpdCB0aGlzLnByb2ZpbGVDb250cm9sbGVyLmNyZWF0ZU9yQXBwZW5kQVdTRmlsZXMoe1xuICAgICAgcHJvZmlsZTogcHJvZmlsZU5hbWUsXG4gICAgICByZWdpb24sXG4gICAgICBhY2Nlc3NLZXlJZCxcbiAgICAgIHNlY3JldEFjY2Vzc0tleSxcbiAgICB9KTtcblxuICAgIHByaW50ZXIucHJpbnQoYENyZWF0ZWQgcHJvZmlsZSAke3Byb2ZpbGVOYW1lfSBzdWNjZXNzZnVsbHkhYCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBidWlsZGVyID0gKHlhcmdzOiBBcmd2KTogQXJndjxDb25maWd1cmVQcm9maWxlQ29tbWFuZE9wdGlvbnM+ID0+IHtcbiAgICByZXR1cm4geWFyZ3Mub3B0aW9uKCduYW1lJywge1xuICAgICAgZGVzY3JpYmU6ICdBbiBBV1MgcHJvZmlsZSBuYW1lJyxcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgYXJyYXk6IGZhbHNlLFxuICAgICAgZGVmYXVsdDogREVGQVVMVF9QUk9GSUxFLFxuICAgIH0pO1xuICB9O1xufVxuXG5leHBvcnQgdHlwZSBDb25maWd1cmVQcm9maWxlQ29tbWFuZE9wdGlvbnMgPVxuICBBcmd1bWVudHNLZWJhYkNhc2U8Q29uZmlndXJlUHJvZmlsZUNvbW1hbmRPcHRpb25zQ2FtZWxDYXNlPjtcblxudHlwZSBDb25maWd1cmVQcm9maWxlQ29tbWFuZE9wdGlvbnNDYW1lbENhc2UgPSB7XG4gIG5hbWU6IHN0cmluZztcbn07XG4iXX0=