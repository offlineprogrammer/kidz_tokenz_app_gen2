import { USAGE_DATA_TRACKING_ENABLED, } from '@aws-amplify/platform-core';
import { printer } from '../../../printer.js';
/**
 * Command to configure AWS Amplify profile.
 */
export class ConfigureTelemetryCommand {
    configController;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Configure profile command.
     */
    constructor(configController) {
        this.configController = configController;
        this.command = 'telemetry';
        this.describe = 'Configure anonymous usage data collection';
    }
    /**
     * @inheritDoc
     */
    handler = () => {
        // CommandModule requires handler implementation. But this is never called if top level command
        // is configured to require subcommand.
        // Help is printed by default in that case before ever attempting to call handler.
        throw new Error('Top level generate handler should never be called');
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return yargs
            .command('enable', 'Enable anonymous data collection', {}, async () => {
            await this.configController.set(USAGE_DATA_TRACKING_ENABLED, true);
            printer.log('You have enabled telemetry data collection');
        })
            .command('disable', 'Disable anonymous data collection', {}, async () => {
            await this.configController.set(USAGE_DATA_TRACKING_ENABLED, false);
            printer.log('You have disabled telemetry data collection');
        })
            .demandCommand()
            .strictCommands()
            .recommendCommands();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJlX3RlbGVtZXRyeV9jb21tYW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbW1hbmRzL2NvbmZpZ3VyZS90ZWxlbWV0cnkvY29uZmlndXJlX3RlbGVtZXRyeV9jb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCwyQkFBMkIsR0FDNUIsTUFBTSw0QkFBNEIsQ0FBQztBQUVwQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDOUM7O0dBRUc7QUFDSCxNQUFNLE9BQU8seUJBQXlCO0lBY1A7SUFiN0I7O09BRUc7SUFDTSxPQUFPLENBQVM7SUFFekI7O09BRUc7SUFDTSxRQUFRLENBQVM7SUFFMUI7O09BRUc7SUFDSCxZQUE2QixnQkFBeUM7UUFBekMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUF5QjtRQUNwRSxJQUFJLENBQUMsT0FBTyxHQUFHLFdBQVcsQ0FBQztRQUMzQixJQUFJLENBQUMsUUFBUSxHQUFHLDJDQUEyQyxDQUFDO0lBQzlELENBQUM7SUFFRDs7T0FFRztJQUNILE9BQU8sR0FBRyxHQUFHLEVBQUU7UUFDYiwrRkFBK0Y7UUFDL0YsdUNBQXVDO1FBQ3ZDLGtGQUFrRjtRQUNsRixNQUFNLElBQUksS0FBSyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7SUFDdkUsQ0FBQyxDQUFDO0lBRUY7O09BRUc7SUFDSCxPQUFPLEdBQUcsQ0FBQyxLQUFXLEVBQUUsRUFBRTtRQUN4QixPQUFPLEtBQUs7YUFDVCxPQUFPLENBQUMsUUFBUSxFQUFFLGtDQUFrQyxFQUFFLEVBQUUsRUFBRSxLQUFLLElBQUksRUFBRTtZQUNwRSxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsMkJBQTJCLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDbkUsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO1FBQzVELENBQUMsQ0FBQzthQUNELE9BQU8sQ0FBQyxTQUFTLEVBQUUsbUNBQW1DLEVBQUUsRUFBRSxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3RFLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQywyQkFBMkIsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUNwRSxPQUFPLENBQUMsR0FBRyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7UUFDN0QsQ0FBQyxDQUFDO2FBQ0QsYUFBYSxFQUFFO2FBQ2YsY0FBYyxFQUFFO2FBQ2hCLGlCQUFpQixFQUFFLENBQUM7SUFDekIsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb25maWd1cmF0aW9uQ29udHJvbGxlcixcbiAgVVNBR0VfREFUQV9UUkFDS0lOR19FTkFCTEVELFxufSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5pbXBvcnQgeyBBcmd2LCBDb21tYW5kTW9kdWxlIH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHsgcHJpbnRlciB9IGZyb20gJy4uLy4uLy4uL3ByaW50ZXIuanMnO1xuLyoqXG4gKiBDb21tYW5kIHRvIGNvbmZpZ3VyZSBBV1MgQW1wbGlmeSBwcm9maWxlLlxuICovXG5leHBvcnQgY2xhc3MgQ29uZmlndXJlVGVsZW1ldHJ5Q29tbWFuZCBpbXBsZW1lbnRzIENvbW1hbmRNb2R1bGU8b2JqZWN0PiB7XG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgY29tbWFuZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgZGVzY3JpYmU6IHN0cmluZztcblxuICAvKipcbiAgICogQ29uZmlndXJlIHByb2ZpbGUgY29tbWFuZC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgY29uZmlnQ29udHJvbGxlcjogQ29uZmlndXJhdGlvbkNvbnRyb2xsZXIpIHtcbiAgICB0aGlzLmNvbW1hbmQgPSAndGVsZW1ldHJ5JztcbiAgICB0aGlzLmRlc2NyaWJlID0gJ0NvbmZpZ3VyZSBhbm9ueW1vdXMgdXNhZ2UgZGF0YSBjb2xsZWN0aW9uJztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgaGFuZGxlciA9ICgpID0+IHtcbiAgICAvLyBDb21tYW5kTW9kdWxlIHJlcXVpcmVzIGhhbmRsZXIgaW1wbGVtZW50YXRpb24uIEJ1dCB0aGlzIGlzIG5ldmVyIGNhbGxlZCBpZiB0b3AgbGV2ZWwgY29tbWFuZFxuICAgIC8vIGlzIGNvbmZpZ3VyZWQgdG8gcmVxdWlyZSBzdWJjb21tYW5kLlxuICAgIC8vIEhlbHAgaXMgcHJpbnRlZCBieSBkZWZhdWx0IGluIHRoYXQgY2FzZSBiZWZvcmUgZXZlciBhdHRlbXB0aW5nIHRvIGNhbGwgaGFuZGxlci5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RvcCBsZXZlbCBnZW5lcmF0ZSBoYW5kbGVyIHNob3VsZCBuZXZlciBiZSBjYWxsZWQnKTtcbiAgfTtcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIGJ1aWxkZXIgPSAoeWFyZ3M6IEFyZ3YpID0+IHtcbiAgICByZXR1cm4geWFyZ3NcbiAgICAgIC5jb21tYW5kKCdlbmFibGUnLCAnRW5hYmxlIGFub255bW91cyBkYXRhIGNvbGxlY3Rpb24nLCB7fSwgYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCB0aGlzLmNvbmZpZ0NvbnRyb2xsZXIuc2V0KFVTQUdFX0RBVEFfVFJBQ0tJTkdfRU5BQkxFRCwgdHJ1ZSk7XG4gICAgICAgIHByaW50ZXIubG9nKCdZb3UgaGF2ZSBlbmFibGVkIHRlbGVtZXRyeSBkYXRhIGNvbGxlY3Rpb24nKTtcbiAgICAgIH0pXG4gICAgICAuY29tbWFuZCgnZGlzYWJsZScsICdEaXNhYmxlIGFub255bW91cyBkYXRhIGNvbGxlY3Rpb24nLCB7fSwgYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCB0aGlzLmNvbmZpZ0NvbnRyb2xsZXIuc2V0KFVTQUdFX0RBVEFfVFJBQ0tJTkdfRU5BQkxFRCwgZmFsc2UpO1xuICAgICAgICBwcmludGVyLmxvZygnWW91IGhhdmUgZGlzYWJsZWQgdGVsZW1ldHJ5IGRhdGEgY29sbGVjdGlvbicpO1xuICAgICAgfSlcbiAgICAgIC5kZW1hbmRDb21tYW5kKClcbiAgICAgIC5zdHJpY3RDb21tYW5kcygpXG4gICAgICAucmVjb21tZW5kQ29tbWFuZHMoKTtcbiAgfTtcbn1cbiJdfQ==