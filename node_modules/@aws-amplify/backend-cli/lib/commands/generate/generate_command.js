/**
 * An entry point for generate command.
 */
export class GenerateCommand {
    generateConfigCommand;
    generateFormsCommand;
    generateGraphqlClientCodeCommand;
    commandMiddleware;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Creates top level entry point for generate command.
     */
    constructor(generateConfigCommand, generateFormsCommand, generateGraphqlClientCodeCommand, commandMiddleware) {
        this.generateConfigCommand = generateConfigCommand;
        this.generateFormsCommand = generateFormsCommand;
        this.generateGraphqlClientCodeCommand = generateGraphqlClientCodeCommand;
        this.commandMiddleware = commandMiddleware;
        this.command = 'generate';
        this.describe = 'Generates post deployment artifacts';
    }
    /**
     * @inheritDoc
     */
    handler = () => {
        // CommandModule requires handler implementation. But this is never called if top level command
        // is configured to require subcommand.
        // Help is printed by default in that case before ever attempting to call handler.
        throw new Error('Top level generate handler should never be called');
    };
    builder = (yargs) => {
        return (yargs
            .version(false)
            // Cast to erase options types used in internal sub command implementation. Otherwise, compiler fails here.
            .command(this.generateConfigCommand)
            .command(this.generateFormsCommand)
            .command(this.generateGraphqlClientCodeCommand)
            .demandCommand()
            .strictCommands()
            .recommendCommands()
            .option('profile', {
            describe: 'An AWS profile name.',
            type: 'string',
            array: false,
        })
            .middleware([this.commandMiddleware.ensureAwsCredentialAndRegion]));
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVfY29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9nZW5lcmF0ZS9nZW5lcmF0ZV9jb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU1BOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGVBQWU7SUFlUDtJQUNBO0lBQ0E7SUFDQTtJQWpCbkI7O09BRUc7SUFDTSxPQUFPLENBQVM7SUFFekI7O09BRUc7SUFDTSxRQUFRLENBQVM7SUFFMUI7O09BRUc7SUFDSCxZQUNtQixxQkFBNEMsRUFDNUMsb0JBQTBDLEVBQzFDLGdDQUFrRSxFQUNsRSxpQkFBb0M7UUFIcEMsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1QjtRQUM1Qyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO1FBQzFDLHFDQUFnQyxHQUFoQyxnQ0FBZ0MsQ0FBa0M7UUFDbEUsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUVyRCxJQUFJLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQztRQUMxQixJQUFJLENBQUMsUUFBUSxHQUFHLHFDQUFxQyxDQUFDO0lBQ3hELENBQUM7SUFFRDs7T0FFRztJQUNILE9BQU8sR0FBRyxHQUF5QixFQUFFO1FBQ25DLCtGQUErRjtRQUMvRix1Q0FBdUM7UUFDdkMsa0ZBQWtGO1FBQ2xGLE1BQU0sSUFBSSxLQUFLLENBQUMsbURBQW1ELENBQUMsQ0FBQztJQUN2RSxDQUFDLENBQUM7SUFFRixPQUFPLEdBQUcsQ0FBQyxLQUFXLEVBQVEsRUFBRTtRQUM5QixPQUFPLENBQ0wsS0FBSzthQUNGLE9BQU8sQ0FBQyxLQUFLLENBQUM7WUFDZiwyR0FBMkc7YUFDMUcsT0FBTyxDQUFDLElBQUksQ0FBQyxxQkFBaUQsQ0FBQzthQUMvRCxPQUFPLENBQUMsSUFBSSxDQUFDLG9CQUFnRCxDQUFDO2FBQzlELE9BQU8sQ0FDTixJQUFJLENBQUMsZ0NBQTRELENBQ2xFO2FBQ0EsYUFBYSxFQUFFO2FBQ2YsY0FBYyxFQUFFO2FBQ2hCLGlCQUFpQixFQUFFO2FBQ25CLE1BQU0sQ0FBQyxTQUFTLEVBQUU7WUFDakIsUUFBUSxFQUFFLHNCQUFzQjtZQUNoQyxJQUFJLEVBQUUsUUFBUTtZQUNkLEtBQUssRUFBRSxLQUFLO1NBQ2IsQ0FBQzthQUNELFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLENBQ3JFLENBQUM7SUFDSixDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFyZ3YsIENvbW1hbmRNb2R1bGUgfSBmcm9tICd5YXJncyc7XG5pbXBvcnQgeyBHZW5lcmF0ZUNvbmZpZ0NvbW1hbmQgfSBmcm9tICcuL2NvbmZpZy9nZW5lcmF0ZV9jb25maWdfY29tbWFuZC5qcyc7XG5pbXBvcnQgeyBHZW5lcmF0ZUZvcm1zQ29tbWFuZCB9IGZyb20gJy4vZm9ybXMvZ2VuZXJhdGVfZm9ybXNfY29tbWFuZC5qcyc7XG5pbXBvcnQgeyBHZW5lcmF0ZUdyYXBocWxDbGllbnRDb2RlQ29tbWFuZCB9IGZyb20gJy4vZ3JhcGhxbC1jbGllbnQtY29kZS9nZW5lcmF0ZV9ncmFwaHFsX2NsaWVudF9jb2RlX2NvbW1hbmQuanMnO1xuaW1wb3J0IHsgQ29tbWFuZE1pZGRsZXdhcmUgfSBmcm9tICcuLi8uLi9jb21tYW5kX21pZGRsZXdhcmUuanMnO1xuXG4vKipcbiAqIEFuIGVudHJ5IHBvaW50IGZvciBnZW5lcmF0ZSBjb21tYW5kLlxuICovXG5leHBvcnQgY2xhc3MgR2VuZXJhdGVDb21tYW5kIGltcGxlbWVudHMgQ29tbWFuZE1vZHVsZSB7XG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgY29tbWFuZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgZGVzY3JpYmU6IHN0cmluZztcblxuICAvKipcbiAgICogQ3JlYXRlcyB0b3AgbGV2ZWwgZW50cnkgcG9pbnQgZm9yIGdlbmVyYXRlIGNvbW1hbmQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IGdlbmVyYXRlQ29uZmlnQ29tbWFuZDogR2VuZXJhdGVDb25maWdDb21tYW5kLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZ2VuZXJhdGVGb3Jtc0NvbW1hbmQ6IEdlbmVyYXRlRm9ybXNDb21tYW5kLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZ2VuZXJhdGVHcmFwaHFsQ2xpZW50Q29kZUNvbW1hbmQ6IEdlbmVyYXRlR3JhcGhxbENsaWVudENvZGVDb21tYW5kLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgY29tbWFuZE1pZGRsZXdhcmU6IENvbW1hbmRNaWRkbGV3YXJlXG4gICkge1xuICAgIHRoaXMuY29tbWFuZCA9ICdnZW5lcmF0ZSc7XG4gICAgdGhpcy5kZXNjcmliZSA9ICdHZW5lcmF0ZXMgcG9zdCBkZXBsb3ltZW50IGFydGlmYWN0cyc7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIGhhbmRsZXIgPSAoKTogdm9pZCB8IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIC8vIENvbW1hbmRNb2R1bGUgcmVxdWlyZXMgaGFuZGxlciBpbXBsZW1lbnRhdGlvbi4gQnV0IHRoaXMgaXMgbmV2ZXIgY2FsbGVkIGlmIHRvcCBsZXZlbCBjb21tYW5kXG4gICAgLy8gaXMgY29uZmlndXJlZCB0byByZXF1aXJlIHN1YmNvbW1hbmQuXG4gICAgLy8gSGVscCBpcyBwcmludGVkIGJ5IGRlZmF1bHQgaW4gdGhhdCBjYXNlIGJlZm9yZSBldmVyIGF0dGVtcHRpbmcgdG8gY2FsbCBoYW5kbGVyLlxuICAgIHRocm93IG5ldyBFcnJvcignVG9wIGxldmVsIGdlbmVyYXRlIGhhbmRsZXIgc2hvdWxkIG5ldmVyIGJlIGNhbGxlZCcpO1xuICB9O1xuXG4gIGJ1aWxkZXIgPSAoeWFyZ3M6IEFyZ3YpOiBBcmd2ID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgeWFyZ3NcbiAgICAgICAgLnZlcnNpb24oZmFsc2UpXG4gICAgICAgIC8vIENhc3QgdG8gZXJhc2Ugb3B0aW9ucyB0eXBlcyB1c2VkIGluIGludGVybmFsIHN1YiBjb21tYW5kIGltcGxlbWVudGF0aW9uLiBPdGhlcndpc2UsIGNvbXBpbGVyIGZhaWxzIGhlcmUuXG4gICAgICAgIC5jb21tYW5kKHRoaXMuZ2VuZXJhdGVDb25maWdDb21tYW5kIGFzIHVua25vd24gYXMgQ29tbWFuZE1vZHVsZSlcbiAgICAgICAgLmNvbW1hbmQodGhpcy5nZW5lcmF0ZUZvcm1zQ29tbWFuZCBhcyB1bmtub3duIGFzIENvbW1hbmRNb2R1bGUpXG4gICAgICAgIC5jb21tYW5kKFxuICAgICAgICAgIHRoaXMuZ2VuZXJhdGVHcmFwaHFsQ2xpZW50Q29kZUNvbW1hbmQgYXMgdW5rbm93biBhcyBDb21tYW5kTW9kdWxlXG4gICAgICAgIClcbiAgICAgICAgLmRlbWFuZENvbW1hbmQoKVxuICAgICAgICAuc3RyaWN0Q29tbWFuZHMoKVxuICAgICAgICAucmVjb21tZW5kQ29tbWFuZHMoKVxuICAgICAgICAub3B0aW9uKCdwcm9maWxlJywge1xuICAgICAgICAgIGRlc2NyaWJlOiAnQW4gQVdTIHByb2ZpbGUgbmFtZS4nLFxuICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgIGFycmF5OiBmYWxzZSxcbiAgICAgICAgfSlcbiAgICAgICAgLm1pZGRsZXdhcmUoW3RoaXMuY29tbWFuZE1pZGRsZXdhcmUuZW5zdXJlQXdzQ3JlZGVudGlhbEFuZFJlZ2lvbl0pXG4gICAgKTtcbiAgfTtcbn1cbiJdfQ==