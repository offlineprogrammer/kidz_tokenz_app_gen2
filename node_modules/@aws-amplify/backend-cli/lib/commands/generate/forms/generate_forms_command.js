import path from 'path';
import { graphqlOutputKey } from '@aws-amplify/backend-output-schemas';
import { DEFAULT_UI_PATH } from '../../../form-generation/default_form_generation_output_paths.js';
/**
 * Command that generates client config.
 */
export class GenerateFormsCommand {
    backendIdentifierResolver;
    backendOutputClientBuilder;
    formGenerationHandler;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Creates client config generation command.
     */
    constructor(backendIdentifierResolver, backendOutputClientBuilder, formGenerationHandler) {
        this.backendIdentifierResolver = backendIdentifierResolver;
        this.backendOutputClientBuilder = backendOutputClientBuilder;
        this.formGenerationHandler = formGenerationHandler;
        this.command = 'forms';
        this.describe = 'Generates UI forms';
    }
    getBackendIdentifier = async (args) => {
        return await this.backendIdentifierResolver.resolve(args);
    };
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        const backendIdentifier = await this.backendIdentifierResolver.resolve(args);
        if (!backendIdentifier) {
            throw new Error('Could not resolve the backend identifier');
        }
        const backendOutputClient = this.backendOutputClientBuilder();
        const output = await backendOutputClient.getOutput(backendIdentifier);
        if (!(graphqlOutputKey in output) || !output[graphqlOutputKey]) {
            throw new Error('No GraphQL API configured for this backend.');
        }
        const apiUrl = output[graphqlOutputKey].payload.amplifyApiModelSchemaS3Uri;
        if (!args['out-dir']) {
            throw new Error('out-dir must be defined');
        }
        const outDir = args['out-dir'];
        await this.formGenerationHandler.generate({
            modelsOutDir: path.join(outDir, 'graphql'),
            backendIdentifier,
            uiOutDir: outDir,
            apiUrl,
            modelsFilter: args.models,
        });
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return yargs
            .option('stack', {
            conflicts: ['app-id', 'branch'],
            describe: 'A stack name that contains an Amplify backend',
            type: 'string',
            array: false,
            group: 'Stack identifier',
        })
            .option('app-id', {
            conflicts: ['stack'],
            describe: 'The Amplify App ID of the project',
            type: 'string',
            array: false,
            implies: 'branch',
            group: 'Project identifier',
        })
            .option('branch', {
            conflicts: ['stack'],
            describe: 'A git branch of the Amplify project',
            type: 'string',
            array: false,
            group: 'Project identifier',
            implies: 'appId',
        })
            .option('out-dir', {
            describe: 'A path to directory where generated forms are written.',
            default: DEFAULT_UI_PATH,
            type: 'string',
            array: false,
            group: 'Form Generation',
        })
            .option('models', {
            describe: 'Model name to generate',
            type: 'string',
            array: true,
            group: 'Form Generation',
        });
    };
}
//# sourceMappingURL=data:application/json;base64,