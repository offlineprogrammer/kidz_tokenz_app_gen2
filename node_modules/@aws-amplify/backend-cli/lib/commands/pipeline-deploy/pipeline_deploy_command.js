import _isCI from 'is-ci';
/**
 * An entry point for deploy command.
 */
export class PipelineDeployCommand {
    clientConfigGenerator;
    backendDeployer;
    isCiEnvironment;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Creates top level entry point for deploy command.
     */
    constructor(clientConfigGenerator, backendDeployer, isCiEnvironment = _isCI) {
        this.clientConfigGenerator = clientConfigGenerator;
        this.backendDeployer = backendDeployer;
        this.isCiEnvironment = isCiEnvironment;
        this.command = 'pipeline-deploy';
        // use false for a hidden command
        this.describe = false;
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        if (!this.isCiEnvironment) {
            throw new Error('It looks like this command is being run outside of a CI/CD workflow. To deploy locally use `amplify sandbox` instead.');
        }
        const backendId = {
            namespace: args['app-id'],
            name: args.branch,
            type: 'branch',
        };
        await this.backendDeployer.deploy(backendId, {
            validateAppSources: true,
        });
        await this.clientConfigGenerator.generateClientConfigToFile(backendId, args['config-out-dir']);
    };
    builder = (yargs) => {
        return yargs
            .version(false)
            .option('branch', {
            describe: 'Name of the git branch being deployed',
            demandOption: true,
            type: 'string',
            array: false,
        })
            .option('app-id', {
            describe: 'The app id of the target Amplify app',
            demandOption: true,
            type: 'string',
            array: false,
        })
            .option('config-out-dir', {
            describe: 'A path to directory where config is written. If not provided defaults to current process working directory.',
            type: 'string',
            array: false,
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZWxpbmVfZGVwbG95X2NvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvcGlwZWxpbmUtZGVwbG95L3BpcGVsaW5lX2RlcGxveV9jb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQWdCMUI7O0dBRUc7QUFDSCxNQUFNLE9BQU8scUJBQXFCO0lBaUJiO0lBQ0E7SUFDQTtJQWhCbkI7O09BRUc7SUFDTSxPQUFPLENBQVM7SUFFekI7O09BRUc7SUFDTSxRQUFRLENBQVE7SUFFekI7O09BRUc7SUFDSCxZQUNtQixxQkFBbUQsRUFDbkQsZUFBZ0MsRUFDaEMsa0JBQWdDLEtBQUs7UUFGckMsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUE4QjtRQUNuRCxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDaEMsb0JBQWUsR0FBZixlQUFlLENBQXNCO1FBRXRELElBQUksQ0FBQyxPQUFPLEdBQUcsaUJBQWlCLENBQUM7UUFDakMsaUNBQWlDO1FBQ2pDLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLENBQUM7SUFFRDs7T0FFRztJQUNILE9BQU8sR0FBRyxLQUFLLEVBQUUsSUFBa0MsRUFBaUIsRUFBRTtRQUNwRSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN6QixNQUFNLElBQUksS0FBSyxDQUNiLHVIQUF1SCxDQUN4SCxDQUFDO1NBQ0g7UUFFRCxNQUFNLFNBQVMsR0FBc0I7WUFDbkMsU0FBUyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUM7WUFDekIsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ2pCLElBQUksRUFBRSxRQUFRO1NBQ2YsQ0FBQztRQUNGLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFO1lBQzNDLGtCQUFrQixFQUFFLElBQUk7U0FDekIsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxJQUFJLENBQUMscUJBQXFCLENBQUMsMEJBQTBCLENBQ3pELFNBQVMsRUFDVCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FDdkIsQ0FBQztJQUNKLENBQUMsQ0FBQztJQUVGLE9BQU8sR0FBRyxDQUFDLEtBQVcsRUFBc0MsRUFBRTtRQUM1RCxPQUFPLEtBQUs7YUFDVCxPQUFPLENBQUMsS0FBSyxDQUFDO2FBQ2QsTUFBTSxDQUFDLFFBQVEsRUFBRTtZQUNoQixRQUFRLEVBQUUsdUNBQXVDO1lBQ2pELFlBQVksRUFBRSxJQUFJO1lBQ2xCLElBQUksRUFBRSxRQUFRO1lBQ2QsS0FBSyxFQUFFLEtBQUs7U0FDYixDQUFDO2FBQ0QsTUFBTSxDQUFDLFFBQVEsRUFBRTtZQUNoQixRQUFRLEVBQUUsc0NBQXNDO1lBQ2hELFlBQVksRUFBRSxJQUFJO1lBQ2xCLElBQUksRUFBRSxRQUFRO1lBQ2QsS0FBSyxFQUFFLEtBQUs7U0FDYixDQUFDO2FBQ0QsTUFBTSxDQUFDLGdCQUFnQixFQUFFO1lBQ3hCLFFBQVEsRUFDTiw2R0FBNkc7WUFDL0csSUFBSSxFQUFFLFFBQVE7WUFDZCxLQUFLLEVBQUUsS0FBSztTQUNiLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9pc0NJIGZyb20gJ2lzLWNpJztcbmltcG9ydCB7IEFyZ3YsIENvbW1hbmRNb2R1bGUgfSBmcm9tICd5YXJncyc7XG5pbXBvcnQgeyBCYWNrZW5kRGVwbG95ZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvYmFja2VuZC1kZXBsb3llcic7XG5pbXBvcnQgeyBDbGllbnRDb25maWdHZW5lcmF0b3JBZGFwdGVyIH0gZnJvbSAnLi4vLi4vY2xpZW50LWNvbmZpZy9jbGllbnRfY29uZmlnX2dlbmVyYXRvcl9hZGFwdGVyLmpzJztcbmltcG9ydCB7IEFyZ3VtZW50c0tlYmFiQ2FzZSB9IGZyb20gJy4uLy4uL2tlYmFiX2Nhc2UuanMnO1xuaW1wb3J0IHsgQmFja2VuZElkZW50aWZpZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcblxuZXhwb3J0IHR5cGUgUGlwZWxpbmVEZXBsb3lDb21tYW5kT3B0aW9ucyA9XG4gIEFyZ3VtZW50c0tlYmFiQ2FzZTxQaXBlbGluZURlcGxveUNvbW1hbmRPcHRpb25zQ2FtZWxDYXNlPjtcblxudHlwZSBQaXBlbGluZURlcGxveUNvbW1hbmRPcHRpb25zQ2FtZWxDYXNlID0ge1xuICBicmFuY2g6IHN0cmluZztcbiAgYXBwSWQ6IHN0cmluZztcbiAgY29uZmlnT3V0RGlyPzogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBBbiBlbnRyeSBwb2ludCBmb3IgZGVwbG95IGNvbW1hbmQuXG4gKi9cbmV4cG9ydCBjbGFzcyBQaXBlbGluZURlcGxveUNvbW1hbmRcbiAgaW1wbGVtZW50cyBDb21tYW5kTW9kdWxlPG9iamVjdCwgUGlwZWxpbmVEZXBsb3lDb21tYW5kT3B0aW9ucz5cbntcbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICByZWFkb25seSBjb21tYW5kOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICByZWFkb25seSBkZXNjcmliZTogZmFsc2U7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdG9wIGxldmVsIGVudHJ5IHBvaW50IGZvciBkZXBsb3kgY29tbWFuZC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgY2xpZW50Q29uZmlnR2VuZXJhdG9yOiBDbGllbnRDb25maWdHZW5lcmF0b3JBZGFwdGVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgYmFja2VuZERlcGxveWVyOiBCYWNrZW5kRGVwbG95ZXIsXG4gICAgcHJpdmF0ZSByZWFkb25seSBpc0NpRW52aXJvbm1lbnQ6IHR5cGVvZiBfaXNDSSA9IF9pc0NJXG4gICkge1xuICAgIHRoaXMuY29tbWFuZCA9ICdwaXBlbGluZS1kZXBsb3knO1xuICAgIC8vIHVzZSBmYWxzZSBmb3IgYSBoaWRkZW4gY29tbWFuZFxuICAgIHRoaXMuZGVzY3JpYmUgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgaGFuZGxlciA9IGFzeW5jIChhcmdzOiBQaXBlbGluZURlcGxveUNvbW1hbmRPcHRpb25zKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgaWYgKCF0aGlzLmlzQ2lFbnZpcm9ubWVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnSXQgbG9va3MgbGlrZSB0aGlzIGNvbW1hbmQgaXMgYmVpbmcgcnVuIG91dHNpZGUgb2YgYSBDSS9DRCB3b3JrZmxvdy4gVG8gZGVwbG95IGxvY2FsbHkgdXNlIGBhbXBsaWZ5IHNhbmRib3hgIGluc3RlYWQuJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBiYWNrZW5kSWQ6IEJhY2tlbmRJZGVudGlmaWVyID0ge1xuICAgICAgbmFtZXNwYWNlOiBhcmdzWydhcHAtaWQnXSxcbiAgICAgIG5hbWU6IGFyZ3MuYnJhbmNoLFxuICAgICAgdHlwZTogJ2JyYW5jaCcsXG4gICAgfTtcbiAgICBhd2FpdCB0aGlzLmJhY2tlbmREZXBsb3llci5kZXBsb3koYmFja2VuZElkLCB7XG4gICAgICB2YWxpZGF0ZUFwcFNvdXJjZXM6IHRydWUsXG4gICAgfSk7XG4gICAgYXdhaXQgdGhpcy5jbGllbnRDb25maWdHZW5lcmF0b3IuZ2VuZXJhdGVDbGllbnRDb25maWdUb0ZpbGUoXG4gICAgICBiYWNrZW5kSWQsXG4gICAgICBhcmdzWydjb25maWctb3V0LWRpciddXG4gICAgKTtcbiAgfTtcblxuICBidWlsZGVyID0gKHlhcmdzOiBBcmd2KTogQXJndjxQaXBlbGluZURlcGxveUNvbW1hbmRPcHRpb25zPiA9PiB7XG4gICAgcmV0dXJuIHlhcmdzXG4gICAgICAudmVyc2lvbihmYWxzZSlcbiAgICAgIC5vcHRpb24oJ2JyYW5jaCcsIHtcbiAgICAgICAgZGVzY3JpYmU6ICdOYW1lIG9mIHRoZSBnaXQgYnJhbmNoIGJlaW5nIGRlcGxveWVkJyxcbiAgICAgICAgZGVtYW5kT3B0aW9uOiB0cnVlLFxuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgYXJyYXk6IGZhbHNlLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oJ2FwcC1pZCcsIHtcbiAgICAgICAgZGVzY3JpYmU6ICdUaGUgYXBwIGlkIG9mIHRoZSB0YXJnZXQgQW1wbGlmeSBhcHAnLFxuICAgICAgICBkZW1hbmRPcHRpb246IHRydWUsXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICBhcnJheTogZmFsc2UsXG4gICAgICB9KVxuICAgICAgLm9wdGlvbignY29uZmlnLW91dC1kaXInLCB7XG4gICAgICAgIGRlc2NyaWJlOlxuICAgICAgICAgICdBIHBhdGggdG8gZGlyZWN0b3J5IHdoZXJlIGNvbmZpZyBpcyB3cml0dGVuLiBJZiBub3QgcHJvdmlkZWQgZGVmYXVsdHMgdG8gY3VycmVudCBwcm9jZXNzIHdvcmtpbmcgZGlyZWN0b3J5LicsXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICBhcnJheTogZmFsc2UsXG4gICAgICB9KTtcbiAgfTtcbn1cbiJdfQ==