import { fileURLToPath } from 'url';
import yargs from 'yargs';
import { PackageJsonReader } from '@aws-amplify/platform-core';
import { createGenerateCommand } from './commands/generate/generate_command_factory.js';
import { createSandboxCommand } from './commands/sandbox/sandbox_command_factory.js';
import { createPipelineDeployCommand } from './commands/pipeline-deploy/pipeline_deploy_command_factory.js';
import { createConfigureCommand } from './commands/configure/configure_command_factory.js';
import { generateCommandFailureHandler } from './error_handler.js';
import { createInfoCommand } from './commands/info/info_command_factory.js';
/**
 * Creates main parser.
 */
export const createMainParser = () => {
    const packageJson = new PackageJsonReader().read(fileURLToPath(new URL('../package.json', import.meta.url)));
    const parser = yargs()
        .version(packageJson.version ?? '')
        // This option is being used indirectly to configure the log level of the Printer instance.
        // refer: https://github.com/aws-amplify/amplify-backend/blob/main/packages/cli/src/printer.ts
        .options('debug', { type: 'boolean', default: false })
        .command(createGenerateCommand())
        .command(createSandboxCommand())
        .command(createPipelineDeployCommand())
        .command(createConfigureCommand())
        .command(createInfoCommand())
        .help()
        .demandCommand()
        .strictCommands()
        .recommendCommands();
    parser.fail(generateCommandFailureHandler(parser));
    return parser;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbl9wYXJzZXJfZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluX3BhcnNlcl9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxLQUFLLENBQUM7QUFDcEMsT0FBTyxLQUFlLE1BQU0sT0FBTyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGlEQUFpRCxDQUFDO0FBQ3hGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBQ3JGLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLCtEQUErRCxDQUFDO0FBQzVHLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLG1EQUFtRCxDQUFDO0FBQzNGLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBRTVFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBUyxFQUFFO0lBQ3pDLE1BQU0sV0FBVyxHQUFHLElBQUksaUJBQWlCLEVBQUUsQ0FBQyxJQUFJLENBQzlDLGFBQWEsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQzNELENBQUM7SUFDRixNQUFNLE1BQU0sR0FBRyxLQUFLLEVBQUU7U0FDbkIsT0FBTyxDQUFDLFdBQVcsQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDO1FBQ25DLDJGQUEyRjtRQUMzRiw4RkFBOEY7U0FDN0YsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDO1NBQ3JELE9BQU8sQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1NBQ2hDLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1NBQy9CLE9BQU8sQ0FBQywyQkFBMkIsRUFBRSxDQUFDO1NBQ3RDLE9BQU8sQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1NBQ2pDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1NBQzVCLElBQUksRUFBRTtTQUNOLGFBQWEsRUFBRTtTQUNmLGNBQWMsRUFBRTtTQUNoQixpQkFBaUIsRUFBRSxDQUFDO0lBQ3ZCLE1BQU0sQ0FBQyxJQUFJLENBQUMsNkJBQTZCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNuRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmaWxlVVJMVG9QYXRoIH0gZnJvbSAndXJsJztcbmltcG9ydCB5YXJncywgeyBBcmd2IH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHsgUGFja2FnZUpzb25SZWFkZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5pbXBvcnQgeyBjcmVhdGVHZW5lcmF0ZUNvbW1hbmQgfSBmcm9tICcuL2NvbW1hbmRzL2dlbmVyYXRlL2dlbmVyYXRlX2NvbW1hbmRfZmFjdG9yeS5qcyc7XG5pbXBvcnQgeyBjcmVhdGVTYW5kYm94Q29tbWFuZCB9IGZyb20gJy4vY29tbWFuZHMvc2FuZGJveC9zYW5kYm94X2NvbW1hbmRfZmFjdG9yeS5qcyc7XG5pbXBvcnQgeyBjcmVhdGVQaXBlbGluZURlcGxveUNvbW1hbmQgfSBmcm9tICcuL2NvbW1hbmRzL3BpcGVsaW5lLWRlcGxveS9waXBlbGluZV9kZXBsb3lfY29tbWFuZF9mYWN0b3J5LmpzJztcbmltcG9ydCB7IGNyZWF0ZUNvbmZpZ3VyZUNvbW1hbmQgfSBmcm9tICcuL2NvbW1hbmRzL2NvbmZpZ3VyZS9jb25maWd1cmVfY29tbWFuZF9mYWN0b3J5LmpzJztcbmltcG9ydCB7IGdlbmVyYXRlQ29tbWFuZEZhaWx1cmVIYW5kbGVyIH0gZnJvbSAnLi9lcnJvcl9oYW5kbGVyLmpzJztcbmltcG9ydCB7IGNyZWF0ZUluZm9Db21tYW5kIH0gZnJvbSAnLi9jb21tYW5kcy9pbmZvL2luZm9fY29tbWFuZF9mYWN0b3J5LmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIG1haW4gcGFyc2VyLlxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlTWFpblBhcnNlciA9ICgpOiBBcmd2ID0+IHtcbiAgY29uc3QgcGFja2FnZUpzb24gPSBuZXcgUGFja2FnZUpzb25SZWFkZXIoKS5yZWFkKFxuICAgIGZpbGVVUkxUb1BhdGgobmV3IFVSTCgnLi4vcGFja2FnZS5qc29uJywgaW1wb3J0Lm1ldGEudXJsKSlcbiAgKTtcbiAgY29uc3QgcGFyc2VyID0geWFyZ3MoKVxuICAgIC52ZXJzaW9uKHBhY2thZ2VKc29uLnZlcnNpb24gPz8gJycpXG4gICAgLy8gVGhpcyBvcHRpb24gaXMgYmVpbmcgdXNlZCBpbmRpcmVjdGx5IHRvIGNvbmZpZ3VyZSB0aGUgbG9nIGxldmVsIG9mIHRoZSBQcmludGVyIGluc3RhbmNlLlxuICAgIC8vIHJlZmVyOiBodHRwczovL2dpdGh1Yi5jb20vYXdzLWFtcGxpZnkvYW1wbGlmeS1iYWNrZW5kL2Jsb2IvbWFpbi9wYWNrYWdlcy9jbGkvc3JjL3ByaW50ZXIudHNcbiAgICAub3B0aW9ucygnZGVidWcnLCB7IHR5cGU6ICdib29sZWFuJywgZGVmYXVsdDogZmFsc2UgfSlcbiAgICAuY29tbWFuZChjcmVhdGVHZW5lcmF0ZUNvbW1hbmQoKSlcbiAgICAuY29tbWFuZChjcmVhdGVTYW5kYm94Q29tbWFuZCgpKVxuICAgIC5jb21tYW5kKGNyZWF0ZVBpcGVsaW5lRGVwbG95Q29tbWFuZCgpKVxuICAgIC5jb21tYW5kKGNyZWF0ZUNvbmZpZ3VyZUNvbW1hbmQoKSlcbiAgICAuY29tbWFuZChjcmVhdGVJbmZvQ29tbWFuZCgpKVxuICAgIC5oZWxwKClcbiAgICAuZGVtYW5kQ29tbWFuZCgpXG4gICAgLnN0cmljdENvbW1hbmRzKClcbiAgICAucmVjb21tZW5kQ29tbWFuZHMoKTtcbiAgcGFyc2VyLmZhaWwoZ2VuZXJhdGVDb21tYW5kRmFpbHVyZUhhbmRsZXIocGFyc2VyKSk7XG4gIHJldHVybiBwYXJzZXI7XG59O1xuIl19