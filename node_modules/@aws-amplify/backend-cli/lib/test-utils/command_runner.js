import { AsyncLocalStorage } from 'node:async_hooks';
import { generateCommandFailureHandler } from '../error_handler.js';
class OutputInterceptor {
    output = '';
    append = (chunk) => {
        this.output += chunk;
    };
    getOutput = () => this.output;
}
const asyncLocalStorage = new AsyncLocalStorage();
// Casting original write to Function to disable compiler safety intentionally.
// The process.stdout.write has many overloads and it's impossible to get right types here.
// We're passing unchanged argument list to original method, therefore this is safe.
// eslint-disable-next-line @typescript-eslint/ban-types
const createInterceptedWrite = (originalWrite) => {
    return (...args) => {
        const interceptor = asyncLocalStorage.getStore();
        if (interceptor && args.length > 0 && typeof args[0] === 'string') {
            interceptor.append(args[0]);
        }
        return originalWrite(...args);
    };
};
const originalStdoutWrite = process.stdout.write.bind(process.stdout);
process.stdout.write = createInterceptedWrite(originalStdoutWrite);
const originalStderrWrite = process.stderr.write.bind(process.stderr);
process.stderr.write = createInterceptedWrite(originalStderrWrite);
/**
 * An error that has both output and error that occurred during command execution.
 */
export class TestCommandError extends Error {
    error;
    output;
    /**
     * Creates new test command error.
     */
    constructor(error, output) {
        super();
        this.error = error;
        this.output = output;
    }
}
/**
 * Runs commands given preconfigured yargs parser.
 */
export class TestCommandRunner {
    parser;
    /**
     * Creates new command runner.
     */
    constructor(parser) {
        this.parser = parser
            // Pin locale
            .locale('en')
            // Override script name to avoid long test file names
            .scriptName('amplify')
            // Make sure we don't exit process on error or --help
            .exitProcess(false)
            // attach the failure handler
            // this is necessary because we may be testing a subcommand that doesn't have the top-level failure handler attached
            // eventually we may want to have a separate "testFailureHandler" if we need additional tooling here
            .fail(generateCommandFailureHandler(parser));
    }
    /**
     * Runs a command. Returns command output or throws an error if command failed.
     */
    runCommand = async (args) => {
        const interceptor = new OutputInterceptor();
        try {
            // We are using AsyncLocalStorage and OutputInterceptor to capture stdout and stdin streams into memory
            // instead of using parse/parseAsync with callback.
            // The reasons are:
            // - parse/parseAsync with callback leaves orphan promises that trigger unhandledRejection handler in tests
            // - parse/parseAsync with callback have edge cases if command builder and handler methods are sync or async
            //   see https://github.com/yargs/yargs/issues/1069
            //   and https://github.com/yargs/yargs/blob/main/docs/api.md#parseargs-context-parsecallback
            // - callback can only capture yargs logger outputs. it can't capture messages emitted from our code
            //
            // AsyncLocalStorage is used to make sure that we're capturing outputs only from the same asynchronous context
            // in potentially concurrent environment.
            await asyncLocalStorage.run(interceptor, async () => {
                await this.parser.parseAsync(args);
            });
            return interceptor.getOutput();
        }
        catch (err) {
            throw new TestCommandError(err, interceptor.getOutput());
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZF9ydW5uZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGVzdC11dGlscy9jb21tYW5kX3J1bm5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVwRSxNQUFNLGlCQUFpQjtJQUNiLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFDcEIsTUFBTSxHQUFHLENBQUMsS0FBYSxFQUFFLEVBQUU7UUFDekIsSUFBSSxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUM7SUFDdkIsQ0FBQyxDQUFDO0lBQ0YsU0FBUyxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7Q0FDL0I7QUFFRCxNQUFNLGlCQUFpQixHQUFHLElBQUksaUJBQWlCLEVBQXFCLENBQUM7QUFFckUsK0VBQStFO0FBQy9FLDJGQUEyRjtBQUMzRixvRkFBb0Y7QUFDcEYsd0RBQXdEO0FBQ3hELE1BQU0sc0JBQXNCLEdBQUcsQ0FBQyxhQUF1QixFQUFFLEVBQUU7SUFDekQsT0FBTyxDQUFDLEdBQUcsSUFBYSxFQUFFLEVBQUU7UUFDMUIsTUFBTSxXQUFXLEdBQ2YsaUJBQWlCLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDL0IsSUFBSSxXQUFXLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxFQUFFO1lBQ2pFLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDN0I7UUFFRCxPQUFPLGFBQWEsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ2hDLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUNGLE1BQU0sbUJBQW1CLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN0RSxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxzQkFBc0IsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBRW5FLE1BQU0sbUJBQW1CLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN0RSxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxzQkFBc0IsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBRW5FOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGdCQUFpQixTQUFRLEtBQUs7SUFJcEI7SUFBdUI7SUFINUM7O09BRUc7SUFDSCxZQUFxQixLQUFZLEVBQVcsTUFBYztRQUN4RCxLQUFLLEVBQUUsQ0FBQztRQURXLFVBQUssR0FBTCxLQUFLLENBQU87UUFBVyxXQUFNLEdBQU4sTUFBTSxDQUFRO0lBRTFELENBQUM7Q0FDRjtBQUVEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGlCQUFpQjtJQUNYLE1BQU0sQ0FBTztJQUU5Qjs7T0FFRztJQUNILFlBQVksTUFBWTtRQUN0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU07WUFDbEIsYUFBYTthQUNaLE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDYixxREFBcUQ7YUFDcEQsVUFBVSxDQUFDLFNBQVMsQ0FBQztZQUN0QixxREFBcUQ7YUFDcEQsV0FBVyxDQUFDLEtBQUssQ0FBQztZQUNuQiw2QkFBNkI7WUFDN0Isb0hBQW9IO1lBQ3BILG9HQUFvRzthQUNuRyxJQUFJLENBQUMsNkJBQTZCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxVQUFVLEdBQUcsS0FBSyxFQUFFLElBQTRCLEVBQW1CLEVBQUU7UUFDbkUsTUFBTSxXQUFXLEdBQUcsSUFBSSxpQkFBaUIsRUFBRSxDQUFDO1FBQzVDLElBQUk7WUFDRix1R0FBdUc7WUFDdkcsbURBQW1EO1lBQ25ELG1CQUFtQjtZQUNuQiwyR0FBMkc7WUFDM0csNEdBQTRHO1lBQzVHLG1EQUFtRDtZQUNuRCw2RkFBNkY7WUFDN0Ysb0dBQW9HO1lBQ3BHLEVBQUU7WUFDRiw4R0FBOEc7WUFDOUcseUNBQXlDO1lBQ3pDLE1BQU0saUJBQWlCLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxLQUFLLElBQUksRUFBRTtnQkFDbEQsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNyQyxDQUFDLENBQUMsQ0FBQztZQUNILE9BQU8sV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDO1NBQ2hDO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixNQUFNLElBQUksZ0JBQWdCLENBQUMsR0FBWSxFQUFFLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO1NBQ25FO0lBQ0gsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcmd2IH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHsgQXN5bmNMb2NhbFN0b3JhZ2UgfSBmcm9tICdub2RlOmFzeW5jX2hvb2tzJztcbmltcG9ydCB7IGdlbmVyYXRlQ29tbWFuZEZhaWx1cmVIYW5kbGVyIH0gZnJvbSAnLi4vZXJyb3JfaGFuZGxlci5qcyc7XG5cbmNsYXNzIE91dHB1dEludGVyY2VwdG9yIHtcbiAgcHJpdmF0ZSBvdXRwdXQgPSAnJztcbiAgYXBwZW5kID0gKGNodW5rOiBzdHJpbmcpID0+IHtcbiAgICB0aGlzLm91dHB1dCArPSBjaHVuaztcbiAgfTtcbiAgZ2V0T3V0cHV0ID0gKCkgPT4gdGhpcy5vdXRwdXQ7XG59XG5cbmNvbnN0IGFzeW5jTG9jYWxTdG9yYWdlID0gbmV3IEFzeW5jTG9jYWxTdG9yYWdlPE91dHB1dEludGVyY2VwdG9yPigpO1xuXG4vLyBDYXN0aW5nIG9yaWdpbmFsIHdyaXRlIHRvIEZ1bmN0aW9uIHRvIGRpc2FibGUgY29tcGlsZXIgc2FmZXR5IGludGVudGlvbmFsbHkuXG4vLyBUaGUgcHJvY2Vzcy5zdGRvdXQud3JpdGUgaGFzIG1hbnkgb3ZlcmxvYWRzIGFuZCBpdCdzIGltcG9zc2libGUgdG8gZ2V0IHJpZ2h0IHR5cGVzIGhlcmUuXG4vLyBXZSdyZSBwYXNzaW5nIHVuY2hhbmdlZCBhcmd1bWVudCBsaXN0IHRvIG9yaWdpbmFsIG1ldGhvZCwgdGhlcmVmb3JlIHRoaXMgaXMgc2FmZS5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXG5jb25zdCBjcmVhdGVJbnRlcmNlcHRlZFdyaXRlID0gKG9yaWdpbmFsV3JpdGU6IEZ1bmN0aW9uKSA9PiB7XG4gIHJldHVybiAoLi4uYXJnczogbmV2ZXJbXSkgPT4ge1xuICAgIGNvbnN0IGludGVyY2VwdG9yOiBPdXRwdXRJbnRlcmNlcHRvciB8IHVuZGVmaW5lZCA9XG4gICAgICBhc3luY0xvY2FsU3RvcmFnZS5nZXRTdG9yZSgpO1xuICAgIGlmIChpbnRlcmNlcHRvciAmJiBhcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnKSB7XG4gICAgICBpbnRlcmNlcHRvci5hcHBlbmQoYXJnc1swXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9yaWdpbmFsV3JpdGUoLi4uYXJncyk7XG4gIH07XG59O1xuY29uc3Qgb3JpZ2luYWxTdGRvdXRXcml0ZSA9IHByb2Nlc3Muc3Rkb3V0LndyaXRlLmJpbmQocHJvY2Vzcy5zdGRvdXQpO1xucHJvY2Vzcy5zdGRvdXQud3JpdGUgPSBjcmVhdGVJbnRlcmNlcHRlZFdyaXRlKG9yaWdpbmFsU3Rkb3V0V3JpdGUpO1xuXG5jb25zdCBvcmlnaW5hbFN0ZGVycldyaXRlID0gcHJvY2Vzcy5zdGRlcnIud3JpdGUuYmluZChwcm9jZXNzLnN0ZGVycik7XG5wcm9jZXNzLnN0ZGVyci53cml0ZSA9IGNyZWF0ZUludGVyY2VwdGVkV3JpdGUob3JpZ2luYWxTdGRlcnJXcml0ZSk7XG5cbi8qKlxuICogQW4gZXJyb3IgdGhhdCBoYXMgYm90aCBvdXRwdXQgYW5kIGVycm9yIHRoYXQgb2NjdXJyZWQgZHVyaW5nIGNvbW1hbmQgZXhlY3V0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgVGVzdENvbW1hbmRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgbmV3IHRlc3QgY29tbWFuZCBlcnJvci5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGVycm9yOiBFcnJvciwgcmVhZG9ubHkgb3V0cHV0OiBzdHJpbmcpIHtcbiAgICBzdXBlcigpO1xuICB9XG59XG5cbi8qKlxuICogUnVucyBjb21tYW5kcyBnaXZlbiBwcmVjb25maWd1cmVkIHlhcmdzIHBhcnNlci5cbiAqL1xuZXhwb3J0IGNsYXNzIFRlc3RDb21tYW5kUnVubmVyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBwYXJzZXI6IEFyZ3Y7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgbmV3IGNvbW1hbmQgcnVubmVyLlxuICAgKi9cbiAgY29uc3RydWN0b3IocGFyc2VyOiBBcmd2KSB7XG4gICAgdGhpcy5wYXJzZXIgPSBwYXJzZXJcbiAgICAgIC8vIFBpbiBsb2NhbGVcbiAgICAgIC5sb2NhbGUoJ2VuJylcbiAgICAgIC8vIE92ZXJyaWRlIHNjcmlwdCBuYW1lIHRvIGF2b2lkIGxvbmcgdGVzdCBmaWxlIG5hbWVzXG4gICAgICAuc2NyaXB0TmFtZSgnYW1wbGlmeScpXG4gICAgICAvLyBNYWtlIHN1cmUgd2UgZG9uJ3QgZXhpdCBwcm9jZXNzIG9uIGVycm9yIG9yIC0taGVscFxuICAgICAgLmV4aXRQcm9jZXNzKGZhbHNlKVxuICAgICAgLy8gYXR0YWNoIHRoZSBmYWlsdXJlIGhhbmRsZXJcbiAgICAgIC8vIHRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugd2UgbWF5IGJlIHRlc3RpbmcgYSBzdWJjb21tYW5kIHRoYXQgZG9lc24ndCBoYXZlIHRoZSB0b3AtbGV2ZWwgZmFpbHVyZSBoYW5kbGVyIGF0dGFjaGVkXG4gICAgICAvLyBldmVudHVhbGx5IHdlIG1heSB3YW50IHRvIGhhdmUgYSBzZXBhcmF0ZSBcInRlc3RGYWlsdXJlSGFuZGxlclwiIGlmIHdlIG5lZWQgYWRkaXRpb25hbCB0b29saW5nIGhlcmVcbiAgICAgIC5mYWlsKGdlbmVyYXRlQ29tbWFuZEZhaWx1cmVIYW5kbGVyKHBhcnNlcikpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJ1bnMgYSBjb21tYW5kLiBSZXR1cm5zIGNvbW1hbmQgb3V0cHV0IG9yIHRocm93cyBhbiBlcnJvciBpZiBjb21tYW5kIGZhaWxlZC5cbiAgICovXG4gIHJ1bkNvbW1hbmQgPSBhc3luYyAoYXJnczogc3RyaW5nIHwgQXJyYXk8c3RyaW5nPik6IFByb21pc2U8c3RyaW5nPiA9PiB7XG4gICAgY29uc3QgaW50ZXJjZXB0b3IgPSBuZXcgT3V0cHV0SW50ZXJjZXB0b3IoKTtcbiAgICB0cnkge1xuICAgICAgLy8gV2UgYXJlIHVzaW5nIEFzeW5jTG9jYWxTdG9yYWdlIGFuZCBPdXRwdXRJbnRlcmNlcHRvciB0byBjYXB0dXJlIHN0ZG91dCBhbmQgc3RkaW4gc3RyZWFtcyBpbnRvIG1lbW9yeVxuICAgICAgLy8gaW5zdGVhZCBvZiB1c2luZyBwYXJzZS9wYXJzZUFzeW5jIHdpdGggY2FsbGJhY2suXG4gICAgICAvLyBUaGUgcmVhc29ucyBhcmU6XG4gICAgICAvLyAtIHBhcnNlL3BhcnNlQXN5bmMgd2l0aCBjYWxsYmFjayBsZWF2ZXMgb3JwaGFuIHByb21pc2VzIHRoYXQgdHJpZ2dlciB1bmhhbmRsZWRSZWplY3Rpb24gaGFuZGxlciBpbiB0ZXN0c1xuICAgICAgLy8gLSBwYXJzZS9wYXJzZUFzeW5jIHdpdGggY2FsbGJhY2sgaGF2ZSBlZGdlIGNhc2VzIGlmIGNvbW1hbmQgYnVpbGRlciBhbmQgaGFuZGxlciBtZXRob2RzIGFyZSBzeW5jIG9yIGFzeW5jXG4gICAgICAvLyAgIHNlZSBodHRwczovL2dpdGh1Yi5jb20veWFyZ3MveWFyZ3MvaXNzdWVzLzEwNjlcbiAgICAgIC8vICAgYW5kIGh0dHBzOi8vZ2l0aHViLmNvbS95YXJncy95YXJncy9ibG9iL21haW4vZG9jcy9hcGkubWQjcGFyc2VhcmdzLWNvbnRleHQtcGFyc2VjYWxsYmFja1xuICAgICAgLy8gLSBjYWxsYmFjayBjYW4gb25seSBjYXB0dXJlIHlhcmdzIGxvZ2dlciBvdXRwdXRzLiBpdCBjYW4ndCBjYXB0dXJlIG1lc3NhZ2VzIGVtaXR0ZWQgZnJvbSBvdXIgY29kZVxuICAgICAgLy9cbiAgICAgIC8vIEFzeW5jTG9jYWxTdG9yYWdlIGlzIHVzZWQgdG8gbWFrZSBzdXJlIHRoYXQgd2UncmUgY2FwdHVyaW5nIG91dHB1dHMgb25seSBmcm9tIHRoZSBzYW1lIGFzeW5jaHJvbm91cyBjb250ZXh0XG4gICAgICAvLyBpbiBwb3RlbnRpYWxseSBjb25jdXJyZW50IGVudmlyb25tZW50LlxuICAgICAgYXdhaXQgYXN5bmNMb2NhbFN0b3JhZ2UucnVuKGludGVyY2VwdG9yLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHRoaXMucGFyc2VyLnBhcnNlQXN5bmMoYXJncyk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBpbnRlcmNlcHRvci5nZXRPdXRwdXQoKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHRocm93IG5ldyBUZXN0Q29tbWFuZEVycm9yKGVyciBhcyBFcnJvciwgaW50ZXJjZXB0b3IuZ2V0T3V0cHV0KCkpO1xuICAgIH1cbiAgfTtcbn1cbiJdfQ==