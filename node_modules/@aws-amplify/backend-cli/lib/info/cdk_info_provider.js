import { execa as _execa } from 'execa';
import { format } from '@aws-amplify/cli-core';
/**
 * Provides information about CDK.
 */
export class CdkInfoProvider {
    execa;
    /**
     * execa to run the cdk command and testing.
     */
    constructor(execa = _execa) {
        this.execa = execa;
    }
    /**
     * Format CDK information.
     * @returns The cdk doctor output.
     */
    async getCdkInfo() {
        const cdkDoctorArgs = ['cdk', 'doctor', '--', ' --no-color'];
        const output = await this.execa('npx', cdkDoctorArgs, {
            all: true,
        });
        return this.formatCdkInfo(output.all ?? output.stderr);
    }
    /**
     * Format CDK information.
     * @param info - The CDK information to format.
     * @returns The formatted CDK information.
     */
    formatCdkInfo(info) {
        const sensitiveKeys = [
            'AWS_ACCESS_KEY_ID',
            'AWS_SECRET_ACCESS_KEY',
            'AWS_SESSION_TOKEN',
        ];
        const lines = info.split(/\r\n|\r|\n/);
        const formattedLines = lines
            .filter((line) => !sensitiveKeys.some((key) => line.includes(key)))
            .map((line) => {
            //removes emoji from output
            let formattedLine = line.replace(/[^\x20-\x7E]/g, '').trim();
            if (formattedLine.startsWith('AWS_') ||
                formattedLine.startsWith('CDK_')) {
                formattedLine = format.indent(formattedLine);
            }
            else if (formattedLine.startsWith('- ')) {
                formattedLine = format.indent(formattedLine.substring(2));
            }
            return formattedLine;
        });
        return formattedLines
            .filter((line) => !line.startsWith('CDK Version'))
            .join('\n');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrX2luZm9fcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5mby9jZGtfaW5mb19wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsS0FBSyxJQUFJLE1BQU0sRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUN4QyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFL0M7O0dBRUc7QUFDSCxNQUFNLE9BQU8sZUFBZTtJQUlHO0lBSDdCOztPQUVHO0lBQ0gsWUFBNkIsUUFBUSxNQUFNO1FBQWQsVUFBSyxHQUFMLEtBQUssQ0FBUztJQUFHLENBQUM7SUFFL0M7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLFVBQVU7UUFDZCxNQUFNLGFBQWEsR0FBYSxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBRXZFLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsYUFBYSxFQUFFO1lBQ3BELEdBQUcsRUFBRSxJQUFJO1NBQ1YsQ0FBQyxDQUFDO1FBRUgsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRDs7OztPQUlHO0lBQ0ssYUFBYSxDQUFDLElBQVk7UUFDaEMsTUFBTSxhQUFhLEdBQUc7WUFDcEIsbUJBQW1CO1lBQ25CLHVCQUF1QjtZQUN2QixtQkFBbUI7U0FDcEIsQ0FBQztRQUVGLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDdkMsTUFBTSxjQUFjLEdBQUcsS0FBSzthQUN6QixNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ2xFLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ1osMkJBQTJCO1lBQzNCLElBQUksYUFBYSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1lBRTdELElBQ0UsYUFBYSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUM7Z0JBQ2hDLGFBQWEsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQ2hDO2dCQUNBLGFBQWEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2FBQzlDO2lCQUFNLElBQUksYUFBYSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDekMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzNEO1lBRUQsT0FBTyxhQUFhLENBQUM7UUFDdkIsQ0FBQyxDQUFDLENBQUM7UUFFTCxPQUFPLGNBQWM7YUFDbEIsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDakQsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4ZWNhIGFzIF9leGVjYSB9IGZyb20gJ2V4ZWNhJztcbmltcG9ydCB7IGZvcm1hdCB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9jbGktY29yZSc7XG5cbi8qKlxuICogUHJvdmlkZXMgaW5mb3JtYXRpb24gYWJvdXQgQ0RLLlxuICovXG5leHBvcnQgY2xhc3MgQ2RrSW5mb1Byb3ZpZGVyIHtcbiAgLyoqXG4gICAqIGV4ZWNhIHRvIHJ1biB0aGUgY2RrIGNvbW1hbmQgYW5kIHRlc3RpbmcuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGV4ZWNhID0gX2V4ZWNhKSB7fVxuXG4gIC8qKlxuICAgKiBGb3JtYXQgQ0RLIGluZm9ybWF0aW9uLlxuICAgKiBAcmV0dXJucyBUaGUgY2RrIGRvY3RvciBvdXRwdXQuXG4gICAqL1xuICBhc3luYyBnZXRDZGtJbmZvKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgY2RrRG9jdG9yQXJnczogc3RyaW5nW10gPSBbJ2NkaycsICdkb2N0b3InLCAnLS0nLCAnIC0tbm8tY29sb3InXTtcblxuICAgIGNvbnN0IG91dHB1dCA9IGF3YWl0IHRoaXMuZXhlY2EoJ25weCcsIGNka0RvY3RvckFyZ3MsIHtcbiAgICAgIGFsbDogdHJ1ZSxcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzLmZvcm1hdENka0luZm8ob3V0cHV0LmFsbCA/PyBvdXRwdXQuc3RkZXJyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGb3JtYXQgQ0RLIGluZm9ybWF0aW9uLlxuICAgKiBAcGFyYW0gaW5mbyAtIFRoZSBDREsgaW5mb3JtYXRpb24gdG8gZm9ybWF0LlxuICAgKiBAcmV0dXJucyBUaGUgZm9ybWF0dGVkIENESyBpbmZvcm1hdGlvbi5cbiAgICovXG4gIHByaXZhdGUgZm9ybWF0Q2RrSW5mbyhpbmZvOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IHNlbnNpdGl2ZUtleXMgPSBbXG4gICAgICAnQVdTX0FDQ0VTU19LRVlfSUQnLFxuICAgICAgJ0FXU19TRUNSRVRfQUNDRVNTX0tFWScsXG4gICAgICAnQVdTX1NFU1NJT05fVE9LRU4nLFxuICAgIF07XG5cbiAgICBjb25zdCBsaW5lcyA9IGluZm8uc3BsaXQoL1xcclxcbnxcXHJ8XFxuLyk7XG4gICAgY29uc3QgZm9ybWF0dGVkTGluZXMgPSBsaW5lc1xuICAgICAgLmZpbHRlcigobGluZSkgPT4gIXNlbnNpdGl2ZUtleXMuc29tZSgoa2V5KSA9PiBsaW5lLmluY2x1ZGVzKGtleSkpKVxuICAgICAgLm1hcCgobGluZSkgPT4ge1xuICAgICAgICAvL3JlbW92ZXMgZW1vamkgZnJvbSBvdXRwdXRcbiAgICAgICAgbGV0IGZvcm1hdHRlZExpbmUgPSBsaW5lLnJlcGxhY2UoL1teXFx4MjAtXFx4N0VdL2csICcnKS50cmltKCk7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIGZvcm1hdHRlZExpbmUuc3RhcnRzV2l0aCgnQVdTXycpIHx8XG4gICAgICAgICAgZm9ybWF0dGVkTGluZS5zdGFydHNXaXRoKCdDREtfJylcbiAgICAgICAgKSB7XG4gICAgICAgICAgZm9ybWF0dGVkTGluZSA9IGZvcm1hdC5pbmRlbnQoZm9ybWF0dGVkTGluZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0dGVkTGluZS5zdGFydHNXaXRoKCctICcpKSB7XG4gICAgICAgICAgZm9ybWF0dGVkTGluZSA9IGZvcm1hdC5pbmRlbnQoZm9ybWF0dGVkTGluZS5zdWJzdHJpbmcoMikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZvcm1hdHRlZExpbmU7XG4gICAgICB9KTtcblxuICAgIHJldHVybiBmb3JtYXR0ZWRMaW5lc1xuICAgICAgLmZpbHRlcigobGluZSkgPT4gIWxpbmUuc3RhcnRzV2l0aCgnQ0RLIFZlcnNpb24nKSlcbiAgICAgIC5qb2luKCdcXG4nKTtcbiAgfVxufVxuIl19