import { fromNodeProviderChain } from '@aws-sdk/credential-providers';
import { EOL } from 'os';
import { loadConfig } from '@smithy/node-config-provider';
import { NODE_REGION_CONFIG_OPTIONS } from '@aws-sdk/region-config-resolver';
import { InvalidCredentialError } from './error/credential_error.js';
export const profileSetupInstruction = `To configure a new Amplify profile, use "npx amplify configure profile".`;
/**
 * Contains middleware functions.
 */
export class CommandMiddleware {
    /**
     * Ensure AWS credentials and region of the input profile (or 'default' if undefined) are available in the provider chain.
     * If the input profile is defined, the environment variable AWS_PROFILE will be set accordingly.
     */
    ensureAwsCredentialAndRegion = async (argv) => {
        if (argv.profile) {
            process.env.AWS_PROFILE = argv.profile;
        }
        // Check credentials.
        try {
            await fromNodeProviderChain({
                ignoreCache: true,
            })();
        }
        catch (err) {
            let errMsg;
            if (argv.profile) {
                errMsg = `Failed to load aws credentials for profile '${argv.profile}': ${err.message}.${EOL}`;
            }
            else {
                errMsg = `Failed to load default aws credentials: ${err.message}.${EOL}`;
            }
            errMsg += profileSetupInstruction;
            throw new InvalidCredentialError(errMsg, { cause: err });
        }
        // Check region.
        try {
            await loadConfig(NODE_REGION_CONFIG_OPTIONS, {
                ignoreCache: true,
            })();
        }
        catch (err) {
            let errMsg;
            if (argv.profile) {
                errMsg = `Failed to load aws region for profile '${argv.profile}': ${err.message}.${EOL}`;
            }
            else {
                errMsg = `Failed to load default aws region: ${err.message}.${EOL}`;
            }
            errMsg += profileSetupInstruction;
            throw new InvalidCredentialError(errMsg, { cause: err });
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZF9taWRkbGV3YXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbW1hbmRfbWlkZGxld2FyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUN0RSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBQ3pCLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM3RSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUVyRSxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRywwRUFBMEUsQ0FBQztBQUVsSDs7R0FFRztBQUNILE1BQU0sT0FBTyxpQkFBaUI7SUFDNUI7OztPQUdHO0lBQ0gsNEJBQTRCLEdBQUcsS0FBSyxFQUdsQyxJQUEyQixFQUMzQixFQUFFO1FBQ0YsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7U0FDeEM7UUFFRCxxQkFBcUI7UUFDckIsSUFBSTtZQUNGLE1BQU0scUJBQXFCLENBQUM7Z0JBQzFCLFdBQVcsRUFBRSxJQUFJO2FBQ2xCLENBQUMsRUFBRSxDQUFDO1NBQ047UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNaLElBQUksTUFBYyxDQUFDO1lBQ25CLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDaEIsTUFBTSxHQUFHLCtDQUNQLElBQUksQ0FBQyxPQUNQLE1BQU8sR0FBYSxDQUFDLE9BQU8sSUFBSSxHQUFHLEVBQUUsQ0FBQzthQUN2QztpQkFBTTtnQkFDTCxNQUFNLEdBQUcsMkNBQ04sR0FBYSxDQUFDLE9BQ2pCLElBQUksR0FBRyxFQUFFLENBQUM7YUFDWDtZQUNELE1BQU0sSUFBSSx1QkFBdUIsQ0FBQztZQUNsQyxNQUFNLElBQUksc0JBQXNCLENBQUMsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7U0FDMUQ7UUFFRCxnQkFBZ0I7UUFDaEIsSUFBSTtZQUNGLE1BQU0sVUFBVSxDQUFDLDBCQUEwQixFQUFFO2dCQUMzQyxXQUFXLEVBQUUsSUFBSTthQUNsQixDQUFDLEVBQUUsQ0FBQztTQUNOO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixJQUFJLE1BQWMsQ0FBQztZQUNuQixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ2hCLE1BQU0sR0FBRywwQ0FBMEMsSUFBSSxDQUFDLE9BQU8sTUFDNUQsR0FBYSxDQUFDLE9BQ2pCLElBQUksR0FBRyxFQUFFLENBQUM7YUFDWDtpQkFBTTtnQkFDTCxNQUFNLEdBQUcsc0NBQ04sR0FBYSxDQUFDLE9BQ2pCLElBQUksR0FBRyxFQUFFLENBQUM7YUFDWDtZQUNELE1BQU0sSUFBSSx1QkFBdUIsQ0FBQztZQUNsQyxNQUFNLElBQUksc0JBQXNCLENBQUMsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7U0FDMUQ7SUFDSCxDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFyZ3VtZW50c0NhbWVsQ2FzZSB9IGZyb20gJ3lhcmdzJztcbmltcG9ydCB7IGZyb21Ob2RlUHJvdmlkZXJDaGFpbiB9IGZyb20gJ0Bhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXJzJztcbmltcG9ydCB7IEVPTCB9IGZyb20gJ29zJztcbmltcG9ydCB7IGxvYWRDb25maWcgfSBmcm9tICdAc21pdGh5L25vZGUtY29uZmlnLXByb3ZpZGVyJztcbmltcG9ydCB7IE5PREVfUkVHSU9OX0NPTkZJR19PUFRJT05TIH0gZnJvbSAnQGF3cy1zZGsvcmVnaW9uLWNvbmZpZy1yZXNvbHZlcic7XG5pbXBvcnQgeyBJbnZhbGlkQ3JlZGVudGlhbEVycm9yIH0gZnJvbSAnLi9lcnJvci9jcmVkZW50aWFsX2Vycm9yLmpzJztcblxuZXhwb3J0IGNvbnN0IHByb2ZpbGVTZXR1cEluc3RydWN0aW9uID0gYFRvIGNvbmZpZ3VyZSBhIG5ldyBBbXBsaWZ5IHByb2ZpbGUsIHVzZSBcIm5weCBhbXBsaWZ5IGNvbmZpZ3VyZSBwcm9maWxlXCIuYDtcblxuLyoqXG4gKiBDb250YWlucyBtaWRkbGV3YXJlIGZ1bmN0aW9ucy5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbW1hbmRNaWRkbGV3YXJlIHtcbiAgLyoqXG4gICAqIEVuc3VyZSBBV1MgY3JlZGVudGlhbHMgYW5kIHJlZ2lvbiBvZiB0aGUgaW5wdXQgcHJvZmlsZSAob3IgJ2RlZmF1bHQnIGlmIHVuZGVmaW5lZCkgYXJlIGF2YWlsYWJsZSBpbiB0aGUgcHJvdmlkZXIgY2hhaW4uXG4gICAqIElmIHRoZSBpbnB1dCBwcm9maWxlIGlzIGRlZmluZWQsIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZSBBV1NfUFJPRklMRSB3aWxsIGJlIHNldCBhY2NvcmRpbmdseS5cbiAgICovXG4gIGVuc3VyZUF3c0NyZWRlbnRpYWxBbmRSZWdpb24gPSBhc3luYyA8XG4gICAgVCBleHRlbmRzIHsgcHJvZmlsZTogc3RyaW5nIHwgdW5kZWZpbmVkIH1cbiAgPihcbiAgICBhcmd2OiBBcmd1bWVudHNDYW1lbENhc2U8VD5cbiAgKSA9PiB7XG4gICAgaWYgKGFyZ3YucHJvZmlsZSkge1xuICAgICAgcHJvY2Vzcy5lbnYuQVdTX1BST0ZJTEUgPSBhcmd2LnByb2ZpbGU7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgY3JlZGVudGlhbHMuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGZyb21Ob2RlUHJvdmlkZXJDaGFpbih7XG4gICAgICAgIGlnbm9yZUNhY2hlOiB0cnVlLFxuICAgICAgfSkoKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxldCBlcnJNc2c6IHN0cmluZztcbiAgICAgIGlmIChhcmd2LnByb2ZpbGUpIHtcbiAgICAgICAgZXJyTXNnID0gYEZhaWxlZCB0byBsb2FkIGF3cyBjcmVkZW50aWFscyBmb3IgcHJvZmlsZSAnJHtcbiAgICAgICAgICBhcmd2LnByb2ZpbGVcbiAgICAgICAgfSc6ICR7KGVyciBhcyBFcnJvcikubWVzc2FnZX0uJHtFT0x9YDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVyck1zZyA9IGBGYWlsZWQgdG8gbG9hZCBkZWZhdWx0IGF3cyBjcmVkZW50aWFsczogJHtcbiAgICAgICAgICAoZXJyIGFzIEVycm9yKS5tZXNzYWdlXG4gICAgICAgIH0uJHtFT0x9YDtcbiAgICAgIH1cbiAgICAgIGVyck1zZyArPSBwcm9maWxlU2V0dXBJbnN0cnVjdGlvbjtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQ3JlZGVudGlhbEVycm9yKGVyck1zZywgeyBjYXVzZTogZXJyIH0pO1xuICAgIH1cblxuICAgIC8vIENoZWNrIHJlZ2lvbi5cbiAgICB0cnkge1xuICAgICAgYXdhaXQgbG9hZENvbmZpZyhOT0RFX1JFR0lPTl9DT05GSUdfT1BUSU9OUywge1xuICAgICAgICBpZ25vcmVDYWNoZTogdHJ1ZSxcbiAgICAgIH0pKCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBsZXQgZXJyTXNnOiBzdHJpbmc7XG4gICAgICBpZiAoYXJndi5wcm9maWxlKSB7XG4gICAgICAgIGVyck1zZyA9IGBGYWlsZWQgdG8gbG9hZCBhd3MgcmVnaW9uIGZvciBwcm9maWxlICcke2FyZ3YucHJvZmlsZX0nOiAke1xuICAgICAgICAgIChlcnIgYXMgRXJyb3IpLm1lc3NhZ2VcbiAgICAgICAgfS4ke0VPTH1gO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXJyTXNnID0gYEZhaWxlZCB0byBsb2FkIGRlZmF1bHQgYXdzIHJlZ2lvbjogJHtcbiAgICAgICAgICAoZXJyIGFzIEVycm9yKS5tZXNzYWdlXG4gICAgICAgIH0uJHtFT0x9YDtcbiAgICAgIH1cbiAgICAgIGVyck1zZyArPSBwcm9maWxlU2V0dXBJbnN0cnVjdGlvbjtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQ3JlZGVudGlhbEVycm9yKGVyck1zZywgeyBjYXVzZTogZXJyIH0pO1xuICAgIH1cbiAgfTtcbn1cbiJdfQ==