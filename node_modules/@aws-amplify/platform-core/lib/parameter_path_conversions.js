"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParameterPathConversions = void 0;
const backend_identifier_conversions_js_1 = require("./backend_identifier_conversions.js");
const SHARED_SECRET = 'shared';
/**
 * Provides static methods for converting BackendIdentifier to parameter path strings
 */
class ParameterPathConversions {
    /**
     * Convert a BackendIdentifier to a parameter prefix.
     */
    static toParameterPrefix(backendId) {
        if (typeof backendId === 'object') {
            return getBackendParameterPrefix(backendId);
        }
        return getSharedParameterPrefix(backendId);
    }
    /**
     * Convert a BackendIdentifier to a parameter full path.
     */
    static toParameterFullPath(backendId, secretName) {
        if (typeof backendId === 'object') {
            return getBackendParameterFullPath(backendId, secretName);
        }
        return getSharedParameterFullPath(backendId, secretName);
    }
}
exports.ParameterPathConversions = ParameterPathConversions;
/**
 * Get a branch-specific parameter prefix.
 */
const getBackendParameterPrefix = (parts) => {
    // round trip the backend id through the stack name conversion to ensure we are applying the same sanitization to SSM paths
    const sanitizedBackendId = backend_identifier_conversions_js_1.BackendIdentifierConversions.fromStackName(backend_identifier_conversions_js_1.BackendIdentifierConversions.toStackName(parts));
    if (!sanitizedBackendId || !sanitizedBackendId.hash) {
        // this *should* never happen
        throw new Error(`Could not sanitize the backendId to construct the parameter path`);
    }
    return `/amplify/${sanitizedBackendId.namespace}/${sanitizedBackendId.name}-${sanitizedBackendId.type}-${sanitizedBackendId.hash}`;
};
/**
 * Get a branch-specific parameter full path.
 */
const getBackendParameterFullPath = (backendIdentifier, secretName) => {
    return `${getBackendParameterPrefix(backendIdentifier)}/${secretName}`;
};
/**
 * Get a shared parameter prefix.
 */
const getSharedParameterPrefix = (appId) => {
    return `/amplify/${SHARED_SECRET}/${appId}`;
};
/**
 * Get a shared parameter full path.
 */
const getSharedParameterFullPath = (appId, secretName) => {
    return `${getSharedParameterPrefix(appId)}/${secretName}`;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyYW1ldGVyX3BhdGhfY29udmVyc2lvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcGFyYW1ldGVyX3BhdGhfY29udmVyc2lvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsMkZBQW1GO0FBRW5GLE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQztBQUUvQjs7R0FFRztBQUNILE1BQWEsd0JBQXdCO0lBQ25DOztPQUVHO0lBQ0gsTUFBTSxDQUFDLGlCQUFpQixDQUFDLFNBQW9DO1FBQzNELElBQUksT0FBTyxTQUFTLEtBQUssUUFBUSxFQUFFO1lBQ2pDLE9BQU8seUJBQXlCLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDN0M7UUFDRCxPQUFPLHdCQUF3QixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU0sQ0FBQyxtQkFBbUIsQ0FDeEIsU0FBb0MsRUFDcEMsVUFBa0I7UUFFbEIsSUFBSSxPQUFPLFNBQVMsS0FBSyxRQUFRLEVBQUU7WUFDakMsT0FBTywyQkFBMkIsQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUM7U0FDM0Q7UUFDRCxPQUFPLDBCQUEwQixDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUMzRCxDQUFDO0NBQ0Y7QUF2QkQsNERBdUJDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLHlCQUF5QixHQUFHLENBQUMsS0FBd0IsRUFBVSxFQUFFO0lBQ3JFLDJIQUEySDtJQUMzSCxNQUFNLGtCQUFrQixHQUFHLGdFQUE0QixDQUFDLGFBQWEsQ0FDbkUsZ0VBQTRCLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUNoRCxDQUFDO0lBQ0YsSUFBSSxDQUFDLGtCQUFrQixJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFO1FBQ25ELDZCQUE2QjtRQUM3QixNQUFNLElBQUksS0FBSyxDQUNiLGtFQUFrRSxDQUNuRSxDQUFDO0tBQ0g7SUFDRCxPQUFPLFlBQVksa0JBQWtCLENBQUMsU0FBUyxJQUFJLGtCQUFrQixDQUFDLElBQUksSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLElBQUksa0JBQWtCLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDckksQ0FBQyxDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLDJCQUEyQixHQUFHLENBQ2xDLGlCQUFvQyxFQUNwQyxVQUFrQixFQUNWLEVBQUU7SUFDVixPQUFPLEdBQUcseUJBQXlCLENBQUMsaUJBQWlCLENBQUMsSUFBSSxVQUFVLEVBQUUsQ0FBQztBQUN6RSxDQUFDLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sd0JBQXdCLEdBQUcsQ0FBQyxLQUFZLEVBQVUsRUFBRTtJQUN4RCxPQUFPLFlBQVksYUFBYSxJQUFJLEtBQUssRUFBRSxDQUFDO0FBQzlDLENBQUMsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSwwQkFBMEIsR0FBRyxDQUNqQyxLQUFZLEVBQ1osVUFBa0IsRUFDVixFQUFFO0lBQ1YsT0FBTyxHQUFHLHdCQUF3QixDQUFDLEtBQUssQ0FBQyxJQUFJLFVBQVUsRUFBRSxDQUFDO0FBQzVELENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcElkLCBCYWNrZW5kSWRlbnRpZmllciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IHsgQmFja2VuZElkZW50aWZpZXJDb252ZXJzaW9ucyB9IGZyb20gJy4vYmFja2VuZF9pZGVudGlmaWVyX2NvbnZlcnNpb25zLmpzJztcblxuY29uc3QgU0hBUkVEX1NFQ1JFVCA9ICdzaGFyZWQnO1xuXG4vKipcbiAqIFByb3ZpZGVzIHN0YXRpYyBtZXRob2RzIGZvciBjb252ZXJ0aW5nIEJhY2tlbmRJZGVudGlmaWVyIHRvIHBhcmFtZXRlciBwYXRoIHN0cmluZ3NcbiAqL1xuZXhwb3J0IGNsYXNzIFBhcmFtZXRlclBhdGhDb252ZXJzaW9ucyB7XG4gIC8qKlxuICAgKiBDb252ZXJ0IGEgQmFja2VuZElkZW50aWZpZXIgdG8gYSBwYXJhbWV0ZXIgcHJlZml4LlxuICAgKi9cbiAgc3RhdGljIHRvUGFyYW1ldGVyUHJlZml4KGJhY2tlbmRJZDogQmFja2VuZElkZW50aWZpZXIgfCBBcHBJZCk6IHN0cmluZyB7XG4gICAgaWYgKHR5cGVvZiBiYWNrZW5kSWQgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gZ2V0QmFja2VuZFBhcmFtZXRlclByZWZpeChiYWNrZW5kSWQpO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0U2hhcmVkUGFyYW1ldGVyUHJlZml4KGJhY2tlbmRJZCk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydCBhIEJhY2tlbmRJZGVudGlmaWVyIHRvIGEgcGFyYW1ldGVyIGZ1bGwgcGF0aC5cbiAgICovXG4gIHN0YXRpYyB0b1BhcmFtZXRlckZ1bGxQYXRoKFxuICAgIGJhY2tlbmRJZDogQmFja2VuZElkZW50aWZpZXIgfCBBcHBJZCxcbiAgICBzZWNyZXROYW1lOiBzdHJpbmdcbiAgKTogc3RyaW5nIHtcbiAgICBpZiAodHlwZW9mIGJhY2tlbmRJZCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiBnZXRCYWNrZW5kUGFyYW1ldGVyRnVsbFBhdGgoYmFja2VuZElkLCBzZWNyZXROYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIGdldFNoYXJlZFBhcmFtZXRlckZ1bGxQYXRoKGJhY2tlbmRJZCwgc2VjcmV0TmFtZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgYSBicmFuY2gtc3BlY2lmaWMgcGFyYW1ldGVyIHByZWZpeC5cbiAqL1xuY29uc3QgZ2V0QmFja2VuZFBhcmFtZXRlclByZWZpeCA9IChwYXJ0czogQmFja2VuZElkZW50aWZpZXIpOiBzdHJpbmcgPT4ge1xuICAvLyByb3VuZCB0cmlwIHRoZSBiYWNrZW5kIGlkIHRocm91Z2ggdGhlIHN0YWNrIG5hbWUgY29udmVyc2lvbiB0byBlbnN1cmUgd2UgYXJlIGFwcGx5aW5nIHRoZSBzYW1lIHNhbml0aXphdGlvbiB0byBTU00gcGF0aHNcbiAgY29uc3Qgc2FuaXRpemVkQmFja2VuZElkID0gQmFja2VuZElkZW50aWZpZXJDb252ZXJzaW9ucy5mcm9tU3RhY2tOYW1lKFxuICAgIEJhY2tlbmRJZGVudGlmaWVyQ29udmVyc2lvbnMudG9TdGFja05hbWUocGFydHMpXG4gICk7XG4gIGlmICghc2FuaXRpemVkQmFja2VuZElkIHx8ICFzYW5pdGl6ZWRCYWNrZW5kSWQuaGFzaCkge1xuICAgIC8vIHRoaXMgKnNob3VsZCogbmV2ZXIgaGFwcGVuXG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYENvdWxkIG5vdCBzYW5pdGl6ZSB0aGUgYmFja2VuZElkIHRvIGNvbnN0cnVjdCB0aGUgcGFyYW1ldGVyIHBhdGhgXG4gICAgKTtcbiAgfVxuICByZXR1cm4gYC9hbXBsaWZ5LyR7c2FuaXRpemVkQmFja2VuZElkLm5hbWVzcGFjZX0vJHtzYW5pdGl6ZWRCYWNrZW5kSWQubmFtZX0tJHtzYW5pdGl6ZWRCYWNrZW5kSWQudHlwZX0tJHtzYW5pdGl6ZWRCYWNrZW5kSWQuaGFzaH1gO1xufTtcblxuLyoqXG4gKiBHZXQgYSBicmFuY2gtc3BlY2lmaWMgcGFyYW1ldGVyIGZ1bGwgcGF0aC5cbiAqL1xuY29uc3QgZ2V0QmFja2VuZFBhcmFtZXRlckZ1bGxQYXRoID0gKFxuICBiYWNrZW5kSWRlbnRpZmllcjogQmFja2VuZElkZW50aWZpZXIsXG4gIHNlY3JldE5hbWU6IHN0cmluZ1xuKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIGAke2dldEJhY2tlbmRQYXJhbWV0ZXJQcmVmaXgoYmFja2VuZElkZW50aWZpZXIpfS8ke3NlY3JldE5hbWV9YDtcbn07XG5cbi8qKlxuICogR2V0IGEgc2hhcmVkIHBhcmFtZXRlciBwcmVmaXguXG4gKi9cbmNvbnN0IGdldFNoYXJlZFBhcmFtZXRlclByZWZpeCA9IChhcHBJZDogQXBwSWQpOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gYC9hbXBsaWZ5LyR7U0hBUkVEX1NFQ1JFVH0vJHthcHBJZH1gO1xufTtcblxuLyoqXG4gKiBHZXQgYSBzaGFyZWQgcGFyYW1ldGVyIGZ1bGwgcGF0aC5cbiAqL1xuY29uc3QgZ2V0U2hhcmVkUGFyYW1ldGVyRnVsbFBhdGggPSAoXG4gIGFwcElkOiBBcHBJZCxcbiAgc2VjcmV0TmFtZTogc3RyaW5nXG4pOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gYCR7Z2V0U2hhcmVkUGFyYW1ldGVyUHJlZml4KGFwcElkKX0vJHtzZWNyZXROYW1lfWA7XG59O1xuIl19