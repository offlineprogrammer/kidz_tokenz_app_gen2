"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AmplifyError = void 0;
const _1 = require(".");
/**
 * Base class for all Amplify errors or faults
 */
class AmplifyError extends Error {
    name;
    classification;
    options;
    cause;
    serializedError;
    message;
    resolution;
    details;
    link;
    code;
    /**
     * You should use AmplifyUserError or AmplifyLibraryFault to throw an error.
     * @param name - a user friendly name for the exception
     * @param classification - LibraryFault or UserError
     * @param options - error stack, resolution steps, details, or help links
     * @param cause If you are throwing this exception from within a catch block,
     * you must provide the exception that was caught.
     * @example
     * try {
     *  ...
     * } catch (error){
     *    throw new AmplifyError(...,...,error);
     * }
     */
    constructor(name, classification, options, cause) {
        // If an AmplifyError was already thrown, we must allow it to reach the user.
        // This ensures that resolution steps, and the original error are bubbled up.
        super(options.message, { cause });
        this.name = name;
        this.classification = classification;
        this.options = options;
        this.cause = cause;
        // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
        Object.setPrototypeOf(this, AmplifyError.prototype);
        this.message = options.message;
        this.details = options.details;
        this.resolution = options.resolution;
        this.code = options.code;
        this.link = options.link;
        if (cause && cause instanceof AmplifyError) {
            cause.serializedError = undefined;
        }
        this.serializedError = JSON.stringify({
            name,
            classification,
            options,
            cause,
        });
    }
    static fromStderr = (_stderr) => {
        const extractionRegex = /["']?serializedError["']?:[ ]?["'](.*)["']/;
        const serialized = _stderr.match(extractionRegex);
        if (serialized && serialized.length == 2) {
            try {
                const { name, classification, options, cause } = JSON.parse(serialized[1]);
                return classification === 'ERROR'
                    ? new _1.AmplifyUserError(name, options, cause)
                    : new _1.AmplifyFault(name, options, cause);
            }
            catch (error) {
                // cannot deserialize
                return undefined;
            }
        }
        return undefined;
    };
    static fromError = (error) => {
        const errorMessage = error instanceof Error
            ? `${error.name}: ${error.message}`
            : 'An unknown error happened. Check downstream error';
        return new _1.AmplifyFault('UnknownFault', {
            message: errorMessage,
        }, error instanceof Error ? error : new Error(String(error)));
    };
}
exports.AmplifyError = AmplifyError;
//# sourceMappingURL=data:application/json;base64,