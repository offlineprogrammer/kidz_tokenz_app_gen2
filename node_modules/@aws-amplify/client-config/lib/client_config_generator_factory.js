import { UnifiedClientConfigGenerator } from './unified_client_config_generator.js';
import { AuthClientConfigContributor } from './client-config-contributor/auth_client_config_contributor.js';
import { GraphqlClientConfigContributor } from './client-config-contributor/graphql_client_config_contributor.js';
import { StorageClientConfigContributor } from './client-config-contributor/storage_client_config_contributor.js';
import { ModelIntrospectionSchemaAdapter } from './client-config-contributor/model_introspection_schema_adapater.js';
import { PlatformClientConfigContributor } from './client-config-contributor/platform_client_config_contributor.js';
import { CustomClientConfigContributor } from './client-config-contributor/custom_client_config_contributor.js';
/**
 * Creates ClientConfigGenerators given different backend identifiers
 */
export class ClientConfigGeneratorFactory {
    fetchOutput;
    /**
     * Provide the factory with AWS credentials. These credentials will be used to configure underlying SDK clients for resolving backend output.
     */
    constructor(fetchOutput) {
        this.fetchOutput = fetchOutput;
    }
    /**
     * Returns a ClientConfigGenerator for the given BackendIdentifier type
     */
    getInstance = (credentialProvider) => {
        const modelSchemaAdapter = new ModelIntrospectionSchemaAdapter(credentialProvider);
        return new UnifiedClientConfigGenerator(this.fetchOutput, [
            new PlatformClientConfigContributor(),
            new AuthClientConfigContributor(),
            new GraphqlClientConfigContributor(modelSchemaAdapter),
            new StorageClientConfigContributor(),
            // Custom client config contributor must be last in the pipeline
            // as it has capability of overriding previously defined properties.
            new CustomClientConfigContributor(),
        ]);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50X2NvbmZpZ19nZW5lcmF0b3JfZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jbGllbnRfY29uZmlnX2dlbmVyYXRvcl9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ3BGLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLCtEQUErRCxDQUFDO0FBQzVHLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLGtFQUFrRSxDQUFDO0FBRWxILE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLGtFQUFrRSxDQUFDO0FBR2xILE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLG9FQUFvRSxDQUFDO0FBQ3JILE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLG1FQUFtRSxDQUFDO0FBQ3BILE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLGlFQUFpRSxDQUFDO0FBRWhIOztHQUVHO0FBQ0gsTUFBTSxPQUFPLDRCQUE0QjtJQUlWO0lBSDdCOztPQUVHO0lBQ0gsWUFBNkIsV0FBeUM7UUFBekMsZ0JBQVcsR0FBWCxXQUFXLENBQThCO0lBQUcsQ0FBQztJQUUxRTs7T0FFRztJQUNILFdBQVcsR0FBRyxDQUNaLGtCQUFpRCxFQUMxQixFQUFFO1FBQ3pCLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSwrQkFBK0IsQ0FDNUQsa0JBQWtCLENBQ25CLENBQUM7UUFFRixPQUFPLElBQUksNEJBQTRCLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUN4RCxJQUFJLCtCQUErQixFQUFFO1lBQ3JDLElBQUksMkJBQTJCLEVBQUU7WUFDakMsSUFBSSw4QkFBOEIsQ0FBQyxrQkFBa0IsQ0FBQztZQUN0RCxJQUFJLDhCQUE4QixFQUFFO1lBQ3BDLGdFQUFnRTtZQUNoRSxvRUFBb0U7WUFDcEUsSUFBSSw2QkFBNkIsRUFBRTtTQUNwQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFVuaWZpZWRDbGllbnRDb25maWdHZW5lcmF0b3IgfSBmcm9tICcuL3VuaWZpZWRfY2xpZW50X2NvbmZpZ19nZW5lcmF0b3IuanMnO1xuaW1wb3J0IHsgQXV0aENsaWVudENvbmZpZ0NvbnRyaWJ1dG9yIH0gZnJvbSAnLi9jbGllbnQtY29uZmlnLWNvbnRyaWJ1dG9yL2F1dGhfY2xpZW50X2NvbmZpZ19jb250cmlidXRvci5qcyc7XG5pbXBvcnQgeyBHcmFwaHFsQ2xpZW50Q29uZmlnQ29udHJpYnV0b3IgfSBmcm9tICcuL2NsaWVudC1jb25maWctY29udHJpYnV0b3IvZ3JhcGhxbF9jbGllbnRfY29uZmlnX2NvbnRyaWJ1dG9yLmpzJztcbmltcG9ydCB7IENsaWVudENvbmZpZ0dlbmVyYXRvciB9IGZyb20gJy4vY2xpZW50X2NvbmZpZ19nZW5lcmF0b3IuanMnO1xuaW1wb3J0IHsgU3RvcmFnZUNsaWVudENvbmZpZ0NvbnRyaWJ1dG9yIH0gZnJvbSAnLi9jbGllbnQtY29uZmlnLWNvbnRyaWJ1dG9yL3N0b3JhZ2VfY2xpZW50X2NvbmZpZ19jb250cmlidXRvci5qcyc7XG5pbXBvcnQgeyBCYWNrZW5kT3V0cHV0IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5pbXBvcnQgeyBBd3NDcmVkZW50aWFsSWRlbnRpdHlQcm92aWRlciB9IGZyb20gJ0Bhd3Mtc2RrL3R5cGVzJztcbmltcG9ydCB7IE1vZGVsSW50cm9zcGVjdGlvblNjaGVtYUFkYXB0ZXIgfSBmcm9tICcuL2NsaWVudC1jb25maWctY29udHJpYnV0b3IvbW9kZWxfaW50cm9zcGVjdGlvbl9zY2hlbWFfYWRhcGF0ZXIuanMnO1xuaW1wb3J0IHsgUGxhdGZvcm1DbGllbnRDb25maWdDb250cmlidXRvciB9IGZyb20gJy4vY2xpZW50LWNvbmZpZy1jb250cmlidXRvci9wbGF0Zm9ybV9jbGllbnRfY29uZmlnX2NvbnRyaWJ1dG9yLmpzJztcbmltcG9ydCB7IEN1c3RvbUNsaWVudENvbmZpZ0NvbnRyaWJ1dG9yIH0gZnJvbSAnLi9jbGllbnQtY29uZmlnLWNvbnRyaWJ1dG9yL2N1c3RvbV9jbGllbnRfY29uZmlnX2NvbnRyaWJ1dG9yLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIENsaWVudENvbmZpZ0dlbmVyYXRvcnMgZ2l2ZW4gZGlmZmVyZW50IGJhY2tlbmQgaWRlbnRpZmllcnNcbiAqL1xuZXhwb3J0IGNsYXNzIENsaWVudENvbmZpZ0dlbmVyYXRvckZhY3Rvcnkge1xuICAvKipcbiAgICogUHJvdmlkZSB0aGUgZmFjdG9yeSB3aXRoIEFXUyBjcmVkZW50aWFscy4gVGhlc2UgY3JlZGVudGlhbHMgd2lsbCBiZSB1c2VkIHRvIGNvbmZpZ3VyZSB1bmRlcmx5aW5nIFNESyBjbGllbnRzIGZvciByZXNvbHZpbmcgYmFja2VuZCBvdXRwdXQuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGZldGNoT3V0cHV0OiAoKSA9PiBQcm9taXNlPEJhY2tlbmRPdXRwdXQ+KSB7fVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgQ2xpZW50Q29uZmlnR2VuZXJhdG9yIGZvciB0aGUgZ2l2ZW4gQmFja2VuZElkZW50aWZpZXIgdHlwZVxuICAgKi9cbiAgZ2V0SW5zdGFuY2UgPSAoXG4gICAgY3JlZGVudGlhbFByb3ZpZGVyOiBBd3NDcmVkZW50aWFsSWRlbnRpdHlQcm92aWRlclxuICApOiBDbGllbnRDb25maWdHZW5lcmF0b3IgPT4ge1xuICAgIGNvbnN0IG1vZGVsU2NoZW1hQWRhcHRlciA9IG5ldyBNb2RlbEludHJvc3BlY3Rpb25TY2hlbWFBZGFwdGVyKFxuICAgICAgY3JlZGVudGlhbFByb3ZpZGVyXG4gICAgKTtcblxuICAgIHJldHVybiBuZXcgVW5pZmllZENsaWVudENvbmZpZ0dlbmVyYXRvcih0aGlzLmZldGNoT3V0cHV0LCBbXG4gICAgICBuZXcgUGxhdGZvcm1DbGllbnRDb25maWdDb250cmlidXRvcigpLFxuICAgICAgbmV3IEF1dGhDbGllbnRDb25maWdDb250cmlidXRvcigpLFxuICAgICAgbmV3IEdyYXBocWxDbGllbnRDb25maWdDb250cmlidXRvcihtb2RlbFNjaGVtYUFkYXB0ZXIpLFxuICAgICAgbmV3IFN0b3JhZ2VDbGllbnRDb25maWdDb250cmlidXRvcigpLFxuICAgICAgLy8gQ3VzdG9tIGNsaWVudCBjb25maWcgY29udHJpYnV0b3IgbXVzdCBiZSBsYXN0IGluIHRoZSBwaXBlbGluZVxuICAgICAgLy8gYXMgaXQgaGFzIGNhcGFiaWxpdHkgb2Ygb3ZlcnJpZGluZyBwcmV2aW91c2x5IGRlZmluZWQgcHJvcGVydGllcy5cbiAgICAgIG5ldyBDdXN0b21DbGllbnRDb25maWdDb250cmlidXRvcigpLFxuICAgIF0pO1xuICB9O1xufVxuIl19