import { authOutputKey, } from '@aws-amplify/backend-output-schemas';
/**
 * Translator for the Auth portion of ClientConfig
 */
export class AuthClientConfigContributor {
    /**
     * Given some BackendOutput, contribute the Auth portion of the ClientConfig
     */
    contribute = ({ [authOutputKey]: authOutput, }) => {
        if (authOutput === undefined) {
            return {};
        }
        const parseAndAssignObject = (obj, key, value) => {
            if (value == null) {
                return;
            }
            obj[key] = JSON.parse(value);
        };
        const authClientConfig = {
            aws_user_pools_id: authOutput.payload.userPoolId,
            aws_cognito_region: authOutput.payload.authRegion,
            aws_user_pools_web_client_id: authOutput.payload.webClientId,
            aws_cognito_identity_pool_id: authOutput.payload.identityPoolId,
        };
        if (authOutput.payload.allowUnauthenticatedIdentities !== undefined) {
            authClientConfig.allowUnauthenticatedIdentities =
                authOutput.payload.allowUnauthenticatedIdentities;
        }
        parseAndAssignObject(authClientConfig, 'aws_cognito_mfa_types', authOutput.payload.mfaTypes);
        parseAndAssignObject(authClientConfig, 'aws_cognito_signup_attributes', authOutput.payload.signupAttributes);
        parseAndAssignObject(authClientConfig, 'aws_cognito_username_attributes', authOutput.payload.usernameAttributes);
        parseAndAssignObject(authClientConfig, 'aws_cognito_verification_mechanisms', authOutput.payload.verificationMechanisms);
        if (authOutput.payload.mfaConfiguration) {
            authClientConfig.aws_cognito_mfa_configuration =
                authOutput.payload.mfaConfiguration;
        }
        if (authOutput.payload.passwordPolicyMinLength) {
            authClientConfig.aws_cognito_password_protection_settings = {
                passwordPolicyMinLength: Number.parseInt(authOutput.payload.passwordPolicyMinLength),
            };
            parseAndAssignObject(authClientConfig.aws_cognito_password_protection_settings, 'passwordPolicyCharacters', authOutput.payload.passwordPolicyRequirements);
        }
        if (authOutput.payload.socialProviders) {
            parseAndAssignObject(authClientConfig, 'aws_cognito_social_providers', authOutput.payload.socialProviders);
        }
        if (authOutput.payload.oauthClientId) {
            authClientConfig.oauth = {};
            if (authOutput.payload.oauthDomain) {
                authClientConfig.oauth.domain = authOutput.payload.oauthDomain;
            }
            parseAndAssignObject(authClientConfig.oauth, 'scope', authOutput.payload.oauthScope);
            authClientConfig.oauth.redirectSignIn =
                authOutput.payload.oauthRedirectSignIn;
            authClientConfig.oauth.redirectSignOut =
                authOutput.payload.oauthRedirectSignOut;
            authClientConfig.oauth.clientId = authOutput.payload.oauthClientId;
            authClientConfig.oauth.responseType =
                authOutput.payload.oauthResponseType;
        }
        return authClientConfig;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aF9jbGllbnRfY29uZmlnX2NvbnRyaWJ1dG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NsaWVudC1jb25maWctY29udHJpYnV0b3IvYXV0aF9jbGllbnRfY29uZmlnX2NvbnRyaWJ1dG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFFTCxhQUFhLEdBQ2QsTUFBTSxxQ0FBcUMsQ0FBQztBQUc3Qzs7R0FFRztBQUNILE1BQU0sT0FBTywyQkFBMkI7SUFDdEM7O09BRUc7SUFDSCxVQUFVLEdBQUcsQ0FBQyxFQUNaLENBQUMsYUFBYSxDQUFDLEVBQUUsVUFBVSxHQUNOLEVBQTRDLEVBQUU7UUFDbkUsSUFBSSxVQUFVLEtBQUssU0FBUyxFQUFFO1lBQzVCLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFDRCxNQUFNLG9CQUFvQixHQUFHLENBQzNCLEdBQU0sRUFDTixHQUFZLEVBQ1osS0FBeUIsRUFDekIsRUFBRTtZQUNGLElBQUksS0FBSyxJQUFJLElBQUksRUFBRTtnQkFDakIsT0FBTzthQUNSO1lBQ0QsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDO1FBRUYsTUFBTSxnQkFBZ0IsR0FBNkM7WUFDakUsaUJBQWlCLEVBQUUsVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFVO1lBQ2hELGtCQUFrQixFQUFFLFVBQVUsQ0FBQyxPQUFPLENBQUMsVUFBVTtZQUNqRCw0QkFBNEIsRUFBRSxVQUFVLENBQUMsT0FBTyxDQUFDLFdBQVc7WUFDNUQsNEJBQTRCLEVBQUUsVUFBVSxDQUFDLE9BQU8sQ0FBQyxjQUFjO1NBQ2hFLENBQUM7UUFDRixJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsOEJBQThCLEtBQUssU0FBUyxFQUFFO1lBQ25FLGdCQUFnQixDQUFDLDhCQUE4QjtnQkFDN0MsVUFBVSxDQUFDLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQztTQUNyRDtRQUVELG9CQUFvQixDQUNsQixnQkFBZ0IsRUFDaEIsdUJBQXVCLEVBQ3ZCLFVBQVUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUM1QixDQUFDO1FBQ0Ysb0JBQW9CLENBQ2xCLGdCQUFnQixFQUNoQiwrQkFBK0IsRUFDL0IsVUFBVSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FDcEMsQ0FBQztRQUNGLG9CQUFvQixDQUNsQixnQkFBZ0IsRUFDaEIsaUNBQWlDLEVBQ2pDLFVBQVUsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQ3RDLENBQUM7UUFDRixvQkFBb0IsQ0FDbEIsZ0JBQWdCLEVBQ2hCLHFDQUFxQyxFQUNyQyxVQUFVLENBQUMsT0FBTyxDQUFDLHNCQUFzQixDQUMxQyxDQUFDO1FBRUYsSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFO1lBQ3ZDLGdCQUFnQixDQUFDLDZCQUE2QjtnQkFDNUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztTQUN2QztRQUVELElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsRUFBRTtZQUM5QyxnQkFBZ0IsQ0FBQyx3Q0FBd0MsR0FBRztnQkFDMUQsdUJBQXVCLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FDdEMsVUFBVSxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FDM0M7YUFDRixDQUFDO1lBQ0Ysb0JBQW9CLENBQ2xCLGdCQUFnQixDQUFDLHdDQUF3QyxFQUN6RCwwQkFBMEIsRUFDMUIsVUFBVSxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsQ0FDOUMsQ0FBQztTQUNIO1FBRUQsSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRTtZQUN0QyxvQkFBb0IsQ0FDbEIsZ0JBQWdCLEVBQ2hCLDhCQUE4QixFQUM5QixVQUFVLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FDbkMsQ0FBQztTQUNIO1FBRUQsSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRTtZQUNwQyxnQkFBZ0IsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1lBQzVCLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUU7Z0JBQ2xDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUM7YUFDaEU7WUFDRCxvQkFBb0IsQ0FDbEIsZ0JBQWdCLENBQUMsS0FBSyxFQUN0QixPQUFPLEVBQ1AsVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQzlCLENBQUM7WUFDRixnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsY0FBYztnQkFDbkMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQztZQUN6QyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsZUFBZTtnQkFDcEMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQztZQUMxQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO1lBQ25FLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxZQUFZO2dCQUNqQyxVQUFVLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDO1NBQ3hDO1FBQ0QsT0FBTyxnQkFBZ0IsQ0FBQztJQUMxQixDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENsaWVudENvbmZpZ0NvbnRyaWJ1dG9yIH0gZnJvbSAnLi9jbGllbnRfY29uZmlnX2NvbnRyaWJ1dG9yLmpzJztcbmltcG9ydCB7XG4gIFVuaWZpZWRCYWNrZW5kT3V0cHV0LFxuICBhdXRoT3V0cHV0S2V5LFxufSBmcm9tICdAYXdzLWFtcGxpZnkvYmFja2VuZC1vdXRwdXQtc2NoZW1hcyc7XG5pbXBvcnQgeyBBdXRoQ2xpZW50Q29uZmlnIH0gZnJvbSAnLi4vY2xpZW50LWNvbmZpZy10eXBlcy9hdXRoX2NsaWVudF9jb25maWcuanMnO1xuXG4vKipcbiAqIFRyYW5zbGF0b3IgZm9yIHRoZSBBdXRoIHBvcnRpb24gb2YgQ2xpZW50Q29uZmlnXG4gKi9cbmV4cG9ydCBjbGFzcyBBdXRoQ2xpZW50Q29uZmlnQ29udHJpYnV0b3IgaW1wbGVtZW50cyBDbGllbnRDb25maWdDb250cmlidXRvciB7XG4gIC8qKlxuICAgKiBHaXZlbiBzb21lIEJhY2tlbmRPdXRwdXQsIGNvbnRyaWJ1dGUgdGhlIEF1dGggcG9ydGlvbiBvZiB0aGUgQ2xpZW50Q29uZmlnXG4gICAqL1xuICBjb250cmlidXRlID0gKHtcbiAgICBbYXV0aE91dHB1dEtleV06IGF1dGhPdXRwdXQsXG4gIH06IFVuaWZpZWRCYWNrZW5kT3V0cHV0KTogQXV0aENsaWVudENvbmZpZyB8IFJlY29yZDxzdHJpbmcsIG5ldmVyPiA9PiB7XG4gICAgaWYgKGF1dGhPdXRwdXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBjb25zdCBwYXJzZUFuZEFzc2lnbk9iamVjdCA9IDxUPihcbiAgICAgIG9iajogVCxcbiAgICAgIGtleToga2V5b2YgVCxcbiAgICAgIHZhbHVlOiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgICApID0+IHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG9ialtrZXldID0gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGF1dGhDbGllbnRDb25maWc6IEF1dGhDbGllbnRDb25maWcgfCBSZWNvcmQ8c3RyaW5nLCBuZXZlcj4gPSB7XG4gICAgICBhd3NfdXNlcl9wb29sc19pZDogYXV0aE91dHB1dC5wYXlsb2FkLnVzZXJQb29sSWQsXG4gICAgICBhd3NfY29nbml0b19yZWdpb246IGF1dGhPdXRwdXQucGF5bG9hZC5hdXRoUmVnaW9uLFxuICAgICAgYXdzX3VzZXJfcG9vbHNfd2ViX2NsaWVudF9pZDogYXV0aE91dHB1dC5wYXlsb2FkLndlYkNsaWVudElkLFxuICAgICAgYXdzX2NvZ25pdG9faWRlbnRpdHlfcG9vbF9pZDogYXV0aE91dHB1dC5wYXlsb2FkLmlkZW50aXR5UG9vbElkLFxuICAgIH07XG4gICAgaWYgKGF1dGhPdXRwdXQucGF5bG9hZC5hbGxvd1VuYXV0aGVudGljYXRlZElkZW50aXRpZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgYXV0aENsaWVudENvbmZpZy5hbGxvd1VuYXV0aGVudGljYXRlZElkZW50aXRpZXMgPVxuICAgICAgICBhdXRoT3V0cHV0LnBheWxvYWQuYWxsb3dVbmF1dGhlbnRpY2F0ZWRJZGVudGl0aWVzO1xuICAgIH1cblxuICAgIHBhcnNlQW5kQXNzaWduT2JqZWN0KFxuICAgICAgYXV0aENsaWVudENvbmZpZyxcbiAgICAgICdhd3NfY29nbml0b19tZmFfdHlwZXMnLFxuICAgICAgYXV0aE91dHB1dC5wYXlsb2FkLm1mYVR5cGVzXG4gICAgKTtcbiAgICBwYXJzZUFuZEFzc2lnbk9iamVjdChcbiAgICAgIGF1dGhDbGllbnRDb25maWcsXG4gICAgICAnYXdzX2NvZ25pdG9fc2lnbnVwX2F0dHJpYnV0ZXMnLFxuICAgICAgYXV0aE91dHB1dC5wYXlsb2FkLnNpZ251cEF0dHJpYnV0ZXNcbiAgICApO1xuICAgIHBhcnNlQW5kQXNzaWduT2JqZWN0KFxuICAgICAgYXV0aENsaWVudENvbmZpZyxcbiAgICAgICdhd3NfY29nbml0b191c2VybmFtZV9hdHRyaWJ1dGVzJyxcbiAgICAgIGF1dGhPdXRwdXQucGF5bG9hZC51c2VybmFtZUF0dHJpYnV0ZXNcbiAgICApO1xuICAgIHBhcnNlQW5kQXNzaWduT2JqZWN0KFxuICAgICAgYXV0aENsaWVudENvbmZpZyxcbiAgICAgICdhd3NfY29nbml0b192ZXJpZmljYXRpb25fbWVjaGFuaXNtcycsXG4gICAgICBhdXRoT3V0cHV0LnBheWxvYWQudmVyaWZpY2F0aW9uTWVjaGFuaXNtc1xuICAgICk7XG5cbiAgICBpZiAoYXV0aE91dHB1dC5wYXlsb2FkLm1mYUNvbmZpZ3VyYXRpb24pIHtcbiAgICAgIGF1dGhDbGllbnRDb25maWcuYXdzX2NvZ25pdG9fbWZhX2NvbmZpZ3VyYXRpb24gPVxuICAgICAgICBhdXRoT3V0cHV0LnBheWxvYWQubWZhQ29uZmlndXJhdGlvbjtcbiAgICB9XG5cbiAgICBpZiAoYXV0aE91dHB1dC5wYXlsb2FkLnBhc3N3b3JkUG9saWN5TWluTGVuZ3RoKSB7XG4gICAgICBhdXRoQ2xpZW50Q29uZmlnLmF3c19jb2duaXRvX3Bhc3N3b3JkX3Byb3RlY3Rpb25fc2V0dGluZ3MgPSB7XG4gICAgICAgIHBhc3N3b3JkUG9saWN5TWluTGVuZ3RoOiBOdW1iZXIucGFyc2VJbnQoXG4gICAgICAgICAgYXV0aE91dHB1dC5wYXlsb2FkLnBhc3N3b3JkUG9saWN5TWluTGVuZ3RoXG4gICAgICAgICksXG4gICAgICB9O1xuICAgICAgcGFyc2VBbmRBc3NpZ25PYmplY3QoXG4gICAgICAgIGF1dGhDbGllbnRDb25maWcuYXdzX2NvZ25pdG9fcGFzc3dvcmRfcHJvdGVjdGlvbl9zZXR0aW5ncyxcbiAgICAgICAgJ3Bhc3N3b3JkUG9saWN5Q2hhcmFjdGVycycsXG4gICAgICAgIGF1dGhPdXRwdXQucGF5bG9hZC5wYXNzd29yZFBvbGljeVJlcXVpcmVtZW50c1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoYXV0aE91dHB1dC5wYXlsb2FkLnNvY2lhbFByb3ZpZGVycykge1xuICAgICAgcGFyc2VBbmRBc3NpZ25PYmplY3QoXG4gICAgICAgIGF1dGhDbGllbnRDb25maWcsXG4gICAgICAgICdhd3NfY29nbml0b19zb2NpYWxfcHJvdmlkZXJzJyxcbiAgICAgICAgYXV0aE91dHB1dC5wYXlsb2FkLnNvY2lhbFByb3ZpZGVyc1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoYXV0aE91dHB1dC5wYXlsb2FkLm9hdXRoQ2xpZW50SWQpIHtcbiAgICAgIGF1dGhDbGllbnRDb25maWcub2F1dGggPSB7fTtcbiAgICAgIGlmIChhdXRoT3V0cHV0LnBheWxvYWQub2F1dGhEb21haW4pIHtcbiAgICAgICAgYXV0aENsaWVudENvbmZpZy5vYXV0aC5kb21haW4gPSBhdXRoT3V0cHV0LnBheWxvYWQub2F1dGhEb21haW47XG4gICAgICB9XG4gICAgICBwYXJzZUFuZEFzc2lnbk9iamVjdChcbiAgICAgICAgYXV0aENsaWVudENvbmZpZy5vYXV0aCxcbiAgICAgICAgJ3Njb3BlJyxcbiAgICAgICAgYXV0aE91dHB1dC5wYXlsb2FkLm9hdXRoU2NvcGVcbiAgICAgICk7XG4gICAgICBhdXRoQ2xpZW50Q29uZmlnLm9hdXRoLnJlZGlyZWN0U2lnbkluID1cbiAgICAgICAgYXV0aE91dHB1dC5wYXlsb2FkLm9hdXRoUmVkaXJlY3RTaWduSW47XG4gICAgICBhdXRoQ2xpZW50Q29uZmlnLm9hdXRoLnJlZGlyZWN0U2lnbk91dCA9XG4gICAgICAgIGF1dGhPdXRwdXQucGF5bG9hZC5vYXV0aFJlZGlyZWN0U2lnbk91dDtcbiAgICAgIGF1dGhDbGllbnRDb25maWcub2F1dGguY2xpZW50SWQgPSBhdXRoT3V0cHV0LnBheWxvYWQub2F1dGhDbGllbnRJZDtcbiAgICAgIGF1dGhDbGllbnRDb25maWcub2F1dGgucmVzcG9uc2VUeXBlID1cbiAgICAgICAgYXV0aE91dHB1dC5wYXlsb2FkLm9hdXRoUmVzcG9uc2VUeXBlO1xuICAgIH1cbiAgICByZXR1cm4gYXV0aENsaWVudENvbmZpZztcbiAgfTtcbn1cbiJdfQ==