import { unifiedBackendOutputSchema } from '@aws-amplify/backend-output-schemas';
import { AmplifyUserError, ObjectAccumulator, ObjectAccumulatorPropertyAlreadyExistsError, } from '@aws-amplify/platform-core';
/**
 * Right now this is mostly a stub. This will become a translation layer between backend output and frontend config
 *
 * There may be multiple implementations of this for different frontends
 */
export class UnifiedClientConfigGenerator {
    fetchOutput;
    clientConfigContributors;
    /**
     * Provide a reference to how this config generator should retrieve backend output
     */
    constructor(fetchOutput, clientConfigContributors) {
        this.fetchOutput = fetchOutput;
        this.clientConfigContributors = clientConfigContributors;
    }
    /**
     * Fetch all backend output, invoke each ClientConfigContributor on the result and merge into a single config object
     */
    generateClientConfig = async () => {
        const backendOutput = unifiedBackendOutputSchema.parse(await this.fetchOutput());
        const accumulator = new ObjectAccumulator({});
        for (const contributor of this.clientConfigContributors) {
            const clientConfigContribution = await contributor.contribute(backendOutput);
            try {
                accumulator.accumulate(clientConfigContribution);
            }
            catch (error) {
                if (error instanceof ObjectAccumulatorPropertyAlreadyExistsError) {
                    throw new AmplifyUserError('OutputEntryAlreadyExistsError', {
                        message: `Duplicated entry with key ${error.key} detected in deployment outputs`,
                        resolution: "Check if 'backend.addOutput' is called multiple times with overlapping inputs or" +
                            " if 'backend.addOutput' is called with values overlapping Amplify managed keys",
                    }, error);
                }
                throw error;
            }
        }
        return accumulator.getAccumulatedObject();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pZmllZF9jbGllbnRfY29uZmlnX2dlbmVyYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91bmlmaWVkX2NsaWVudF9jb25maWdfZ2VuZXJhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBSWpGLE9BQU8sRUFDTCxnQkFBZ0IsRUFDaEIsaUJBQWlCLEVBQ2pCLDJDQUEyQyxHQUM1QyxNQUFNLDRCQUE0QixDQUFDO0FBRXBDOzs7O0dBSUc7QUFDSCxNQUFNLE9BQU8sNEJBQTRCO0lBS3BCO0lBQ0E7SUFMbkI7O09BRUc7SUFDSCxZQUNtQixXQUF5QyxFQUN6Qyx3QkFBbUQ7UUFEbkQsZ0JBQVcsR0FBWCxXQUFXLENBQThCO1FBQ3pDLDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBMkI7SUFDbkUsQ0FBQztJQUVKOztPQUVHO0lBQ0gsb0JBQW9CLEdBQUcsS0FBSyxJQUEyQixFQUFFO1FBQ3ZELE1BQU0sYUFBYSxHQUFHLDBCQUEwQixDQUFDLEtBQUssQ0FDcEQsTUFBTSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQ3pCLENBQUM7UUFFRixNQUFNLFdBQVcsR0FBRyxJQUFJLGlCQUFpQixDQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQzVELEtBQUssTUFBTSxXQUFXLElBQUksSUFBSSxDQUFDLHdCQUF3QixFQUFFO1lBQ3ZELE1BQU0sd0JBQXdCLEdBQUcsTUFBTSxXQUFXLENBQUMsVUFBVSxDQUMzRCxhQUFhLENBQ2QsQ0FBQztZQUNGLElBQUk7Z0JBQ0YsV0FBVyxDQUFDLFVBQVUsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO2FBQ2xEO1lBQUMsT0FBTyxLQUFLLEVBQUU7Z0JBQ2QsSUFBSSxLQUFLLFlBQVksMkNBQTJDLEVBQUU7b0JBQ2hFLE1BQU0sSUFBSSxnQkFBZ0IsQ0FDeEIsK0JBQStCLEVBQy9CO3dCQUNFLE9BQU8sRUFBRSw2QkFBNkIsS0FBSyxDQUFDLEdBQUcsaUNBQWlDO3dCQUNoRixVQUFVLEVBQ1Isa0ZBQWtGOzRCQUNsRixnRkFBZ0Y7cUJBQ25GLEVBQ0QsS0FBSyxDQUNOLENBQUM7aUJBQ0g7Z0JBQ0QsTUFBTSxLQUFLLENBQUM7YUFDYjtTQUNGO1FBQ0QsT0FBTyxXQUFXLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztJQUM1QyxDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhY2tlbmRPdXRwdXQgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCB7IHVuaWZpZWRCYWNrZW5kT3V0cHV0U2NoZW1hIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtb3V0cHV0LXNjaGVtYXMnO1xuaW1wb3J0IHsgQ2xpZW50Q29uZmlnIH0gZnJvbSAnLi9jbGllbnQtY29uZmlnLXR5cGVzL2NsaWVudF9jb25maWcuanMnO1xuaW1wb3J0IHsgQ2xpZW50Q29uZmlnQ29udHJpYnV0b3IgfSBmcm9tICcuL2NsaWVudC1jb25maWctY29udHJpYnV0b3IvY2xpZW50X2NvbmZpZ19jb250cmlidXRvci5qcyc7XG5pbXBvcnQgeyBDbGllbnRDb25maWdHZW5lcmF0b3IgfSBmcm9tICcuL2NsaWVudF9jb25maWdfZ2VuZXJhdG9yLmpzJztcbmltcG9ydCB7XG4gIEFtcGxpZnlVc2VyRXJyb3IsXG4gIE9iamVjdEFjY3VtdWxhdG9yLFxuICBPYmplY3RBY2N1bXVsYXRvclByb3BlcnR5QWxyZWFkeUV4aXN0c0Vycm9yLFxufSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5cbi8qKlxuICogUmlnaHQgbm93IHRoaXMgaXMgbW9zdGx5IGEgc3R1Yi4gVGhpcyB3aWxsIGJlY29tZSBhIHRyYW5zbGF0aW9uIGxheWVyIGJldHdlZW4gYmFja2VuZCBvdXRwdXQgYW5kIGZyb250ZW5kIGNvbmZpZ1xuICpcbiAqIFRoZXJlIG1heSBiZSBtdWx0aXBsZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhpcyBmb3IgZGlmZmVyZW50IGZyb250ZW5kc1xuICovXG5leHBvcnQgY2xhc3MgVW5pZmllZENsaWVudENvbmZpZ0dlbmVyYXRvciBpbXBsZW1lbnRzIENsaWVudENvbmZpZ0dlbmVyYXRvciB7XG4gIC8qKlxuICAgKiBQcm92aWRlIGEgcmVmZXJlbmNlIHRvIGhvdyB0aGlzIGNvbmZpZyBnZW5lcmF0b3Igc2hvdWxkIHJldHJpZXZlIGJhY2tlbmQgb3V0cHV0XG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IGZldGNoT3V0cHV0OiAoKSA9PiBQcm9taXNlPEJhY2tlbmRPdXRwdXQ+LFxuICAgIHByaXZhdGUgcmVhZG9ubHkgY2xpZW50Q29uZmlnQ29udHJpYnV0b3JzOiBDbGllbnRDb25maWdDb250cmlidXRvcltdXG4gICkge31cblxuICAvKipcbiAgICogRmV0Y2ggYWxsIGJhY2tlbmQgb3V0cHV0LCBpbnZva2UgZWFjaCBDbGllbnRDb25maWdDb250cmlidXRvciBvbiB0aGUgcmVzdWx0IGFuZCBtZXJnZSBpbnRvIGEgc2luZ2xlIGNvbmZpZyBvYmplY3RcbiAgICovXG4gIGdlbmVyYXRlQ2xpZW50Q29uZmlnID0gYXN5bmMgKCk6IFByb21pc2U8Q2xpZW50Q29uZmlnPiA9PiB7XG4gICAgY29uc3QgYmFja2VuZE91dHB1dCA9IHVuaWZpZWRCYWNrZW5kT3V0cHV0U2NoZW1hLnBhcnNlKFxuICAgICAgYXdhaXQgdGhpcy5mZXRjaE91dHB1dCgpXG4gICAgKTtcblxuICAgIGNvbnN0IGFjY3VtdWxhdG9yID0gbmV3IE9iamVjdEFjY3VtdWxhdG9yPENsaWVudENvbmZpZz4oe30pO1xuICAgIGZvciAoY29uc3QgY29udHJpYnV0b3Igb2YgdGhpcy5jbGllbnRDb25maWdDb250cmlidXRvcnMpIHtcbiAgICAgIGNvbnN0IGNsaWVudENvbmZpZ0NvbnRyaWJ1dGlvbiA9IGF3YWl0IGNvbnRyaWJ1dG9yLmNvbnRyaWJ1dGUoXG4gICAgICAgIGJhY2tlbmRPdXRwdXRcbiAgICAgICk7XG4gICAgICB0cnkge1xuICAgICAgICBhY2N1bXVsYXRvci5hY2N1bXVsYXRlKGNsaWVudENvbmZpZ0NvbnRyaWJ1dGlvbik7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBPYmplY3RBY2N1bXVsYXRvclByb3BlcnR5QWxyZWFkeUV4aXN0c0Vycm9yKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3IoXG4gICAgICAgICAgICAnT3V0cHV0RW50cnlBbHJlYWR5RXhpc3RzRXJyb3InLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBtZXNzYWdlOiBgRHVwbGljYXRlZCBlbnRyeSB3aXRoIGtleSAke2Vycm9yLmtleX0gZGV0ZWN0ZWQgaW4gZGVwbG95bWVudCBvdXRwdXRzYCxcbiAgICAgICAgICAgICAgcmVzb2x1dGlvbjpcbiAgICAgICAgICAgICAgICBcIkNoZWNrIGlmICdiYWNrZW5kLmFkZE91dHB1dCcgaXMgY2FsbGVkIG11bHRpcGxlIHRpbWVzIHdpdGggb3ZlcmxhcHBpbmcgaW5wdXRzIG9yXCIgK1xuICAgICAgICAgICAgICAgIFwiIGlmICdiYWNrZW5kLmFkZE91dHB1dCcgaXMgY2FsbGVkIHdpdGggdmFsdWVzIG92ZXJsYXBwaW5nIEFtcGxpZnkgbWFuYWdlZCBrZXlzXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3IuZ2V0QWNjdW11bGF0ZWRPYmplY3QoKTtcbiAgfTtcbn1cbiJdfQ==