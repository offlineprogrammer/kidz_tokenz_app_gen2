import { generateClientConfig } from './generate_client_config.js';
import { ClientConfigWriter } from './client-config-writer/client_config_writer.js';
import { getClientConfigPath } from './paths/index.js';
import { ClientConfigFormatter } from './client-config-writer/client_config_formatter.js';
import { ClientConfigConverter } from './client-config-writer/client_config_converter.js';
import { fileURLToPath } from 'url';
import * as fsp from 'fs/promises';
/**
 * Main entry point for generating client config and writing to a file
 */
export const generateClientConfigToFile = async (credentialProvider, backendIdentifier, outDir, format, 
// TODO: update this type when Printer interface gets defined in platform-core.
log) => {
    const packageJson = await readPackageJson();
    const clientConfigWriter = new ClientConfigWriter(getClientConfigPath, new ClientConfigFormatter(new ClientConfigConverter(packageJson.name, packageJson.version)));
    const clientConfig = await generateClientConfig(credentialProvider, backendIdentifier);
    await clientConfigWriter.writeClientConfig(clientConfig, outDir, format, log);
};
const readPackageJson = async () => {
    const packageJsonPath = fileURLToPath(new URL('../package.json', import.meta.url));
    return JSON.parse(await fsp.readFile(packageJsonPath, 'utf-8'));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVfY2xpZW50X2NvbmZpZ190b19maWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2dlbmVyYXRlX2NsaWVudF9jb25maWdfdG9fZmlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNuRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUVwRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUV2RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUMxRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUMxRixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBQ3BDLE9BQU8sS0FBSyxHQUFHLE1BQU0sYUFBYSxDQUFDO0FBRW5DOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsS0FBSyxFQUM3QyxrQkFBaUQsRUFDakQsaUJBQTRDLEVBQzVDLE1BQWUsRUFDZixNQUEyQjtBQUMzQiwrRUFBK0U7QUFDL0UsR0FBK0IsRUFDaEIsRUFBRTtJQUNqQixNQUFNLFdBQVcsR0FBRyxNQUFNLGVBQWUsRUFBRSxDQUFDO0lBRTVDLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxrQkFBa0IsQ0FDL0MsbUJBQW1CLEVBQ25CLElBQUkscUJBQXFCLENBQ3ZCLElBQUkscUJBQXFCLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsT0FBTyxDQUFDLENBQ2pFLENBQ0YsQ0FBQztJQUVGLE1BQU0sWUFBWSxHQUFHLE1BQU0sb0JBQW9CLENBQzdDLGtCQUFrQixFQUNsQixpQkFBaUIsQ0FDbEIsQ0FBQztJQUNGLE1BQU0sa0JBQWtCLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDaEYsQ0FBQyxDQUFDO0FBRUYsTUFBTSxlQUFlLEdBQUcsS0FBSyxJQUcxQixFQUFFO0lBQ0gsTUFBTSxlQUFlLEdBQUcsYUFBYSxDQUNuQyxJQUFJLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUM1QyxDQUFDO0lBQ0YsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLFFBQVEsQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUNsRSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBd3NDcmVkZW50aWFsSWRlbnRpdHlQcm92aWRlciB9IGZyb20gJ0Bhd3Mtc2RrL3R5cGVzJztcbmltcG9ydCB7IGdlbmVyYXRlQ2xpZW50Q29uZmlnIH0gZnJvbSAnLi9nZW5lcmF0ZV9jbGllbnRfY29uZmlnLmpzJztcbmltcG9ydCB7IENsaWVudENvbmZpZ1dyaXRlciB9IGZyb20gJy4vY2xpZW50LWNvbmZpZy13cml0ZXIvY2xpZW50X2NvbmZpZ193cml0ZXIuanMnO1xuaW1wb3J0IHsgQ2xpZW50Q29uZmlnRm9ybWF0IH0gZnJvbSAnLi9jbGllbnQtY29uZmlnLXR5cGVzL2NsaWVudF9jb25maWcuanMnO1xuaW1wb3J0IHsgZ2V0Q2xpZW50Q29uZmlnUGF0aCB9IGZyb20gJy4vcGF0aHMvaW5kZXguanMnO1xuaW1wb3J0IHsgRGVwbG95ZWRCYWNrZW5kSWRlbnRpZmllciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9kZXBsb3llZC1iYWNrZW5kLWNsaWVudCc7XG5pbXBvcnQgeyBDbGllbnRDb25maWdGb3JtYXR0ZXIgfSBmcm9tICcuL2NsaWVudC1jb25maWctd3JpdGVyL2NsaWVudF9jb25maWdfZm9ybWF0dGVyLmpzJztcbmltcG9ydCB7IENsaWVudENvbmZpZ0NvbnZlcnRlciB9IGZyb20gJy4vY2xpZW50LWNvbmZpZy13cml0ZXIvY2xpZW50X2NvbmZpZ19jb252ZXJ0ZXIuanMnO1xuaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gJ3VybCc7XG5pbXBvcnQgKiBhcyBmc3AgZnJvbSAnZnMvcHJvbWlzZXMnO1xuXG4vKipcbiAqIE1haW4gZW50cnkgcG9pbnQgZm9yIGdlbmVyYXRpbmcgY2xpZW50IGNvbmZpZyBhbmQgd3JpdGluZyB0byBhIGZpbGVcbiAqL1xuZXhwb3J0IGNvbnN0IGdlbmVyYXRlQ2xpZW50Q29uZmlnVG9GaWxlID0gYXN5bmMgKFxuICBjcmVkZW50aWFsUHJvdmlkZXI6IEF3c0NyZWRlbnRpYWxJZGVudGl0eVByb3ZpZGVyLFxuICBiYWNrZW5kSWRlbnRpZmllcjogRGVwbG95ZWRCYWNrZW5kSWRlbnRpZmllcixcbiAgb3V0RGlyPzogc3RyaW5nLFxuICBmb3JtYXQ/OiBDbGllbnRDb25maWdGb3JtYXQsXG4gIC8vIFRPRE86IHVwZGF0ZSB0aGlzIHR5cGUgd2hlbiBQcmludGVyIGludGVyZmFjZSBnZXRzIGRlZmluZWQgaW4gcGxhdGZvcm0tY29yZS5cbiAgbG9nPzogKG1lc3NhZ2U6IHN0cmluZykgPT4gdm9pZFxuKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGNvbnN0IHBhY2thZ2VKc29uID0gYXdhaXQgcmVhZFBhY2thZ2VKc29uKCk7XG5cbiAgY29uc3QgY2xpZW50Q29uZmlnV3JpdGVyID0gbmV3IENsaWVudENvbmZpZ1dyaXRlcihcbiAgICBnZXRDbGllbnRDb25maWdQYXRoLFxuICAgIG5ldyBDbGllbnRDb25maWdGb3JtYXR0ZXIoXG4gICAgICBuZXcgQ2xpZW50Q29uZmlnQ29udmVydGVyKHBhY2thZ2VKc29uLm5hbWUsIHBhY2thZ2VKc29uLnZlcnNpb24pXG4gICAgKVxuICApO1xuXG4gIGNvbnN0IGNsaWVudENvbmZpZyA9IGF3YWl0IGdlbmVyYXRlQ2xpZW50Q29uZmlnKFxuICAgIGNyZWRlbnRpYWxQcm92aWRlcixcbiAgICBiYWNrZW5kSWRlbnRpZmllclxuICApO1xuICBhd2FpdCBjbGllbnRDb25maWdXcml0ZXIud3JpdGVDbGllbnRDb25maWcoY2xpZW50Q29uZmlnLCBvdXREaXIsIGZvcm1hdCwgbG9nKTtcbn07XG5cbmNvbnN0IHJlYWRQYWNrYWdlSnNvbiA9IGFzeW5jICgpOiBQcm9taXNlPHtcbiAgbmFtZTogc3RyaW5nO1xuICB2ZXJzaW9uOiBzdHJpbmc7XG59PiA9PiB7XG4gIGNvbnN0IHBhY2thZ2VKc29uUGF0aCA9IGZpbGVVUkxUb1BhdGgoXG4gICAgbmV3IFVSTCgnLi4vcGFja2FnZS5qc29uJywgaW1wb3J0Lm1ldGEudXJsKVxuICApO1xuICByZXR1cm4gSlNPTi5wYXJzZShhd2FpdCBmc3AucmVhZEZpbGUocGFja2FnZUpzb25QYXRoLCAndXRmLTgnKSk7XG59O1xuIl19