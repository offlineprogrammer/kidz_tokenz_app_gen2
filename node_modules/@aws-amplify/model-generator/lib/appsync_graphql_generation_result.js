import fs from 'fs/promises';
import path from 'path';
/**
 * Defines a result for Graphql document generation
 */
export class AppsyncGraphqlGenerationResult {
    operations;
    /**
     * Instantiates an AppsyncGraphqlGenerationResult
     * @param operations A record of FileName to FileContent
     * in the format of Record<string,string>
     */
    constructor(operations) {
        this.operations = operations;
    }
    writeToDirectory = async (directoryPath, 
    // TODO: update this type when Printer interface gets defined in platform-core.
    log) => {
        await Promise.all(Object.entries(this.operations).map(async ([fileName, content]) => {
            await this.writeSchemaToFile(directoryPath, fileName, content).then((filePath) => {
                return log?.(`File written: ${path.relative(process.cwd(), filePath)}`);
            });
        }));
    };
    getResults = async () => {
        return this.operations;
    };
    writeSchemaToFile = async (basePath, filePath, contents) => {
        const absFilePath = path.resolve(path.join(basePath, filePath));
        await fs.mkdir(path.dirname(absFilePath), { recursive: true });
        await fs.writeFile(absFilePath, contents);
        return absFilePath;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwc3luY19ncmFwaHFsX2dlbmVyYXRpb25fcmVzdWx0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2FwcHN5bmNfZ3JhcGhxbF9nZW5lcmF0aW9uX3Jlc3VsdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDN0IsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBSXhCOztHQUVHO0FBQ0gsTUFBTSxPQUFPLDhCQUE4QjtJQU1yQjtJQUxwQjs7OztPQUlHO0lBQ0gsWUFBb0IsVUFBNEI7UUFBNUIsZUFBVSxHQUFWLFVBQVUsQ0FBa0I7SUFBRyxDQUFDO0lBRXBELGdCQUFnQixHQUFHLEtBQUssRUFDdEIsYUFBcUI7SUFDckIsK0VBQStFO0lBQy9FLEdBQStCLEVBQy9CLEVBQUU7UUFDRixNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQ2YsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFO1lBQ2hFLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUNqRSxDQUFDLFFBQWdCLEVBQUUsRUFBRTtnQkFDbkIsT0FBTyxHQUFHLEVBQUUsQ0FDVixpQkFBaUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FDMUQsQ0FBQztZQUNKLENBQUMsQ0FDRixDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUMsQ0FBQztJQUVGLFVBQVUsR0FBRyxLQUFLLElBQXFDLEVBQUU7UUFDdkQsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3pCLENBQUMsQ0FBQztJQUVNLGlCQUFpQixHQUFHLEtBQUssRUFDL0IsUUFBZ0IsRUFDaEIsUUFBZ0IsRUFDaEIsUUFBZ0IsRUFDQyxFQUFFO1FBQ25CLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNoRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQy9ELE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDMUMsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSAnZnMvcHJvbWlzZXMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBHZW5lcmF0aW9uUmVzdWx0IH0gZnJvbSAnLi9tb2RlbF9nZW5lcmF0b3IuanMnO1xuXG50eXBlIENsaWVudE9wZXJhdGlvbnMgPSBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuLyoqXG4gKiBEZWZpbmVzIGEgcmVzdWx0IGZvciBHcmFwaHFsIGRvY3VtZW50IGdlbmVyYXRpb25cbiAqL1xuZXhwb3J0IGNsYXNzIEFwcHN5bmNHcmFwaHFsR2VuZXJhdGlvblJlc3VsdCBpbXBsZW1lbnRzIEdlbmVyYXRpb25SZXN1bHQge1xuICAvKipcbiAgICogSW5zdGFudGlhdGVzIGFuIEFwcHN5bmNHcmFwaHFsR2VuZXJhdGlvblJlc3VsdFxuICAgKiBAcGFyYW0gb3BlcmF0aW9ucyBBIHJlY29yZCBvZiBGaWxlTmFtZSB0byBGaWxlQ29udGVudFxuICAgKiBpbiB0aGUgZm9ybWF0IG9mIFJlY29yZDxzdHJpbmcsc3RyaW5nPlxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBvcGVyYXRpb25zOiBDbGllbnRPcGVyYXRpb25zKSB7fVxuXG4gIHdyaXRlVG9EaXJlY3RvcnkgPSBhc3luYyAoXG4gICAgZGlyZWN0b3J5UGF0aDogc3RyaW5nLFxuICAgIC8vIFRPRE86IHVwZGF0ZSB0aGlzIHR5cGUgd2hlbiBQcmludGVyIGludGVyZmFjZSBnZXRzIGRlZmluZWQgaW4gcGxhdGZvcm0tY29yZS5cbiAgICBsb2c/OiAobWVzc2FnZTogc3RyaW5nKSA9PiB2b2lkXG4gICkgPT4ge1xuICAgIGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgT2JqZWN0LmVudHJpZXModGhpcy5vcGVyYXRpb25zKS5tYXAoYXN5bmMgKFtmaWxlTmFtZSwgY29udGVudF0pID0+IHtcbiAgICAgICAgYXdhaXQgdGhpcy53cml0ZVNjaGVtYVRvRmlsZShkaXJlY3RvcnlQYXRoLCBmaWxlTmFtZSwgY29udGVudCkudGhlbihcbiAgICAgICAgICAoZmlsZVBhdGg6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGxvZz8uKFxuICAgICAgICAgICAgICBgRmlsZSB3cml0dGVuOiAke3BhdGgucmVsYXRpdmUocHJvY2Vzcy5jd2QoKSwgZmlsZVBhdGgpfWBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfSlcbiAgICApO1xuICB9O1xuXG4gIGdldFJlc3VsdHMgPSBhc3luYyAoKTogUHJvbWlzZTxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PiA9PiB7XG4gICAgcmV0dXJuIHRoaXMub3BlcmF0aW9ucztcbiAgfTtcblxuICBwcml2YXRlIHdyaXRlU2NoZW1hVG9GaWxlID0gYXN5bmMgKFxuICAgIGJhc2VQYXRoOiBzdHJpbmcsXG4gICAgZmlsZVBhdGg6IHN0cmluZyxcbiAgICBjb250ZW50czogc3RyaW5nXG4gICk6IFByb21pc2U8c3RyaW5nPiA9PiB7XG4gICAgY29uc3QgYWJzRmlsZVBhdGggPSBwYXRoLnJlc29sdmUocGF0aC5qb2luKGJhc2VQYXRoLCBmaWxlUGF0aCkpO1xuICAgIGF3YWl0IGZzLm1rZGlyKHBhdGguZGlybmFtZShhYnNGaWxlUGF0aCksIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICAgIGF3YWl0IGZzLndyaXRlRmlsZShhYnNGaWxlUGF0aCwgY29udGVudHMpO1xuICAgIHJldHVybiBhYnNGaWxlUGF0aDtcbiAgfTtcbn1cbiJdfQ==