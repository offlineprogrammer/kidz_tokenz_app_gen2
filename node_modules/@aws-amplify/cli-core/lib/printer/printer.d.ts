/// <reference types="node" resolution-mode="require"/>
import { COLOR } from '../colors.js';
export type RecordValue = string | number | string[] | Date;
/**
 * The class that pretty prints to the output stream.
 */
export declare class Printer {
    private readonly minimumLogLevel;
    private readonly stdout;
    private readonly stderr;
    private readonly refreshRate;
    private timer;
    private timerSet;
    /**
     * Sets default configs
     */
    constructor(minimumLogLevel: LogLevel, stdout?: NodeJS.WriteStream, stderr?: NodeJS.WriteStream, refreshRate?: number);
    /**
     * Prints an array of objects/records to output stream.
     */
    printRecords: <T extends Record<string | number, RecordValue>>(...objects: T[]) => void;
    /**
     * Prints a given message (with optional color) to output stream.
     */
    print: (message: string, colorName?: COLOR) => void;
    /**
     * Logs a message with animated ellipsis
     */
    indicateProgress(message: string, callback: () => Promise<void>): Promise<void>;
    /**
     * Prints a new line to output stream
     */
    printNewLine: () => void;
    /**
     * Logs a message to the output stream.
     */
    log(message: string, level?: LogLevel, eol?: boolean): void;
    /**
     * Print an object/record to output stream.
     */
    private printRecord;
    /**
     * Start animating ellipsis at the end of a log message.
     */
    private startAnimatingEllipsis;
    /**
     * Stops animating ellipsis and replace with a log message.
     */
    private stopAnimatingEllipsis;
    /**
     * Writes escape sequence to stdout
     */
    private writeEscapeSequence;
    /**
     * Checks if the environment is TTY
     */
    private isTTY;
}
export declare enum LogLevel {
    ERROR = 0,
    INFO = 1,
    DEBUG = 2
}
//# sourceMappingURL=printer.d.ts.map