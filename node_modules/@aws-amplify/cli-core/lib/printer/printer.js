import { color } from '../colors.js';
import { EOL } from 'os';
/**
 * The class that pretty prints to the output stream.
 */
export class Printer {
    minimumLogLevel;
    stdout;
    stderr;
    refreshRate;
    // Properties for ellipsis animation
    timer;
    timerSet;
    /**
     * Sets default configs
     */
    constructor(minimumLogLevel, stdout = process.stdout, stderr = process.stderr, refreshRate = 500) {
        this.minimumLogLevel = minimumLogLevel;
        this.stdout = stdout;
        this.stderr = stderr;
        this.refreshRate = refreshRate;
    }
    /**
     * Prints an array of objects/records to output stream.
     */
    printRecords = (...objects) => {
        for (const obj of objects) {
            this.printRecord(obj);
        }
    };
    /**
     * Prints a given message (with optional color) to output stream.
     */
    print = (message, colorName) => {
        if (colorName) {
            this.stdout.write(color(colorName, message));
        }
        else {
            this.stdout.write(message);
        }
    };
    /**
     * Logs a message with animated ellipsis
     */
    async indicateProgress(message, callback) {
        try {
            this.startAnimatingEllipsis(message);
            await callback();
        }
        finally {
            this.stopAnimatingEllipsis(message);
        }
    }
    /**
     * Prints a new line to output stream
     */
    printNewLine = () => {
        this.stdout.write(EOL);
    };
    /**
     * Logs a message to the output stream.
     */
    log(message, level = LogLevel.INFO, eol = true) {
        const doLogMessage = level <= this.minimumLogLevel;
        if (!doLogMessage) {
            return;
        }
        const logMessage = this.minimumLogLevel === LogLevel.DEBUG
            ? `[${LogLevel[level]}] ${new Date().toISOString()}: ${message}`
            : message;
        if (level === LogLevel.ERROR) {
            this.stderr.write(logMessage);
        }
        else {
            this.stdout.write(logMessage);
        }
        if (eol) {
            this.printNewLine();
        }
    }
    /**
     * Print an object/record to output stream.
     */
    printRecord = (object) => {
        let message = '';
        const entries = Object.entries(object);
        entries.forEach(([key, val]) => {
            message = message.concat(` ${key}: ${val}${EOL}`);
        });
        this.stdout.write(message);
    };
    /**
     * Start animating ellipsis at the end of a log message.
     */
    startAnimatingEllipsis(message) {
        if (!this.isTTY()) {
            this.log(message, LogLevel.INFO);
            return;
        }
        if (this.timerSet) {
            throw new Error('Timer is already set to animate ellipsis, stop the current running timer before starting a new one.');
        }
        const frameLength = 4; // number of desired dots - 1
        let frameCount = 0;
        this.timerSet = true;
        this.writeEscapeSequence(EscapeSequence.HIDE_CURSOR);
        this.stdout.write(message);
        this.timer = setInterval(() => {
            this.writeEscapeSequence(EscapeSequence.CLEAR_LINE);
            this.writeEscapeSequence(EscapeSequence.MOVE_CURSOR_TO_START);
            this.stdout.write(message + '.'.repeat(++frameCount % frameLength));
        }, this.refreshRate);
    }
    /**
     * Stops animating ellipsis and replace with a log message.
     */
    stopAnimatingEllipsis(message) {
        if (!this.isTTY()) {
            return;
        }
        clearInterval(this.timer);
        this.timerSet = false;
        this.writeEscapeSequence(EscapeSequence.CLEAR_LINE);
        this.writeEscapeSequence(EscapeSequence.MOVE_CURSOR_TO_START);
        this.writeEscapeSequence(EscapeSequence.SHOW_CURSOR);
        this.stdout.write(`${message}...${EOL}`);
    }
    /**
     * Writes escape sequence to stdout
     */
    writeEscapeSequence(action) {
        if (!this.isTTY()) {
            return;
        }
        this.stdout.write(action);
    }
    /**
     * Checks if the environment is TTY
     */
    isTTY() {
        return this.stdout.isTTY;
    }
}
export var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["ERROR"] = 0] = "ERROR";
    LogLevel[LogLevel["INFO"] = 1] = "INFO";
    LogLevel[LogLevel["DEBUG"] = 2] = "DEBUG";
})(LogLevel || (LogLevel = {}));
var EscapeSequence;
(function (EscapeSequence) {
    EscapeSequence["CLEAR_LINE"] = "\u001B[2K";
    EscapeSequence["MOVE_CURSOR_TO_START"] = "\u001B[0G";
    EscapeSequence["SHOW_CURSOR"] = "\u001B[?25h";
    EscapeSequence["HIDE_CURSOR"] = "\u001B[?25l";
})(EscapeSequence || (EscapeSequence = {}));
//# sourceMappingURL=data:application/json;base64,