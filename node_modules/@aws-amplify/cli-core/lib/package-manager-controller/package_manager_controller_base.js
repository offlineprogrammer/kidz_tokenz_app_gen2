import { existsSync as _existsSync } from 'fs';
import _fsp from 'fs/promises';
import { execa as _execa } from 'execa';
import * as _path from 'path';
import { LogLevel } from '../printer/printer.js';
import { printer } from '../printer.js';
import { executeWithDebugLogger as _executeWithDebugLogger } from './execute_with_debugger_logger.js';
/**
 * PackageManagerController is an abstraction around package manager commands that are needed to initialize a project and install dependencies
 */
export class PackageManagerControllerBase {
    cwd;
    executable;
    binaryRunner;
    initDefault;
    installCommand;
    fsp;
    path;
    execa;
    executeWithDebugLogger;
    existsSync;
    /**
     * constructor - sets the project root
     */
    constructor(cwd, executable, binaryRunner, initDefault, installCommand, fsp = _fsp, path = _path, execa = _execa, executeWithDebugLogger = _executeWithDebugLogger, existsSync = _existsSync) {
        this.cwd = cwd;
        this.executable = executable;
        this.binaryRunner = binaryRunner;
        this.initDefault = initDefault;
        this.installCommand = installCommand;
        this.fsp = fsp;
        this.path = path;
        this.execa = execa;
        this.executeWithDebugLogger = executeWithDebugLogger;
        this.existsSync = existsSync;
    }
    /**
     * installDependencies - installs dependencies in the project root
     */
    async installDependencies(packageNames, type) {
        const args = [`${this.installCommand}`].concat(...packageNames);
        if (type === 'dev') {
            args.push('-D');
        }
        await this.executeWithDebugLogger(this.cwd, this.executable, args, this.execa);
    }
    /**
     * getWelcomeMessage - returns a welcome message for the customer
     */
    getWelcomeMessage = () => `Run \`${this.binaryRunner} amplify help\` for a list of available commands. 
Get started by running \`${this.binaryRunner} amplify sandbox\`.`;
    /**
     * initializeProject - initializes a project in the project root by checking the package.json file
     */
    initializeProject = async () => {
        if (this.packageJsonExists(this.cwd)) {
            // if package.json already exists, no need to do anything
            return;
        }
        printer.log(`No package.json file found in the current directory. Running \`${this.executable} init\`...`, LogLevel.DEBUG);
        try {
            await this.executeWithDebugLogger(this.cwd, this.executable, this.initDefault, this.execa);
        }
        catch {
            throw new Error(`\`${this.executable} init\` did not exit successfully. Initialize a valid JavaScript package before continuing.`);
        }
        if (!this.packageJsonExists(this.cwd)) {
            // this should only happen if the customer exits out of npm init before finishing
            throw new Error(`package.json does not exist after running \`${this.executable} init\`. Initialize a valid JavaScript package before continuing.'`);
        }
    };
    /**
     * initializeTsConfig - initializes a tsconfig.json file in the project root
     */
    async initializeTsConfig(targetDir) {
        const tscArgs = [
            'tsc',
            '--init',
            '--resolveJsonModule',
            'true',
            '--module',
            'es2022',
            '--moduleResolution',
            'bundler',
            '--target',
            'es2022',
        ];
        await this.executeWithDebugLogger(targetDir, this.binaryRunner, tscArgs, this.execa);
    }
    /**
     * runWithPackageManager - Factory function that runs a command with the specified package manager's binary runner
     */
    runWithPackageManager(args = [], dir, options) {
        return this.executeWithDebugLogger(dir, this.binaryRunner, args, this.execa, options);
    }
    getCommand = (args) => `'${this.binaryRunner} ${args.join(' ')}'`;
    /**
     * Check if a package.json file exists in projectRoot
     */
    packageJsonExists = (projectRoot) => {
        return this.existsSync(this.path.resolve(projectRoot, 'package.json'));
    };
}
//# sourceMappingURL=data:application/json;base64,