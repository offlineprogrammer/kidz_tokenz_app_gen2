import { existsSync as _existsSync } from 'fs';
import _fsp from 'fs/promises';
import { execa as _execa } from 'execa';
import * as _path from 'path';
import { LogLevel } from '@aws-amplify/cli-core';
import { executeWithDebugLogger as _executeWithDebugLogger } from './execute_with_debugger_logger.js';
import { PackageManagerControllerBase } from './package_manager_controller_base.js';
/**
 * YarnModernPackageManagerController is an abstraction around yarn modern (yarn v2+) commands that are needed to initialize a project and install dependencies
 */
export class YarnModernPackageManagerController extends PackageManagerControllerBase {
    cwd;
    printer;
    fsp;
    path;
    execa;
    executeWithDebugLogger;
    existsSync;
    /**
     * constructor
     */
    constructor(cwd, printer, fsp = _fsp, path = _path, execa = _execa, executeWithDebugLogger = _executeWithDebugLogger, existsSync = _existsSync) {
        super(cwd, 'yarn', 'yarn', ['init', '--yes'], 'add', fsp, path, execa, executeWithDebugLogger, existsSync);
        this.cwd = cwd;
        this.printer = printer;
        this.fsp = fsp;
        this.path = path;
        this.execa = execa;
        this.executeWithDebugLogger = executeWithDebugLogger;
        this.existsSync = existsSync;
    }
    installDependencies = async (packageNames, type) => {
        await this.addDependencies(this.cwd);
        await super.installDependencies(packageNames, type);
    };
    initializeTsConfig = async (targetDir) => {
        await this.addLockFile(targetDir);
        await this.addTypescript(targetDir);
        await super.initializeTsConfig(targetDir);
    };
    /**
     * addLockFile - adds a yarn.lock file to the project root for yarn v2+
     */
    addLockFile = async (targetDir) => {
        try {
            await this.fsp.writeFile(this.path.resolve(targetDir, 'yarn.lock'), '');
        }
        catch (error) {
            if (typeof error === 'string') {
                this.printer.log(`Error creating ${targetDir}/yarn.lock ${error}}`, LogLevel.ERROR);
            }
            else if (error instanceof Error) {
                this.printer.log(`Error creating ${targetDir}/yarn.lock ${error.message}}`, LogLevel.ERROR);
            }
        }
    };
    addTypescript = async (targetDir) => {
        await this.executeWithDebugLogger(targetDir, 'yarn', ['add', 'typescript@^5'], this.execa);
    };
    addDependencies = async (targetDir) => {
        await this.executeWithDebugLogger(targetDir, 'yarn', ['add', '-D', 'tsx', 'esbuild'], this.execa);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWFybl9tb2Rlcm5fcGFja2FnZV9tYW5hZ2VyX2NvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGFja2FnZS1tYW5hZ2VyLWNvbnRyb2xsZXIveWFybl9tb2Rlcm5fcGFja2FnZV9tYW5hZ2VyX2NvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsSUFBSSxXQUFXLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDL0MsT0FBTyxJQUFJLE1BQU0sYUFBYSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxLQUFLLElBQUksTUFBTSxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQ3hDLE9BQU8sS0FBSyxLQUFLLE1BQU0sTUFBTSxDQUFDO0FBQzlCLE9BQU8sRUFBRSxRQUFRLEVBQVcsTUFBTSx1QkFBdUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsc0JBQXNCLElBQUksdUJBQXVCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUN0RyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUVwRjs7R0FFRztBQUNILE1BQU0sT0FBTyxrQ0FBbUMsU0FBUSw0QkFBNEI7SUFLN0Q7SUFDRjtJQUNFO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFWckI7O09BRUc7SUFDSCxZQUNxQixHQUFXLEVBQ2IsT0FBZ0IsRUFDZCxNQUFNLElBQUksRUFDVixPQUFPLEtBQUssRUFDWixRQUFRLE1BQU0sRUFDZCx5QkFBeUIsdUJBQXVCLEVBQ2hELGFBQWEsV0FBVztRQUUzQyxLQUFLLENBQ0gsR0FBRyxFQUNILE1BQU0sRUFDTixNQUFNLEVBQ04sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLEVBQ2pCLEtBQUssRUFDTCxHQUFHLEVBQ0gsSUFBSSxFQUNKLEtBQUssRUFDTCxzQkFBc0IsRUFDdEIsVUFBVSxDQUNYLENBQUM7UUFuQmlCLFFBQUcsR0FBSCxHQUFHLENBQVE7UUFDYixZQUFPLEdBQVAsT0FBTyxDQUFTO1FBQ2QsUUFBRyxHQUFILEdBQUcsQ0FBTztRQUNWLFNBQUksR0FBSixJQUFJLENBQVE7UUFDWixVQUFLLEdBQUwsS0FBSyxDQUFTO1FBQ2QsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUEwQjtRQUNoRCxlQUFVLEdBQVYsVUFBVSxDQUFjO0lBYzdDLENBQUM7SUFFRCxtQkFBbUIsR0FHRSxLQUFLLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxFQUFFO1FBQ2hELE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckMsTUFBTSxLQUFLLENBQUMsbUJBQW1CLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3RELENBQUMsQ0FBQztJQUVGLGtCQUFrQixHQUFHLEtBQUssRUFBRSxTQUFpQixFQUFFLEVBQUU7UUFDL0MsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNwQyxNQUFNLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM1QyxDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNLLFdBQVcsR0FBRyxLQUFLLEVBQUUsU0FBaUIsRUFBRSxFQUFFO1FBQ2hELElBQUk7WUFDRixNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztTQUN6RTtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7Z0JBQzdCLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUNkLGtCQUFrQixTQUFTLGNBQWMsS0FBSyxHQUFHLEVBQ2pELFFBQVEsQ0FBQyxLQUFLLENBQ2YsQ0FBQzthQUNIO2lCQUFNLElBQUksS0FBSyxZQUFZLEtBQUssRUFBRTtnQkFDakMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQ2Qsa0JBQWtCLFNBQVMsY0FBYyxLQUFLLENBQUMsT0FBTyxHQUFHLEVBQ3pELFFBQVEsQ0FBQyxLQUFLLENBQ2YsQ0FBQzthQUNIO1NBQ0Y7SUFDSCxDQUFDLENBQUM7SUFFTSxhQUFhLEdBQUcsS0FBSyxFQUFFLFNBQWlCLEVBQUUsRUFBRTtRQUNsRCxNQUFNLElBQUksQ0FBQyxzQkFBc0IsQ0FDL0IsU0FBUyxFQUNULE1BQU0sRUFDTixDQUFDLEtBQUssRUFBRSxlQUFlLENBQUMsRUFDeEIsSUFBSSxDQUFDLEtBQUssQ0FDWCxDQUFDO0lBQ0osQ0FBQyxDQUFDO0lBRU0sZUFBZSxHQUFHLEtBQUssRUFBRSxTQUFpQixFQUFFLEVBQUU7UUFDcEQsTUFBTSxJQUFJLENBQUMsc0JBQXNCLENBQy9CLFNBQVMsRUFDVCxNQUFNLEVBQ04sQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsRUFDL0IsSUFBSSxDQUFDLEtBQUssQ0FDWCxDQUFDO0lBQ0osQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleGlzdHNTeW5jIGFzIF9leGlzdHNTeW5jIH0gZnJvbSAnZnMnO1xuaW1wb3J0IF9mc3AgZnJvbSAnZnMvcHJvbWlzZXMnO1xuaW1wb3J0IHsgZXhlY2EgYXMgX2V4ZWNhIH0gZnJvbSAnZXhlY2EnO1xuaW1wb3J0ICogYXMgX3BhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBMb2dMZXZlbCwgUHJpbnRlciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9jbGktY29yZSc7XG5pbXBvcnQgeyBleGVjdXRlV2l0aERlYnVnTG9nZ2VyIGFzIF9leGVjdXRlV2l0aERlYnVnTG9nZ2VyIH0gZnJvbSAnLi9leGVjdXRlX3dpdGhfZGVidWdnZXJfbG9nZ2VyLmpzJztcbmltcG9ydCB7IFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlckJhc2UgfSBmcm9tICcuL3BhY2thZ2VfbWFuYWdlcl9jb250cm9sbGVyX2Jhc2UuanMnO1xuXG4vKipcbiAqIFlhcm5Nb2Rlcm5QYWNrYWdlTWFuYWdlckNvbnRyb2xsZXIgaXMgYW4gYWJzdHJhY3Rpb24gYXJvdW5kIHlhcm4gbW9kZXJuICh5YXJuIHYyKykgY29tbWFuZHMgdGhhdCBhcmUgbmVlZGVkIHRvIGluaXRpYWxpemUgYSBwcm9qZWN0IGFuZCBpbnN0YWxsIGRlcGVuZGVuY2llc1xuICovXG5leHBvcnQgY2xhc3MgWWFybk1vZGVyblBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlciBleHRlbmRzIFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlckJhc2Uge1xuICAvKipcbiAgICogY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCByZWFkb25seSBjd2Q6IHN0cmluZyxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHByaW50ZXI6IFByaW50ZXIsXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGZzcCA9IF9mc3AsXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IHBhdGggPSBfcGF0aCxcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgZXhlY2EgPSBfZXhlY2EsXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGV4ZWN1dGVXaXRoRGVidWdMb2dnZXIgPSBfZXhlY3V0ZVdpdGhEZWJ1Z0xvZ2dlcixcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgZXhpc3RzU3luYyA9IF9leGlzdHNTeW5jXG4gICkge1xuICAgIHN1cGVyKFxuICAgICAgY3dkLFxuICAgICAgJ3lhcm4nLFxuICAgICAgJ3lhcm4nLFxuICAgICAgWydpbml0JywgJy0teWVzJ10sXG4gICAgICAnYWRkJyxcbiAgICAgIGZzcCxcbiAgICAgIHBhdGgsXG4gICAgICBleGVjYSxcbiAgICAgIGV4ZWN1dGVXaXRoRGVidWdMb2dnZXIsXG4gICAgICBleGlzdHNTeW5jXG4gICAgKTtcbiAgfVxuXG4gIGluc3RhbGxEZXBlbmRlbmNpZXM6IChcbiAgICBwYWNrYWdlTmFtZXM6IHN0cmluZ1tdLFxuICAgIHR5cGU6ICdkZXYnIHwgJ3Byb2QnXG4gICkgPT4gUHJvbWlzZTx2b2lkPiA9IGFzeW5jIChwYWNrYWdlTmFtZXMsIHR5cGUpID0+IHtcbiAgICBhd2FpdCB0aGlzLmFkZERlcGVuZGVuY2llcyh0aGlzLmN3ZCk7XG4gICAgYXdhaXQgc3VwZXIuaW5zdGFsbERlcGVuZGVuY2llcyhwYWNrYWdlTmFtZXMsIHR5cGUpO1xuICB9O1xuXG4gIGluaXRpYWxpemVUc0NvbmZpZyA9IGFzeW5jICh0YXJnZXREaXI6IHN0cmluZykgPT4ge1xuICAgIGF3YWl0IHRoaXMuYWRkTG9ja0ZpbGUodGFyZ2V0RGlyKTtcbiAgICBhd2FpdCB0aGlzLmFkZFR5cGVzY3JpcHQodGFyZ2V0RGlyKTtcbiAgICBhd2FpdCBzdXBlci5pbml0aWFsaXplVHNDb25maWcodGFyZ2V0RGlyKTtcbiAgfTtcblxuICAvKipcbiAgICogYWRkTG9ja0ZpbGUgLSBhZGRzIGEgeWFybi5sb2NrIGZpbGUgdG8gdGhlIHByb2plY3Qgcm9vdCBmb3IgeWFybiB2MitcbiAgICovXG4gIHByaXZhdGUgYWRkTG9ja0ZpbGUgPSBhc3luYyAodGFyZ2V0RGlyOiBzdHJpbmcpID0+IHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5mc3Aud3JpdGVGaWxlKHRoaXMucGF0aC5yZXNvbHZlKHRhcmdldERpciwgJ3lhcm4ubG9jaycpLCAnJyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGlmICh0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMucHJpbnRlci5sb2coXG4gICAgICAgICAgYEVycm9yIGNyZWF0aW5nICR7dGFyZ2V0RGlyfS95YXJuLmxvY2sgJHtlcnJvcn19YCxcbiAgICAgICAgICBMb2dMZXZlbC5FUlJPUlxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIHRoaXMucHJpbnRlci5sb2coXG4gICAgICAgICAgYEVycm9yIGNyZWF0aW5nICR7dGFyZ2V0RGlyfS95YXJuLmxvY2sgJHtlcnJvci5tZXNzYWdlfX1gLFxuICAgICAgICAgIExvZ0xldmVsLkVSUk9SXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHByaXZhdGUgYWRkVHlwZXNjcmlwdCA9IGFzeW5jICh0YXJnZXREaXI6IHN0cmluZykgPT4ge1xuICAgIGF3YWl0IHRoaXMuZXhlY3V0ZVdpdGhEZWJ1Z0xvZ2dlcihcbiAgICAgIHRhcmdldERpcixcbiAgICAgICd5YXJuJyxcbiAgICAgIFsnYWRkJywgJ3R5cGVzY3JpcHRAXjUnXSxcbiAgICAgIHRoaXMuZXhlY2FcbiAgICApO1xuICB9O1xuXG4gIHByaXZhdGUgYWRkRGVwZW5kZW5jaWVzID0gYXN5bmMgKHRhcmdldERpcjogc3RyaW5nKSA9PiB7XG4gICAgYXdhaXQgdGhpcy5leGVjdXRlV2l0aERlYnVnTG9nZ2VyKFxuICAgICAgdGFyZ2V0RGlyLFxuICAgICAgJ3lhcm4nLFxuICAgICAgWydhZGQnLCAnLUQnLCAndHN4JywgJ2VzYnVpbGQnXSxcbiAgICAgIHRoaXMuZXhlY2FcbiAgICApO1xuICB9O1xufVxuIl19