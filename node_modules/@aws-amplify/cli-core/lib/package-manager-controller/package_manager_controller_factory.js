import { NpmPackageManagerController } from './npm_package_manager_controller.js';
import { PnpmPackageManagerController } from './pnpm_package_manager_controller.js';
import { YarnClassicPackageManagerController } from './yarn_classic_package_manager_controller.js';
import { YarnModernPackageManagerController } from './yarn_modern_package_manager_controller.js';
/**
 * PackageManagerControllerFactory is a factory for an abstraction around package manager commands that are needed to initialize a project and install dependencies
 */
export class PackageManagerControllerFactory {
    cwd;
    printer;
    /**
     * constructor
     * @param cwd - the root directory of the project
     */
    constructor(cwd, printer) {
        this.cwd = cwd;
        this.printer = printer;
    }
    /**
     * getPackageManagerController - returns the package manager controller for each package manager
     */
    getPackageManagerController() {
        const packageManagerName = this.getPackageManagerName();
        switch (packageManagerName) {
            case 'npm':
                return new NpmPackageManagerController(this.cwd);
            case 'pnpm':
                return new PnpmPackageManagerController(this.cwd);
            case 'yarn-classic':
                return new YarnClassicPackageManagerController(this.cwd);
            case 'yarn-modern':
                return new YarnModernPackageManagerController(this.cwd, this.printer);
            default:
                throw new Error(`Package Manager ${packageManagerName} is not supported.`);
        }
    }
    /**
     * getPackageManagerName - returns the name of the package manager
     */
    getPackageManagerName() {
        const userAgent = process.env.npm_config_user_agent;
        if (userAgent === undefined) {
            throw new Error('npm_config_user_agent is undefined');
        }
        const packageManagerAndVersion = userAgent.split(' ')[0];
        const [packageManagerName, packageManagerVersion] = packageManagerAndVersion.split('/');
        if (packageManagerName === 'yarn') {
            const yarnMajorVersion = packageManagerVersion.split('.')[0];
            return `yarn-${yarnMajorVersion === '1' ? 'classic' : 'modern'}`;
        }
        return packageManagerName;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFja2FnZV9tYW5hZ2VyX2NvbnRyb2xsZXJfZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYWNrYWdlLW1hbmFnZXItY29udHJvbGxlci9wYWNrYWdlX21hbmFnZXJfY29udHJvbGxlcl9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ3BGLE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBQ25HLE9BQU8sRUFBRSxrQ0FBa0MsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBRWpHOztHQUVHO0FBQ0gsTUFBTSxPQUFPLCtCQUErQjtJQU12QjtJQUNBO0lBTm5COzs7T0FHRztJQUNILFlBQ21CLEdBQVcsRUFDWCxPQUFnQjtRQURoQixRQUFHLEdBQUgsR0FBRyxDQUFRO1FBQ1gsWUFBTyxHQUFQLE9BQU8sQ0FBUztJQUNoQyxDQUFDO0lBRUo7O09BRUc7SUFDSCwyQkFBMkI7UUFDekIsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUN4RCxRQUFRLGtCQUFrQixFQUFFO1lBQzFCLEtBQUssS0FBSztnQkFDUixPQUFPLElBQUksMkJBQTJCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ25ELEtBQUssTUFBTTtnQkFDVCxPQUFPLElBQUksNEJBQTRCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3BELEtBQUssY0FBYztnQkFDakIsT0FBTyxJQUFJLG1DQUFtQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMzRCxLQUFLLGFBQWE7Z0JBQ2hCLE9BQU8sSUFBSSxrQ0FBa0MsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN4RTtnQkFDRSxNQUFNLElBQUksS0FBSyxDQUNiLG1CQUFtQixrQkFBa0Isb0JBQW9CLENBQzFELENBQUM7U0FDTDtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNLLHFCQUFxQjtRQUMzQixNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDO1FBQ3BELElBQUksU0FBUyxLQUFLLFNBQVMsRUFBRTtZQUMzQixNQUFNLElBQUksS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7U0FDdkQ7UUFDRCxNQUFNLHdCQUF3QixHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekQsTUFBTSxDQUFDLGtCQUFrQixFQUFFLHFCQUFxQixDQUFDLEdBQy9DLHdCQUF3QixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUV0QyxJQUFJLGtCQUFrQixLQUFLLE1BQU0sRUFBRTtZQUNqQyxNQUFNLGdCQUFnQixHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3RCxPQUFPLFFBQVEsZ0JBQWdCLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ2xFO1FBQ0QsT0FBTyxrQkFBa0IsQ0FBQztJQUM1QixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0eXBlIFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IHsgUHJpbnRlciB9IGZyb20gJy4uL3ByaW50ZXIvcHJpbnRlci5qcyc7XG5pbXBvcnQgeyBOcG1QYWNrYWdlTWFuYWdlckNvbnRyb2xsZXIgfSBmcm9tICcuL25wbV9wYWNrYWdlX21hbmFnZXJfY29udHJvbGxlci5qcyc7XG5pbXBvcnQgeyBQbnBtUGFja2FnZU1hbmFnZXJDb250cm9sbGVyIH0gZnJvbSAnLi9wbnBtX3BhY2thZ2VfbWFuYWdlcl9jb250cm9sbGVyLmpzJztcbmltcG9ydCB7IFlhcm5DbGFzc2ljUGFja2FnZU1hbmFnZXJDb250cm9sbGVyIH0gZnJvbSAnLi95YXJuX2NsYXNzaWNfcGFja2FnZV9tYW5hZ2VyX2NvbnRyb2xsZXIuanMnO1xuaW1wb3J0IHsgWWFybk1vZGVyblBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlciB9IGZyb20gJy4veWFybl9tb2Rlcm5fcGFja2FnZV9tYW5hZ2VyX2NvbnRyb2xsZXIuanMnO1xuXG4vKipcbiAqIFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlckZhY3RvcnkgaXMgYSBmYWN0b3J5IGZvciBhbiBhYnN0cmFjdGlvbiBhcm91bmQgcGFja2FnZSBtYW5hZ2VyIGNvbW1hbmRzIHRoYXQgYXJlIG5lZWRlZCB0byBpbml0aWFsaXplIGEgcHJvamVjdCBhbmQgaW5zdGFsbCBkZXBlbmRlbmNpZXNcbiAqL1xuZXhwb3J0IGNsYXNzIFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlckZhY3Rvcnkge1xuICAvKipcbiAgICogY29uc3RydWN0b3JcbiAgICogQHBhcmFtIGN3ZCAtIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGUgcHJvamVjdFxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBjd2Q6IHN0cmluZyxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHByaW50ZXI6IFByaW50ZXJcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBnZXRQYWNrYWdlTWFuYWdlckNvbnRyb2xsZXIgLSByZXR1cm5zIHRoZSBwYWNrYWdlIG1hbmFnZXIgY29udHJvbGxlciBmb3IgZWFjaCBwYWNrYWdlIG1hbmFnZXJcbiAgICovXG4gIGdldFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlcigpOiBQYWNrYWdlTWFuYWdlckNvbnRyb2xsZXIge1xuICAgIGNvbnN0IHBhY2thZ2VNYW5hZ2VyTmFtZSA9IHRoaXMuZ2V0UGFja2FnZU1hbmFnZXJOYW1lKCk7XG4gICAgc3dpdGNoIChwYWNrYWdlTWFuYWdlck5hbWUpIHtcbiAgICAgIGNhc2UgJ25wbSc6XG4gICAgICAgIHJldHVybiBuZXcgTnBtUGFja2FnZU1hbmFnZXJDb250cm9sbGVyKHRoaXMuY3dkKTtcbiAgICAgIGNhc2UgJ3BucG0nOlxuICAgICAgICByZXR1cm4gbmV3IFBucG1QYWNrYWdlTWFuYWdlckNvbnRyb2xsZXIodGhpcy5jd2QpO1xuICAgICAgY2FzZSAneWFybi1jbGFzc2ljJzpcbiAgICAgICAgcmV0dXJuIG5ldyBZYXJuQ2xhc3NpY1BhY2thZ2VNYW5hZ2VyQ29udHJvbGxlcih0aGlzLmN3ZCk7XG4gICAgICBjYXNlICd5YXJuLW1vZGVybic6XG4gICAgICAgIHJldHVybiBuZXcgWWFybk1vZGVyblBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlcih0aGlzLmN3ZCwgdGhpcy5wcmludGVyKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgUGFja2FnZSBNYW5hZ2VyICR7cGFja2FnZU1hbmFnZXJOYW1lfSBpcyBub3Qgc3VwcG9ydGVkLmBcbiAgICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogZ2V0UGFja2FnZU1hbmFnZXJOYW1lIC0gcmV0dXJucyB0aGUgbmFtZSBvZiB0aGUgcGFja2FnZSBtYW5hZ2VyXG4gICAqL1xuICBwcml2YXRlIGdldFBhY2thZ2VNYW5hZ2VyTmFtZSgpIHtcbiAgICBjb25zdCB1c2VyQWdlbnQgPSBwcm9jZXNzLmVudi5ucG1fY29uZmlnX3VzZXJfYWdlbnQ7XG4gICAgaWYgKHVzZXJBZ2VudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ25wbV9jb25maWdfdXNlcl9hZ2VudCBpcyB1bmRlZmluZWQnKTtcbiAgICB9XG4gICAgY29uc3QgcGFja2FnZU1hbmFnZXJBbmRWZXJzaW9uID0gdXNlckFnZW50LnNwbGl0KCcgJylbMF07XG4gICAgY29uc3QgW3BhY2thZ2VNYW5hZ2VyTmFtZSwgcGFja2FnZU1hbmFnZXJWZXJzaW9uXSA9XG4gICAgICBwYWNrYWdlTWFuYWdlckFuZFZlcnNpb24uc3BsaXQoJy8nKTtcblxuICAgIGlmIChwYWNrYWdlTWFuYWdlck5hbWUgPT09ICd5YXJuJykge1xuICAgICAgY29uc3QgeWFybk1ham9yVmVyc2lvbiA9IHBhY2thZ2VNYW5hZ2VyVmVyc2lvbi5zcGxpdCgnLicpWzBdO1xuICAgICAgcmV0dXJuIGB5YXJuLSR7eWFybk1ham9yVmVyc2lvbiA9PT0gJzEnID8gJ2NsYXNzaWMnIDogJ21vZGVybid9YDtcbiAgICB9XG4gICAgcmV0dXJuIHBhY2thZ2VNYW5hZ2VyTmFtZTtcbiAgfVxufVxuIl19