import { existsSync as _existsSync } from 'fs';
import _fsp from 'fs/promises';
import { execa as _execa } from 'execa';
import * as _path from 'path';
import { executeWithDebugLogger as _executeWithDebugLogger } from './execute_with_debugger_logger.js';
import { PackageManagerControllerBase } from './package_manager_controller_base.js';
/**
 * YarnClassicPackageManagerController is an abstraction around yarn classic commands that are needed to initialize a project and install dependencies
 */
export class YarnClassicPackageManagerController extends PackageManagerControllerBase {
    cwd;
    fsp;
    path;
    execa;
    executeWithDebugLogger;
    existsSync;
    /**
     * Abstraction around yarn classic commands that are needed to initialize a project and install dependencies
     */
    constructor(cwd, fsp = _fsp, path = _path, execa = _execa, executeWithDebugLogger = _executeWithDebugLogger, existsSync = _existsSync) {
        super(cwd, 'yarn', 'yarn', ['init', '--yes'], 'add', fsp, path, execa, executeWithDebugLogger, existsSync);
        this.cwd = cwd;
        this.fsp = fsp;
        this.path = path;
        this.execa = execa;
        this.executeWithDebugLogger = executeWithDebugLogger;
        this.existsSync = existsSync;
    }
    initializeTsConfig = async (targetDir) => {
        await this.addTypescript(targetDir);
        await super.initializeTsConfig(targetDir);
    };
    /**
     * addTypescript - initializes a tsconfig.json file in the project root
     */
    addTypescript = async (targetDir) => {
        await this.executeWithDebugLogger(targetDir, 'yarn', ['add', 'typescript@^5'], this.execa);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWFybl9jbGFzc2ljX3BhY2thZ2VfbWFuYWdlcl9jb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3BhY2thZ2UtbWFuYWdlci1jb250cm9sbGVyL3lhcm5fY2xhc3NpY19wYWNrYWdlX21hbmFnZXJfY29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxJQUFJLFdBQVcsRUFBRSxNQUFNLElBQUksQ0FBQztBQUMvQyxPQUFPLElBQUksTUFBTSxhQUFhLENBQUM7QUFDL0IsT0FBTyxFQUFFLEtBQUssSUFBSSxNQUFNLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDeEMsT0FBTyxLQUFLLEtBQUssTUFBTSxNQUFNLENBQUM7QUFDOUIsT0FBTyxFQUFFLHNCQUFzQixJQUFJLHVCQUF1QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDdEcsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFFcEY7O0dBRUc7QUFDSCxNQUFNLE9BQU8sbUNBQW9DLFNBQVEsNEJBQTRCO0lBSzlEO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQVRyQjs7T0FFRztJQUNILFlBQ3FCLEdBQVcsRUFDWCxNQUFNLElBQUksRUFDVixPQUFPLEtBQUssRUFDWixRQUFRLE1BQU0sRUFDZCx5QkFBeUIsdUJBQXVCLEVBQ2hELGFBQWEsV0FBVztRQUUzQyxLQUFLLENBQ0gsR0FBRyxFQUNILE1BQU0sRUFDTixNQUFNLEVBQ04sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLEVBQ2pCLEtBQUssRUFDTCxHQUFHLEVBQ0gsSUFBSSxFQUNKLEtBQUssRUFDTCxzQkFBc0IsRUFDdEIsVUFBVSxDQUNYLENBQUM7UUFsQmlCLFFBQUcsR0FBSCxHQUFHLENBQVE7UUFDWCxRQUFHLEdBQUgsR0FBRyxDQUFPO1FBQ1YsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUNaLFVBQUssR0FBTCxLQUFLLENBQVM7UUFDZCwyQkFBc0IsR0FBdEIsc0JBQXNCLENBQTBCO1FBQ2hELGVBQVUsR0FBVixVQUFVLENBQWM7SUFjN0MsQ0FBQztJQUVELGtCQUFrQixHQUFHLEtBQUssRUFBRSxTQUFpQixFQUFFLEVBQUU7UUFDL0MsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sS0FBSyxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzVDLENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0ssYUFBYSxHQUFHLEtBQUssRUFBRSxTQUFpQixFQUFFLEVBQUU7UUFDbEQsTUFBTSxJQUFJLENBQUMsc0JBQXNCLENBQy9CLFNBQVMsRUFDVCxNQUFNLEVBQ04sQ0FBQyxLQUFLLEVBQUUsZUFBZSxDQUFDLEVBQ3hCLElBQUksQ0FBQyxLQUFLLENBQ1gsQ0FBQztJQUNKLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXhpc3RzU3luYyBhcyBfZXhpc3RzU3luYyB9IGZyb20gJ2ZzJztcbmltcG9ydCBfZnNwIGZyb20gJ2ZzL3Byb21pc2VzJztcbmltcG9ydCB7IGV4ZWNhIGFzIF9leGVjYSB9IGZyb20gJ2V4ZWNhJztcbmltcG9ydCAqIGFzIF9wYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgZXhlY3V0ZVdpdGhEZWJ1Z0xvZ2dlciBhcyBfZXhlY3V0ZVdpdGhEZWJ1Z0xvZ2dlciB9IGZyb20gJy4vZXhlY3V0ZV93aXRoX2RlYnVnZ2VyX2xvZ2dlci5qcyc7XG5pbXBvcnQgeyBQYWNrYWdlTWFuYWdlckNvbnRyb2xsZXJCYXNlIH0gZnJvbSAnLi9wYWNrYWdlX21hbmFnZXJfY29udHJvbGxlcl9iYXNlLmpzJztcblxuLyoqXG4gKiBZYXJuQ2xhc3NpY1BhY2thZ2VNYW5hZ2VyQ29udHJvbGxlciBpcyBhbiBhYnN0cmFjdGlvbiBhcm91bmQgeWFybiBjbGFzc2ljIGNvbW1hbmRzIHRoYXQgYXJlIG5lZWRlZCB0byBpbml0aWFsaXplIGEgcHJvamVjdCBhbmQgaW5zdGFsbCBkZXBlbmRlbmNpZXNcbiAqL1xuZXhwb3J0IGNsYXNzIFlhcm5DbGFzc2ljUGFja2FnZU1hbmFnZXJDb250cm9sbGVyIGV4dGVuZHMgUGFja2FnZU1hbmFnZXJDb250cm9sbGVyQmFzZSB7XG4gIC8qKlxuICAgKiBBYnN0cmFjdGlvbiBhcm91bmQgeWFybiBjbGFzc2ljIGNvbW1hbmRzIHRoYXQgYXJlIG5lZWRlZCB0byBpbml0aWFsaXplIGEgcHJvamVjdCBhbmQgaW5zdGFsbCBkZXBlbmRlbmNpZXNcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCByZWFkb25seSBjd2Q6IHN0cmluZyxcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgZnNwID0gX2ZzcCxcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgcGF0aCA9IF9wYXRoLFxuICAgIHByb3RlY3RlZCByZWFkb25seSBleGVjYSA9IF9leGVjYSxcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgZXhlY3V0ZVdpdGhEZWJ1Z0xvZ2dlciA9IF9leGVjdXRlV2l0aERlYnVnTG9nZ2VyLFxuICAgIHByb3RlY3RlZCByZWFkb25seSBleGlzdHNTeW5jID0gX2V4aXN0c1N5bmNcbiAgKSB7XG4gICAgc3VwZXIoXG4gICAgICBjd2QsXG4gICAgICAneWFybicsXG4gICAgICAneWFybicsXG4gICAgICBbJ2luaXQnLCAnLS15ZXMnXSxcbiAgICAgICdhZGQnLFxuICAgICAgZnNwLFxuICAgICAgcGF0aCxcbiAgICAgIGV4ZWNhLFxuICAgICAgZXhlY3V0ZVdpdGhEZWJ1Z0xvZ2dlcixcbiAgICAgIGV4aXN0c1N5bmNcbiAgICApO1xuICB9XG5cbiAgaW5pdGlhbGl6ZVRzQ29uZmlnID0gYXN5bmMgKHRhcmdldERpcjogc3RyaW5nKSA9PiB7XG4gICAgYXdhaXQgdGhpcy5hZGRUeXBlc2NyaXB0KHRhcmdldERpcik7XG4gICAgYXdhaXQgc3VwZXIuaW5pdGlhbGl6ZVRzQ29uZmlnKHRhcmdldERpcik7XG4gIH07XG5cbiAgLyoqXG4gICAqIGFkZFR5cGVzY3JpcHQgLSBpbml0aWFsaXplcyBhIHRzY29uZmlnLmpzb24gZmlsZSBpbiB0aGUgcHJvamVjdCByb290XG4gICAqL1xuICBwcml2YXRlIGFkZFR5cGVzY3JpcHQgPSBhc3luYyAodGFyZ2V0RGlyOiBzdHJpbmcpID0+IHtcbiAgICBhd2FpdCB0aGlzLmV4ZWN1dGVXaXRoRGVidWdMb2dnZXIoXG4gICAgICB0YXJnZXREaXIsXG4gICAgICAneWFybicsXG4gICAgICBbJ2FkZCcsICd0eXBlc2NyaXB0QF41J10sXG4gICAgICB0aGlzLmV4ZWNhXG4gICAgKTtcbiAgfTtcbn1cbiJdfQ==