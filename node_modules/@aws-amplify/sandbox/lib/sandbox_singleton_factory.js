import { PackageManagerControllerFactory, } from '@aws-amplify/cli-core';
import { FileWatchingSandbox } from './file_watching_sandbox.js';
import { BackendDeployerFactory } from '@aws-amplify/backend-deployer';
import { AmplifySandboxExecutor } from './sandbox_executor.js';
import { CloudFormationClient } from '@aws-sdk/client-cloudformation';
import { getSecretClient } from '@aws-amplify/backend-secret';
/**
 * Factory to create a new sandbox
 */
export class SandboxSingletonFactory {
    sandboxIdResolver;
    printer;
    instance;
    /**
     * sandboxIdResolver allows sandbox to lazily load the sandbox backend id on demand
     */
    constructor(sandboxIdResolver, printer) {
        this.sandboxIdResolver = sandboxIdResolver;
        this.printer = printer;
    }
    /**
     * Returns a singleton instance of a Sandbox
     */
    getInstance = async () => {
        if (!this.instance) {
            const packageManagerControllerFactory = new PackageManagerControllerFactory(process.cwd(), this.printer);
            const backendDeployerFactory = new BackendDeployerFactory(packageManagerControllerFactory.getPackageManagerController());
            this.instance = new FileWatchingSandbox(this.sandboxIdResolver, new AmplifySandboxExecutor(backendDeployerFactory.getInstance(), getSecretClient(), this.printer), new CloudFormationClient(), this.printer);
        }
        return this.instance;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9zaW5nbGV0b25fZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zYW5kYm94X3NpbmdsZXRvbl9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCwrQkFBK0IsR0FFaEMsTUFBTSx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUVqRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUN2RSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN0RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFOUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sdUJBQXVCO0lBTWY7SUFDQTtJQU5YLFFBQVEsQ0FBc0I7SUFDdEM7O09BRUc7SUFDSCxZQUNtQixpQkFBMkMsRUFDM0MsT0FBZ0I7UUFEaEIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUEwQjtRQUMzQyxZQUFPLEdBQVAsT0FBTyxDQUFTO0lBQ2hDLENBQUM7SUFFSjs7T0FFRztJQUNILFdBQVcsR0FBRyxLQUFLLElBQXNCLEVBQUU7UUFDekMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsTUFBTSwrQkFBK0IsR0FDbkMsSUFBSSwrQkFBK0IsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ25FLE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxzQkFBc0IsQ0FDdkQsK0JBQStCLENBQUMsMkJBQTJCLEVBQUUsQ0FDOUQsQ0FBQztZQUNGLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxtQkFBbUIsQ0FDckMsSUFBSSxDQUFDLGlCQUFpQixFQUN0QixJQUFJLHNCQUFzQixDQUN4QixzQkFBc0IsQ0FBQyxXQUFXLEVBQUUsRUFDcEMsZUFBZSxFQUFFLEVBQ2pCLElBQUksQ0FBQyxPQUFPLENBQ2IsRUFDRCxJQUFJLG9CQUFvQixFQUFFLEVBQzFCLElBQUksQ0FBQyxPQUFPLENBQ2IsQ0FBQztTQUNIO1FBQ0QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgUGFja2FnZU1hbmFnZXJDb250cm9sbGVyRmFjdG9yeSxcbiAgUHJpbnRlcixcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NsaS1jb3JlJztcbmltcG9ydCB7IEZpbGVXYXRjaGluZ1NhbmRib3ggfSBmcm9tICcuL2ZpbGVfd2F0Y2hpbmdfc2FuZGJveC5qcyc7XG5pbXBvcnQgeyBCYWNrZW5kSWRTYW5kYm94UmVzb2x2ZXIsIFNhbmRib3ggfSBmcm9tICcuL3NhbmRib3guanMnO1xuaW1wb3J0IHsgQmFja2VuZERlcGxveWVyRmFjdG9yeSB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kLWRlcGxveWVyJztcbmltcG9ydCB7IEFtcGxpZnlTYW5kYm94RXhlY3V0b3IgfSBmcm9tICcuL3NhbmRib3hfZXhlY3V0b3IuanMnO1xuaW1wb3J0IHsgQ2xvdWRGb3JtYXRpb25DbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtY2xvdWRmb3JtYXRpb24nO1xuaW1wb3J0IHsgZ2V0U2VjcmV0Q2xpZW50IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtc2VjcmV0JztcblxuLyoqXG4gKiBGYWN0b3J5IHRvIGNyZWF0ZSBhIG5ldyBzYW5kYm94XG4gKi9cbmV4cG9ydCBjbGFzcyBTYW5kYm94U2luZ2xldG9uRmFjdG9yeSB7XG4gIHByaXZhdGUgaW5zdGFuY2U6IFNhbmRib3ggfCB1bmRlZmluZWQ7XG4gIC8qKlxuICAgKiBzYW5kYm94SWRSZXNvbHZlciBhbGxvd3Mgc2FuZGJveCB0byBsYXppbHkgbG9hZCB0aGUgc2FuZGJveCBiYWNrZW5kIGlkIG9uIGRlbWFuZFxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBzYW5kYm94SWRSZXNvbHZlcjogQmFja2VuZElkU2FuZGJveFJlc29sdmVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJpbnRlcjogUHJpbnRlclxuICApIHt9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzaW5nbGV0b24gaW5zdGFuY2Ugb2YgYSBTYW5kYm94XG4gICAqL1xuICBnZXRJbnN0YW5jZSA9IGFzeW5jICgpOiBQcm9taXNlPFNhbmRib3g+ID0+IHtcbiAgICBpZiAoIXRoaXMuaW5zdGFuY2UpIHtcbiAgICAgIGNvbnN0IHBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlckZhY3RvcnkgPVxuICAgICAgICBuZXcgUGFja2FnZU1hbmFnZXJDb250cm9sbGVyRmFjdG9yeShwcm9jZXNzLmN3ZCgpLCB0aGlzLnByaW50ZXIpO1xuICAgICAgY29uc3QgYmFja2VuZERlcGxveWVyRmFjdG9yeSA9IG5ldyBCYWNrZW5kRGVwbG95ZXJGYWN0b3J5KFxuICAgICAgICBwYWNrYWdlTWFuYWdlckNvbnRyb2xsZXJGYWN0b3J5LmdldFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlcigpXG4gICAgICApO1xuICAgICAgdGhpcy5pbnN0YW5jZSA9IG5ldyBGaWxlV2F0Y2hpbmdTYW5kYm94KFxuICAgICAgICB0aGlzLnNhbmRib3hJZFJlc29sdmVyLFxuICAgICAgICBuZXcgQW1wbGlmeVNhbmRib3hFeGVjdXRvcihcbiAgICAgICAgICBiYWNrZW5kRGVwbG95ZXJGYWN0b3J5LmdldEluc3RhbmNlKCksXG4gICAgICAgICAgZ2V0U2VjcmV0Q2xpZW50KCksXG4gICAgICAgICAgdGhpcy5wcmludGVyXG4gICAgICAgICksXG4gICAgICAgIG5ldyBDbG91ZEZvcm1hdGlvbkNsaWVudCgpLFxuICAgICAgICB0aGlzLnByaW50ZXJcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmluc3RhbmNlO1xuICB9O1xufVxuIl19